[
  {
    "objectID": "lessons/12-Multipaneling.html",
    "href": "lessons/12-Multipaneling.html",
    "title": "12: Multipaneling",
    "section": "",
    "text": "Using grep to find values that meet multiple conditions\nArrange multiple plots on a canvas\nCustomizing plots on a canvas\n\n\n\nThe script for this lesson is here\n\nSave the R file, called lesson12-Multipaneling.R to the scripts folder inside your RStudio Project\n\n \nThe data for this lesson (Lansing weather in 2016) is here (same as last lesson)\n\nSave the CSV file, called Lansing2016Data.csv to the data folder inside your RStudio Project. \n\n\n\n\nIn this lesson we are going to put multiple plots on one canvas.  To do this we must first install an R package called gridExtra.\n \nTo install gridExtra in RStudio:\n\ngo to Tools -&gt; Install Packages\nin the Packages textbox type in gridExtra then\nclick Install\n\n \nYou will also need to add the gridExtra library to your script:\nlibrary(package=gridExtra);",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "12: Multipaneling"
    ]
  },
  {
    "objectID": "lessons/12-Multipaneling.html#purpose",
    "href": "lessons/12-Multipaneling.html#purpose",
    "title": "12: Multipaneling",
    "section": "",
    "text": "Using grep to find values that meet multiple conditions\nArrange multiple plots on a canvas\nCustomizing plots on a canvas\n\n\n\nThe script for this lesson is here\n\nSave the R file, called lesson12-Multipaneling.R to the scripts folder inside your RStudio Project\n\n \nThe data for this lesson (Lansing weather in 2016) is here (same as last lesson)\n\nSave the CSV file, called Lansing2016Data.csv to the data folder inside your RStudio Project. \n\n\n\n\nIn this lesson we are going to put multiple plots on one canvas.  To do this we must first install an R package called gridExtra.\n \nTo install gridExtra in RStudio:\n\ngo to Tools -&gt; Install Packages\nin the Packages textbox type in gridExtra then\nclick Install\n\n \nYou will also need to add the gridExtra library to your script:\nlibrary(package=gridExtra);",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "12: Multipaneling"
    ]
  },
  {
    "objectID": "lessons/12-Multipaneling.html#conditional-comparisons-of-vector-values",
    "href": "lessons/12-Multipaneling.html#conditional-comparisons-of-vector-values",
    "title": "12: Multipaneling",
    "section": "2 Conditional comparisons of vector values",
    "text": "2 Conditional comparisons of vector values\nWe are going to working with the weatherType column in weatherData.  weatherType consists of codes that indicate the type of weather events that occurred during the day.  For instance RA means rain, BR means breezy, HZ means hazy. The weather events are separated by commas within the cell.\n\n\n\n\n\n\nFigure 1: weatherType column in weatherData\n\n\n\nThe problem with the way weatherType is presented is that it makes it hard to find days with one specific weather condition (like rain, RA).  The following code will only give you the index values of days that were exclusively rainy (i.e., no other weather event except for RA):\nwhich(weatherData$weatherType == \"RA\") # find rainy days\nA common way to deal with this situation is to break the column up into multiple columns, each representing one weather condition (RA, HZ, BR, etc…).  A more robust way is to use grep() to find the codes within the column.\n\n2.1 grep() to find weather event\nWe can use grep() to find patterns within a column.  In this case, patterns that match the characters RA and BR (rainy and breezy):\n#### Part 1: using grep to find days with a specific weather event\nrainyDays = grep(weatherData$weatherType, pattern=\"RA\");   # any day with rain\nbreezyDays = grep(weatherData$weatherType, pattern=\"BR\");  # any breezy day\nrainyDays has 124 values, meaning there were 124 days with some rain (the code RA)\nbreezyDays has 172 values, meaning there were 172 days with strong winds (the code BR)\n\n\n\n\n\n\nFigure 2: Finding the index values of the days with rain and those that were breezy\n\n\n\n\n\n2.2 Plotting a subset of values\nWe will now plot humidity vs temperature for only the 172 days that were breezy using breezyDays to subset of weatherData.\n \nWe usually would start the plot with:\nggplot(data=weatherData)\nBut, we only want a subset of the weatherData data frame – the rows given by the values in breezyDays:\nggplot(data=weatherData[breezyDays,])\nOtherwise, the plot should look familiar:\n#### Part 2: Scatterplot for Humidity vs. Temperature on breezy days\nplotA = ggplot(«data=weatherData[breezyDays,]») +    # 172 days were breezy\n        geom_point(mapping=aes(x=avgTemp, y=relHum)) +\n        theme_classic() +\n        labs(title = \"Humidity vs. Temperature (Breezy Days)\",\n             subtitle = \"Lansing, Michigan: 2016\",\n             x = \"Degrees (Fahrenheit)\",\n             y = \"Relative Humidity\");\nplot(plotA);\nWe have a plot with 172 points, matching the 172 days it was breezy (or, the 172 index values in breezyDays).\n\n\n\n\n\n\nFigure 3: Scatterplot of humidity vs. temperature on breezy days",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "12: Multipaneling"
    ]
  },
  {
    "objectID": "lessons/12-Multipaneling.html#combining-conditions",
    "href": "lessons/12-Multipaneling.html#combining-conditions",
    "title": "12: Multipaneling",
    "section": "3 Combining conditions",
    "text": "3 Combining conditions\nNext we want to find index values for various combinations of weather events for example:\n\ndays with two events (e.g., rainy and breezy)\ndays with at least one of two events (e.g., rainy or breezy)\ndays with exclusively one event (e.g., rainy and not breezy)\n\n \nR has three functions, called set operations, that can perform the above tasks:\n\nintersect() – the vector equivalent of an AND statement (rainy & breezy)\nunion() – the vector equivalent of an OR statement (rainy | breezy)\nsetdiff() – the vector equivalent of an AND NOT statement (rainy & !breezy)\n\n \nThe following code creates a vector that contains the index values for days that were both rainy and windy:\nrainyAndBreezy = intersect(rainyDays, breezyDays);\nLet’s code for the four possible combinations of windy and rainy conditions: \n#### Part 3: Combine event using set operations\nrainyAndBreezy = intersect(rainyDays, breezyDays); # days with rain AND wind\nrainyOrBreezy = union(rainyDays, breezyDays);      # days with rain OR wind\nrainyNotBreezy = setdiff(rainyDays, breezyDays);   # days with rain but NOT wind\nbreezyNotRainy = setdiff(breezyDays, rainyDays);   # days with wind but NOT rain\nWe can see that there were 82 days that were breezy but not rainy represented by the 82 index values in breezyNotRainy.  There were 34 days that were rainy but not breezy, represented by the 34 index values in rainyNotBreezy – the first of those days being the 69th day of the year, which is in early April.\n\n\n\n\n\n\nFigure 4: Vectors that contain the indexes for combined weather events\n\n\n\n\n3.1 Reversing conditions\nYou can use setdiff to get the inverse of a condition\nnotRainyAndNotBreezy = setdiff(1:nrow(weatherData), rainyOrBreezy);\nThe first argument, 1:nrow(weatherData) creates a sequence from 1 to 366 (i.e., all values)\nThe second argument, rainyOrBreezy, gives the 206 days it was rainy or breezy\n \nsetDiff returns the values in the first argument that are not in the second argument.\n \nSo, setDiff return the 366-206 = 160, values not in rainyOrBreezy.\nrainyOrBreezy:        int [1:«206»] 8 9 10 15 25 ...\nnotRainyAndNotBreezy: int [1:«160»] 2 3 4 5 6 7 ...\nrainyOrBreezy does not give all the numbers in order.  Use sort() to see the numbers in order:\n&gt; sort(rainyOrBreezy)\n  [1]   1   4   8   9  10  11  12  13  14  15  18  20  21\n [14]  22  23  25  26  27  28  31  32  33  34  35  36  37\n [27]  40  46  47  48  55  56  59  60  61  62  63  64  65 ...",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "12: Multipaneling"
    ]
  },
  {
    "objectID": "lessons/12-Multipaneling.html#set-up-for-multiple-plots",
    "href": "lessons/12-Multipaneling.html#set-up-for-multiple-plots",
    "title": "12: Multipaneling",
    "section": "4 Set up for multiple plots",
    "text": "4 Set up for multiple plots\nWe now have six combinations of the weather events rainy and breezy to plot:\n\nbreezy days (plotted in Figure 3)\nrainy days\nrainy AND breezy days\nrainy OR breezy days\nrainy AND NOT breezy days\nbreezy AND NOT rainy days\n\n\n4.1  Create plot data\nWe have already created the plot data for breezy days (#1).  We are now going to create the plot data for combinations #2 through #6.  We are not rendering the plots yet (i.e., we are not using the plot() function) – we are just creating the data for the plots.\n \nThe data for each plot will be a subset of weatherData given by variables that indexed the combined weather conditions in Figure 4:\n#### Part 4: Creating plots for all rainy day/breezy day combinations\nplotB = ggplot(data=weatherData«[rainyDays,]») +\n        geom_point(mapping=aes(x=avgTemp, y=relHum)) +\n        theme_classic() +\n        labs(title = \"Humidity vs. Temperature (rainy days)\",\n             subtitle = \"Lansing, Michigan: 2016\",\n             x = \"Degrees (Fahrenheit)\",\n             y = \"Relative Humidity\");\n\nplotC = ggplot(data=weatherData«[rainyAndBreezy,]») +\n        geom_point(mapping=aes(x=avgTemp, y=relHum)) +\n        theme_classic() +\n        labs(title = \"Hum vs. Temp (Rainy AND Breezy)\",\n             subtitle = \"Lansing, Michigan: 2016\",\n             x = \"Degrees (Fahrenheit)\",\n             y = \"Relative Humidity\");\n\nplotD = ggplot(data=weatherData«[rainyOrBreezy,]») +\n        geom_point(mapping=aes(x=avgTemp, y=relHum)) +\n        theme_classic() +\n        labs(title = \"Hum vs. Temp (Rainy or Breezy)\",\n             subtitle = \"Lansing, Michigan: 2016\",\n             x = \"Degrees (Fahrenheit)\",\n             y = \"Relative Humidity\");\n\nplotE = ggplot(data=weatherData«[rainyNotBreezy,]») +\n        geom_point(mapping=aes(x=avgTemp, y=relHum)) +\n        theme_classic() +\n        labs(title = \"Hum vs. Temp (Rainy and NOT Breezy)\",\n             subtitle = \"Lansing, Michigan: 2016\",\n             x = \"Degrees (Fahrenheit)\",\n             y = \"Relative Humidity\");\n\nplotF = ggplot(data=weatherData«[breezyNotRainy,]») +\n        geom_point(mapping=aes(x=avgTemp, y=relHum)) +\n        theme_classic() +\n        labs(title = \"Hum vs. Temp (Breezy and NOT Rainy)\",\n             subtitle = \"Lansing, Michigan: 2016\",\n             x = \"Degrees (Fahrenheit)\",\n             y = \"Relative Humidity\");\n\n\n\n\n\n\nFigure 5: Creating the plot data for each event combination",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "12: Multipaneling"
    ]
  },
  {
    "objectID": "lessons/12-Multipaneling.html#multiple-plots-on-one-canvas",
    "href": "lessons/12-Multipaneling.html#multiple-plots-on-one-canvas",
    "title": "12: Multipaneling",
    "section": "5 Multiple plots on one canvas",
    "text": "5 Multiple plots on one canvas\nWe have not created any plots yet, we have created the data for six different plots.  Up until now, we have used plot() to put one plot on a canvas or we added facets to place multiple plots on one axis. Now, we are going to create a canvas with multiple plots using arrangeGrob() in the gridExtra library.\n \nThere is documentation for arrangeGrob() but it is not very intuitive – however, you should know that grob stands for graphical objects, and plots are considered graphical objects.\nAlso, notice that the first argument for arrangeGrob is three dots ( … ):\narrangeGrob(«...», grobs = list(...), layout_matrix, vp = NULL,\n  name = \"arrange\", as.table = TRUE, respect = FALSE, clip = \"off\",\n  nrow = NULL, ncol = NULL, widths = NULL, heights = NULL, top = NULL,\n  bottom = NULL, left = NULL, right = NULL, padding = unit(0.5, \"line\"))\n( … ) means means that arrangePlot can take any number of plot variables – in our first example, we will be using six plot variables.\n \nWe are going to arrange the six plots created above (Figure 5) on a canvas using three different methods:\n\nby rows\nby columns\ncustomized using a matrix\n\n\n5.1 Plots in rows\nThe plots that will be added to the canvas must go first in arrangeGrob().  You can put as many plots in as you want separated by commas.  After you put in all the plot names, you set arguments (e.g., number of rows or columns) for the canvas.\n \nFor this canvas, we set the number of rows argument, or nrow to 3.  This means arrangeGrob() will place the plots listed into 3 rows (using as many columns as necessary).  Since there are six plots, each of the 3 rows will have 2 plots.\n#### Part 5: Arranging plots on one canvas by rows\n  multi1=arrangeGrob(plotA, plotB, plotC, plotD, plotE, plotF,\n                     nrow=3);\n  plot(multi1);\nNote: like ggplot(), arrangeGrob() creates plot data.  In the above case the plot data is saved to multi1 and then plot(multi1) renders the data in the RStudio Viewer.\n\n\n\n\n\n\nFigure 6: Arranging plots by rows in a canvas\n\n\n\n \nExtension: Adding labels to the grid area\n\n\n5.2 Plots in columns\nArranging plots by column works almost the same way as arranging by rows except we use the argument ncol.\n \nFor this canvas we are going to put the plots in the reverse order (plotF, plotE…) and skip the last plot (plotA) – so there are only five plots.  Since we set ncol to 3 and there are 5 plots, arrangeGrob() creates two rows but leaves an empty space at the end of the last row.\n#### Part 6: Arranging plots on canvas by columns\n  multi2=arrangeGrob(plotF, plotE, plotD, plotB, plotA,\n                     ncol=3);\n  plot(multi2);\n\n\n\n\n\n\nFigure 7: Arranging plots by columns in a canvas\n\n\n\n\n\n5.3 Customized canvas\nThe argument in arrangeGrob() that is probably most used in layout_matrix because it allows a lot more flexibility in the plot layout.\n \nlayout_matrix is set to a 2D matrix where you can customize the placement of the plots.  The rows and columns of the matrix (with their corresponding plot numbers) match the canvas layout of the plots.\n \nIn the following example:\n\nAll six plots are used (plotA through plotF)\nThe first row on the canvas will have the 4th, 5th, and 6th plots (plotD, plotE, and plotF)\nThe second row on the canvas will have the 3rd, 2nd, and 1st plots (plotC, plotB, and plotA)\n\n#### Part 7: Customize arrangements using matrix\n  multi3=arrangeGrob(plotA, plotB, plotC, plotD, plotE, plotF,\n                     layout_matrix = rbind(c(4,5,6),   # plotD, plotE, plotF\n                                           c(3,2,1))); # plotC, plotB, plotA\n  plot(multi3);\nNote: The numbers in the matrix represents the order the plots are listed.\n\n\n\n\n\n\nFigure 8: The six plots using the matrix layout\n\n\n\n\n\n5.4 Empty spaces within the canvas\nWe can use NA to represent an empty space (i.e., no plot).\n \nThe code:\nlayout_matrix = rbind(c(NA,1,2),     # row 1: nothing, 1st plot, 2nd plot\n                      c(3,NA,NA)));  # row 2: 3rd plot, nothing, nothing\nTells arrangeGrob() to create a canvas that has 2 rows and 3 columns. \n\nRow 1 has nothing in the first column, the 1st plot in the second column, and the 2nd plot in the third column\nRow 2 has the 3rd plot in the first column and nothing in the second or third column\n\n \nIn the following code, plotC is the 1st plot, plotD is the 2nd plot, and plotE is the 3rd plot:\n#### Part 8: Add empty spaces to customized arrangement\n  multi4=arrangeGrob(plotC, plotD, plotE,\n                     layout_matrix = rbind(c(NA,1,2),   # none, plotC, plotD\n                                           c(3,NA,NA)));# plotE, none, none\n  plot(multi4);\n\n\n\n\n\n\nFigure 9: Using layout_matrix to customize the canvas\n\n\n\n\n\n5.5 Sizing plots\nWe can also use layout_matrix to resize plots by extending them across rows and columns.\nThe following code makes the:\n\n1st plot 2 columns by 2 rows,\n2nd plot 1 column by 1 row\n3rd plot 2 columns by 1 row\n4th plot 1 column by 2 rows\n\nlayout_matrix = rbind(c(1,1,2),\n                      c(1,1,NA),\n                      c(4,3,3),\n                      c(4,NA,NA)));\nLet’s put the 4x3 matrix in arrangeGrob():\n#### Part 9: Extending plots across rows and columns\n  multi5=arrangeGrob(plotA, plotB, plotC, plotD,\n                     layout_matrix = rbind(c(1,1,2),\n                                           c(1,1,NA),\n                                           c(4,3,3),\n                                           c(4,NA,NA)));\n  plot(multi5);\n\n\n\n\n\n\nFigure 10: Extending plots across rows and down columns",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "12: Multipaneling"
    ]
  },
  {
    "objectID": "lessons/12-Multipaneling.html#errors-in-layout_matrix",
    "href": "lessons/12-Multipaneling.html#errors-in-layout_matrix",
    "title": "12: Multipaneling",
    "section": "6 Errors in layout_matrix",
    "text": "6 Errors in layout_matrix\narrangeGrob() is very sensitiveand often produces unintuitive errors.  In this section, we will look at some of the issues and the errors associated with the issues. \n\n6.1 Issue 1: Plots listed must be used in matrix\nAll plots listed in arrangeGrob() must be used in the matrix\n \nIssue: plotB is listed but not used in the matrix:\n#### Issue 1: Plots listed must be used in matrix\n####          plotB (#2) is not used in the layout_matrix\n  error1 = arrangeGrob(plotA, «plotB», plotC, plotD, plotE,\n                      layout_matrix = rbind(c(1,1,5),\n                                            c(1,1,NA),\n                                            c(4,3,3),\n                                            c(4,NA,NA)));\n  plot(error1);  # Error in t:b : NA/NaN argument\nExecuting this grid without using plotB (#2) produces the unintuitive error:\nError in t:b : NA/NaN argument\n\n\n6.2 Invalid index numbers in matrix\nIssue: index 5 is used in the matrix but there is no 5th plot\n#### Issue 2: Invalid index error (there is no 5th plot)\n  issue2 = arrangeGrob(plotA, plotB, plotC, plotD,\n                     layout_matrix = rbind(c(1,1,5),\n                                           c(1,1,NA),\n                                           c(4,3,2),\n                                           c(4,NA,NA)));\n  plot(issue2);\nWhen executing this grid, the number will be ignored by layout_matrix() and nothing will be plotted in that area.  No warning or error is given.\n\n\n\n\n\n\nFigure 11: Nothing is plotted in the area of the grid with an invalid plot index (5).\n\n\n\n\n\n6.3 Extending plots to fill a rectangle\narrangeGrob() makes two big assumptions:\n\nAll plots take up a rectangular space on the grid\nAll plots are represented only once on the canvas\n\n \nIf you arrange the index numbers in the matrix in a non-rectangular fashion, arrangeGrob() will “fill” in the rest of the rectangle.\nIn the following code, arrangeGrob() will extend plotA across the 2 rows and 2 columns\n#### Issue 3: The grid will extend discontinuous plots to fill a rectangle\n####          plotA will be extended to a rectangle that is 2x2\n  issue3 = arrangeGrob(plotA, plotB,\n                       layout_matrix = rbind(c(«1»,«NA»,2),\n                                             c(«NA»,«1»,NA)));\n  plot(issue3);\n\n\n\n\n\n\nFigure 12: Plots are extended to fill the rectangular area they represent in the grid.\n\n\n\n\n\n6.4 Overlapping plots\nIn this example, arrangeGrob() assumes that plotA is 2 rows x 3 columns (it takes up the whole plot area).  This means that plotA and plotB both use the spot on the 1st row, 3rd column.\n \nIn this case, plotB overlaps plotA in the one grid space because plotB comes after plotA in arrangeGrob().\n#### Issue 4: Overlapping plots -- priority goes to the later plot\n####          In this case, plotB overlaps plotA\n  issue4 = arrangeGrob(plotA, plotB,\n                       layout_matrix = rbind(c(1,NA,«2»),\n                                             c(NA,NA,1)));\n  plot(issue4);\n\n\n\n\n\n\nFigure 13: Plots overlapping in layout_matrix(), the later plot get priority.\n\n\n\n\n\n6.5 Hidden plots due to overlapping\narrangeGrob() puts plots with higher indexes on top.  So, if we reverse the previous canvas and stretch plotB across the whole canvas then plotB will still overlap plotA.  This effectively hides plotA.\n#### Issue 5: Hidden plots due to overlapping\n####          In this case, plotB completely covers up plotA\n  issue5 = arrangeGrob(plotA, plotB,\n                       layout_matrix = rbind(c(2,NA,1),\n                                             c(NA,NA,2)));\n  plot(issue5);\n\n\n\n\n\n\nFigure 14: A plot is hidden because it is overlapped by another plot.\n\n\n\n\n\n6.6 Time elapsed warning\nWhen the canvas area is complicated, the plot will sometimes not be fully drawn.  This is an inconsistent error that happens in RStudio on slower computers.\n \nTheoretically, this should show plotD across the whole canvas, covering up the other plots. \n#### Part 10: Error in plot placement\n  issue6 = arrangeGrob(plotA, plotB, plotC, plotD,\n                       layout_matrix = rbind(c(1,1,4),\n                                             c(1,1,NA),\n                                             c(4,3,2),\n                                             c(4,NA,NA)));\n  plot(issue6);\nThis code will sometimes give an elapsed time warning like:\nIn unique.default(lengths(x)) : reached elapsed time limit\n \nNote: this is a warning I would get years ago about 20% of the time on this plot.  Now I am not getting it.  I do not know if it is because of improvements to R/RStudio/GGPlot/gridExtra, my computer, or some combination.\n \nIf the full canvas does not get drawn when you execute the script, you can press the Zoom button to open the canvas in a new window.\n\n\n\n\n\n\nFigure 15: Using the Zoom button to open a plot in a new window.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "12: Multipaneling"
    ]
  },
  {
    "objectID": "lessons/12-Multipaneling.html#application",
    "href": "lessons/12-Multipaneling.html#application",
    "title": "12: Multipaneling",
    "section": "7 Application",
    "text": "7 Application\nFind how different weather conditions in the weatherType column correlate with tempDept.\nNote: tempDept is how far the temperature for the day was from the historic average temperature for that day.\n \n1) Create a histogram of tempDept restricted to days that meet a condition in the weatherType column:\n\nTo restrict the data, you can subset with the indices that meet the condition (e.g., data=weatherData[daysWithRain,])\n\n \n2) Repeat step 2 for two more conditions in the weatherType column (so, three histograms in all)\n \n3) Create a histogram of tempDept restricted to days where two conditions occur in the weatherType column (e.g., rainy AND breezy).\n \n4) Create a histogram of tempDept restricted to days where one of two conditions occur in the weatherType column (e.g., rainy OR breezy).\n \n5) For all histograms, place a vertical line at the average tempDept (of the restricted data) and label the line with the average value\n\ngeom_vline is an option here\n\n \n6) Using arrangeGrob(), place the 5 histograms you created in the previous steps on one canvas\n \n7) Using arrangeGrob(), pick three histograms from steps 2-4 and place them on a canvas\n\nResize at least 2 of the histogram so they take up more than 1 cell\n\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n7.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?\n\n\n\n7.2 Turn in on GitHub\nSave the script as app12.r in your scripts folder, Push the changes to your GitHub repository, create an Issue in GitHub that says you have finished the application and assign the issue to belinskyc.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "12: Multipaneling"
    ]
  },
  {
    "objectID": "lessons/12-Multipaneling.html#extension-adding-labels-to-the-grid-area",
    "href": "lessons/12-Multipaneling.html#extension-adding-labels-to-the-grid-area",
    "title": "12: Multipaneling",
    "section": "8 Extension: Adding labels to the grid area",
    "text": "8 Extension: Adding labels to the grid area\nYou can labels to every side of the grid using the arguments right, left, top, and bottom in arrangeGrid().  However, the labels will all be in standard font, black, and 12px.  Styling the labels is tricky and uses textGrob and gpar within the grid package.\n \nThe plot below has unstyled labels for the top and right of the grid and styled labels for the bottom and left:\n  #### Extension: Adding labels to a grob:\n  multi1Lab=arrangeGrob(plotA, plotB, plotC, plotD, plotE, plotF,\n                     nrow=3,\n                     «top»=\"top label\",    \n                     «bottom»=grid::textGrob(\"bottom label\", \n                                           gp=grid::gpar(col=\"blue\", fontsize=40)),\n                     «right»=\"right label\",\n                     «left»=grid::textGrob(\"left label\", \n                                         gp=grid::gpar(col=\"red\", fontsize=20)));\n  plot(multi1Lab);\nStyling grid labels can leads to inconsistent results – in this case the left label was turned 90 degrees.\n\n\n\n\n\n\nFigure 16: Adding labels to each side of the grid",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "12: Multipaneling"
    ]
  },
  {
    "objectID": "lessons/10-ReshapingAndForLoops2.html",
    "href": "lessons/10-ReshapingAndForLoops2.html",
    "title": "10: Reshaping and For Loops 2",
    "section": "",
    "text": "Test #3 in the application\nEnd: color first day in each month –??\nGrep example ??",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "10: Reshaping and For Loops 2"
    ]
  },
  {
    "objectID": "lessons/10-ReshapingAndForLoops2.html#purpose",
    "href": "lessons/10-ReshapingAndForLoops2.html#purpose",
    "title": "10: Reshaping and For Loops 2",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nReshape and use for loops to plot multiple columns by name\nPlot text values\nplot a subset of values using seq() and which().\n\n\n1.1 Code for the lesson\nThe script for the lesson is here\n\nSave the R file, called lesson10-ReshapingAndForLoops2.R to the scripts folder inside your RStudio Project\n\nThe data for this lesson (Lansing weather in 2016) is here \n\nSave the CSV file, called Lansing2016Data.csv to the data folder inside your RStudio Project. \n\n\n\n1.2 Data\nFor this lesson we will go back to using the 2016 Lansing weather data frame:\n  weatherData = read.csv(file=\"data/Lansing2016NOAA.csv\", \n                         stringsAsFactors = FALSE);",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "10: Reshaping and For Loops 2"
    ]
  },
  {
    "objectID": "lessons/10-ReshapingAndForLoops2.html#specifying-column-using-name",
    "href": "lessons/10-ReshapingAndForLoops2.html#specifying-column-using-name",
    "title": "10: Reshaping and For Loops 2",
    "section": "2 Specifying column using name",
    "text": "2 Specifying column using name\nWe are going to go through multiple ways to plot multiple columns in a data frame – in this case, three temperature columns: minTemp, maxTemp, and avgTemp.\nFirst, we will code the plots for the three columns from weatherData separately, mapping:\n\nx to the dateYr column \n\n-   [note: we need to explicitly tell GGPlot that **dateYr** is a **Date object**]{.note}\n\ny to the three temperature columns\ncolor to the name we give the mapping (the name the goes in the legend) \n\n  plot1 = ggplot(data=weatherData) +\n    geom_line(mapping=aes(x=as.Date(dateYr), \n                          y=minTemp,\n                          color = \"Min\")) +  \n    geom_line(mapping=aes(x=as.Date(dateYr), \n                          y=maxTemp,\n                          color = \"Max\")) +\n    geom_line(mapping=aes(x=as.Date(dateYr), \n                          y=avgTemp,\n                          color=\"Avg\")) +\n    labs(color = \"Temperatures\");  # name of color mapping in the legend\n  plot(plot1);\n\n\n\n\n\n\nFigure 1: Plotting the three temperature columns in weatherData\n\n\n\nLater in this lesson we will deal with:\n\nreordering the legend (right now it is in alphabetical order)\nchanging the line color (right now GGPlot is using the default color options)",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "10: Reshaping and For Loops 2"
    ]
  },
  {
    "objectID": "lessons/10-ReshapingAndForLoops2.html#plotting-a-reshaped-data-frame",
    "href": "lessons/10-ReshapingAndForLoops2.html#plotting-a-reshaped-data-frame",
    "title": "10: Reshaping and For Loops 2",
    "section": "3 Plotting a reshaped data frame",
    "text": "3 Plotting a reshaped data frame\nSince the three line plots have similar code, it would be nice to reduce the code to one line plot that handles all three lines.\n \nThe most common way to do this is to create a reshaped data frame.  Again, this is not the method I prefer but it is the most commonly used method.\n \nIt is easier to reshape a data frame that has only the columns you need – and we only need four columns from weatherData in Figure 2  dateYr, minTemp, maxTemp, and avgTemp.  We will first create a data frame that only has these four columns:\n  partialWD = weatherData[, c(\"dateYr\", \"minTemp\",\"maxTemp\", \"avgTemp\")];\n\n\n\n\n\n\nFigure 2: The partial data frame with 366 rows and 4 column (1 date and 3 temperature)\n\n\n\n\n3.1 Reshaping the partial data frame\nAnd then reshape the partial data frame using reshape():\n  WD_Melt = reshape(partialWD ,         # data frame to manipulate \n              direction=\"long\",         # how to manipulate (long form)  \n              varying=c(\"minTemp\", \"maxTemp\", \"avgTemp\"), # columns to \"melt\"\n              v.name=\"temperatures\",    # name of melted column\n              times=c(\"minTemp\", \"maxTemp\", \"avgTemp\"),   # names for column\n              timevar = \"tempType\",     # name of new column with all temp names\n              ids = \"dateYr\",           # group by date\n              idvar = \"dateYr\");        # give the name dateYr to the new column\nThere are eight argument used in reshape(), let’s take these arguments two at a time:\nWe are reshaping the data frame partialWD in the long (“melted”) direction:\ndata = partialWD\ndirection=\"long\"\nWe are combining the three temperature columns, which will have 366*3 = 1098 values, and the name of the new combined column is temperatures:\nvarying=c(\"minTemp\", \"maxTemp\", \"avgTemp\")\nv.name=\"temperatures\"\nWe are creating a full column from the column names (“minTemp”, “maxTemp”, “avgTemp”), essentially exploding out the 3 column names to a column with 1098 values named tempType:\ntimes=c(\"minTemp\", \"maxTemp\", \"avgTemp\")\ntimevar=\"tempType\"\nWe are also exploding out the original 366 dateYr values to a new columns with 1098 values also named dateYr:\nid = \"dateYr\"\nidvar = \"dateYr\"\nThe new reshaped data frame with dateYr repeated 3 times and the temperature column names repeated 366 times:\n\n\n\n\n\n\nFigure 3: The reshaped data frame has 1098 rows (366 * 3)\n\n\n\n\n\n3.2 Plotting the reshaped data  frame\nWe can use one geom_line component to plot the reshaped data frame. \nThe geom_line component maps:\n\nx to the temperatures column\ny to the tempType column \ncolor to the dateYr column\n\n \nThe color mapping is how we create three separate line plots – each put into the legend and mapped to a different color.\n\n\n\n\n\n\nFigure 4: The plot from the reshaped data frame\n\n\n\n\n\n3.3 Using for loops to plot the columns\nAgain, I find reshaping a data frame to be an inelegant solution because it creates a new data frame that is more complex than the original.\n \nI believe it is best to maintain the original data frame when plotting.\n \nWe can plot the three columns using a for loop.  Unlike last lesson where we cycled through the the column index, this time we will cycle through the column names.  \nTo do this, we first need a vector of names to cycle through:\n  columnNames = c(\"minTemp\", \"maxTemp\", \"avgTemp\");\nThere are three values in the vector (and, hence, 3 columns to cycle through) so our for loop cycle from 1 to 3.\n  for (i in 1:3)\nAnd we are going to map:\n\nx to the dateYr column in Date form (this is true for all three cycles/plots)\ny to the column name in columnNames indexed by i\ncolor to the name of the column given by columnNames\n\n      geom_line(mapping=aes(x=as.Date(weatherData$dateYr), \n                            y=weatherData[,columnNames[!!(i)]],\n                            color=columnNames[!!(i)]));\n  plot3 = ggplot();\n  for (i in 1:3)\n  {\n    plot3 = plot3 + \n      geom_line(mapping=aes_(x=as.Date(weatherData$dateYr), \n                             y=weatherData[,columnNames[!!(i)]],\n                             color=columnNames[!!(i)]));\n  }\n  plot(plot3);\nplot3 looks exactly like the plot created using the reshaped data frame, plot2 (Figure 3)\n\n\n\n\n\n\nFigure 5: Plot using for loops",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "10: Reshaping and For Loops 2"
    ]
  },
  {
    "objectID": "lessons/10-ReshapingAndForLoops2.html#cleaning-up-the-plot",
    "href": "lessons/10-ReshapingAndForLoops2.html#cleaning-up-the-plot",
    "title": "10: Reshaping and For Loops 2",
    "section": "4 Cleaning up the plot",
    "text": "4 Cleaning up the plot\nWe are going to make a copy of the last plot and append these changes:\n\nreorder the legend by temperature type (instead of alphabetical order) \nchange the line colors to match the temperature type (instead of using GGPlot defaults)\nadd a theme and labels\n\n \nscale_color_manual can reorder the legend and change the line colors using these arguments:\n\nbreaks: how you want the breaks in the data to be ordered\nvalues: the color values you want to match the newly ordered breaks\n\n   plot5 = plot3 +     # make copy of last plot and add...\n    scale_color_manual(breaks=c(\"minTemp\", \"avgTemp\", \"maxTemp\"),\n                       values=c(\"blue\",    \"green\",   \"red\")) +\n    theme_bw() +\n    labs(x = \"Date\",\n         y = \"Temperatures\",\n         color=\"Temp Types\"); \n  plot(plot5);\n\n\n\n\n\n\nFigure 6: Changing the legend and adding theme and labels to plots",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "10: Reshaping and For Loops 2"
    ]
  },
  {
    "objectID": "lessons/10-ReshapingAndForLoops2.html#conditionally-put-values-in-a-plot",
    "href": "lessons/10-ReshapingAndForLoops2.html#conditionally-put-values-in-a-plot",
    "title": "10: Reshaping and For Loops 2",
    "section": "5 Conditionally put values in a plot",
    "text": "5 Conditionally put values in a plot\nFor this section we will use seq() and which() to selectively add values to a scatterplot (in this case, add text labels using geom_text).\n \nWe will start with a humidity vs temperature scatterplot:\n  plot6 = ggplot() +   # data frame not declared here\n    geom_point(mapping=aes(x=weatherData$avgTemp, \n                           y=weatherData$relHum),\n               color=\"gray\") +    # color is not a mapping here -- only a style\n    theme_bw() +\n    labs(x = \"Temperature\",\n         y = \"Humidity\",\n         title = \"Humidity vs Temperature\",\n         subtitle=\"Lansing, MI -- 2016\");\n  plot(plot6);\nWe have moved the data frame to the mapping instead of declaring it in ggplot().  For this plot, it would work either way but for the next 2 plots the data frame has to be in the mapping.\n\n\n\n\n\n\nFigure 7: Humidity vs temperature plot\n\n\n\n\n5.1 Geom_text to plot labels\nWe are going to add dates to the points on the scatterplot.  The date labels will be plotted from the dateYr column using the geom_text component.\nThere are three mappings you need to use in geom_text:\n\nx and y: to get the position\nlabel: the text to add to the position given by x and y (the temperature and humidity)\n\n  plot7 = plot6 +\n    geom_text(mapping=aes(«x»=weatherData$avgTemp,   # at x = ...\n                          «y»=weatherData$relHum,    # and y = ...\n                          «label»=weatherData$date), # add the label ...\n              color=\"red\");                        # in the color red\n  plot(plot7);\nBut plotting all 366 date values is a bit chaotic:\n\n\n\n\n\n\nFigure 8: Using geom_text to add the date for every point\n\n\n\n\n\n5.2 Selectively add labels using seq()\nAdding every label makes a big mess of the plot.  Instead of plotting all value, we will selectively add labels, in this case, put every fifteenth date on the plot.\n \nWe can do that by creating a sequence that has every fifteenth value indexed:\n  every15 = seq(from=1, to=366, by=15);\nevery15 has 25 values representing the date indexes that will be plotted  – we can see them in the Console:\n&gt; every15\n [1]   1  16  31  46  61  76  91 106 121 136 151 166 181 196 211 226 241 256 271\n[20] 286 301 316 331 346 361\nAnd using every15 to subset the columns mapped in geom_text:\n  plot8 = plot6 +\n    geom_text(mapping=aes(x=weatherData$avgTemp[every15],   # at x = ...\n                          y=weatherData$relHum[every15],    # and y = ...\n                          label=weatherData$date[every15]), # add the label ...\n              color=\"red\");                                 # in the color red\n  plot(plot8);\n\n\n\n\n\n\nFigure 9: Using geom_text to plot every 15th date on the scatterplot\n\n\n\n\n\n5.3 Conditionally add labels using which\nWe can also conditionally add labels to the scatterplot. The condition will be to add dates for the extreme values in the plot.\n \nThe extreme values are defined as either:\n\nhumidity above 90 or below 40\ntemperature above 80 or below 10. \n\n \nThere are four conditions here and if any of the four conditions are TRUE, then the date should be added.  This means the four conditions are ORed ( | ) together.  Let’s create an index vector for these four conditions using which():\nThere are 10 index values that meet one of the four condition given in extremePoints:\n  extremePoints = which(weatherData$relHum &gt; 90  | weatherData$relHum &lt; 40 |\n                        weatherData$avgTemp &gt; 80 | weatherData$avgTemp &lt; 10);\nAnd we will use extremePoints to subset the columns in geom_text:\n  plot9 = plot6 +\n    geom_text(mapping=aes(x=weatherData$avgTemp[extremePoints],  \n                          y=weatherData$relHum[extremePoints],\n                          label=weatherData$date[extremePoints]),\n              color = \"red\") +\n    theme_bw();\n  plot(plot9);\nAnd the ten dates are added to the points on the edge of the plot:\n\n\n\n\n\n\nFigure 10: Using which to subset the data",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "10: Reshaping and For Loops 2"
    ]
  },
  {
    "objectID": "lessons/10-ReshapingAndForLoops2.html#application",
    "href": "lessons/10-ReshapingAndForLoops2.html#application",
    "title": "10: Reshaping and For Loops 2",
    "section": "6 Application",
    "text": "6 Application\nUse data from Lansing2016NOAA.csv.\n \n1) In comments at the top of your script file answer:\n\nWhat happens if you allow for lazy evaluation in plot3 (Figure 5)?  Be specific about what GGPlot plots.\n\n \n2) Using both reshaping and for loops, plot the four humidity columns in weatherData against average temp with wind speed as color mapping\n\nUse column names\nAdd titles and labels – right justify the title\nCorrect the legend so that wind speeds are in increasing order and colors goes from lighter to darker blues\nChange the size of the lines and the linetype\n\n \n3) Create a text plot of Precipitation (precip2) vs Humidity (relHum) that is selectively labelled with windspeed\n\nMap the color of the points to windSpeed\n\nUse a color gradient that goes from green to blue to purple\n\nLabel the points that have precipitation over 0.1in and humidity greater than 80%\n\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n6.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?\n\n\n\n6.2 Turn in on GitHub\nSave the script as app10.r in your scripts folder, Push the changes to your GitHub repository, create an Issue in GitHub that says you have finished the application and assign the issue to belinskyc.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "10: Reshaping and For Loops 2"
    ]
  },
  {
    "objectID": "lessons/08-Boxplots.html",
    "href": "lessons/08-Boxplots.html",
    "title": "08: Boxplots",
    "section": "",
    "text": "mention what happened when you set only one axis on a boxplot",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "08: Boxplots"
    ]
  },
  {
    "objectID": "lessons/08-Boxplots.html#purpose",
    "href": "lessons/08-Boxplots.html#purpose",
    "title": "08: Boxplots",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nCreating boxplots\nFaceting and mapping data on a boxplot\nChanging outlier properties\n\n\n1.1 Code for the lesson\nScript for this lesson\n\nSave the R file, called lesson08-Boxplots.R to the scripts folder inside your RStudio Project\n\nThe data for this lesson (Lansing weather in 2016) is here (same as previous lessons)\n\nSave the CSV file, called Lansing2016Data.csv to the data folder inside your RStudio Project.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "08: Boxplots"
    ]
  },
  {
    "objectID": "lessons/08-Boxplots.html#boxplots",
    "href": "lessons/08-Boxplots.html#boxplots",
    "title": "08: Boxplots",
    "section": "2 Boxplots",
    "text": "2 Boxplots\nWe are going to create a boxplot of Change in Temperature vs Wind Direction using geom_boxplot.  The code for a boxplot is much like a scatterplot – you need to map the x and y axes.  The difference is that the x-axis is mapped to a discrete variable (in this case, wind direction, which has only four possible values):\n  plot1 = ggplot(data=weatherData) +\n    «geom_boxplot(mapping=aes(x=windDir, y=changeMaxTemp))» +\n    theme_bw() +\n    labs(title = \"Change in Temperature vs. Wind Direction\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Wind Direction\",\n         y = \"Change in Temperature (\\u00B0F)\");\n  plot(plot1);\ngeom_boxplot will, by default, categorize (or factor) the x-mapping – in this case, windDir,  in alphabetical order:\n\n\n\n\n\n\nFigure 1: A boxplot of Change in Temperature vs. the four cardinal Wind Directions\n\n\n\n\n2.1 Ordering the boxes\nWe can customize the order of the directions using factor():\n windDirOrdered = factor(weatherData$windDir,\n                         levels=c(\"North\", \"East\", \"South\", \"West\"));\nAnd then use the customized factor, windDirOrdered, as the x-axis mapping:\n  plot2 = ggplot(data=weatherData) +\n    geom_boxplot(mapping=aes(x=«windDirOrdered», y=changeMaxTemp)) +\n    theme_bw() +\n    labs(title = \"Change in Temperature vs. Wind Direction\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Wind Direction\",\n         y = \"Change in Temperature (\\u00B0F)\");\n  plot(plot2);\nAnd the order of the four boxes has changed:\n\n\n\n\n\n\nFigure 2: Boxes reordered\n\n\n\n\n\n2.2 Warning message and NA values\nYou get this warning when you plot the boxplot above:\nRemoved 1 rows containing non-finite values\n \nThe is because there is one NA value in the data in changeMaxTemp.  changeMaxTemp is the difference of the maximum temperature between two days.  The first value in changeMaxTemp is NA because there is no value from the day before to subtract.\n \nThis is not a problem in this plot, but there are times where you need to deal with NA values.  In the next boxplot, I will add the argument na.rm to remove the NA value, removing the warning message.  This can be done with almost any plotting component.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "08: Boxplots"
    ]
  },
  {
    "objectID": "lessons/08-Boxplots.html#changing-the-boxplot-axis",
    "href": "lessons/08-Boxplots.html#changing-the-boxplot-axis",
    "title": "08: Boxplots",
    "section": "3 Changing the boxplot axis",
    "text": "3 Changing the boxplot axis\nWhen you create a boxplot, there is always one discrete variable (e.g., windDir) and one continuous variable (e.g., changeMaxTemp).  If you reverse the axis on the variables, then geom_boxplot will change the axis of the boxes:\n  plot3 = ggplot(data=weatherData) +\n    geom_boxplot(mapping=aes(«x=changeMaxTemp, y=windDir»)) +\n    theme_bw() +\n    labs(title = \"Change in Temperature vs. Wind Direction\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Wind Direction\",\n         y = \"Change in Temperature (\\u00B0F)\");\n  plot(plot3);\nNow the boxes are horizontal instead of vertical\n\n\n\n\n\n\nFigure 3: Boxplots in the horizontal direction",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "08: Boxplots"
    ]
  },
  {
    "objectID": "lessons/08-Boxplots.html#overlaying-the-points-on-the-boxes",
    "href": "lessons/08-Boxplots.html#overlaying-the-points-on-the-boxes",
    "title": "08: Boxplots",
    "section": "4 Overlaying the points on the boxes",
    "text": "4 Overlaying the points on the boxes\nFor the next example, we will be creating some random effects.  But, I want the “random” effect to be the same every time someone execute the code.  To do that I will first set the seed value:\n  set.seed(seed=12);\nNote: it does not matter what seed value is used… each seed value will just present a different set of “random” values.\n \nWe are going to overlay the plot in Figure 3 with all the actual points.  If we did this as a scatterplot (geom_point), then all of the points would fall on one of the four horizontal lines (in the application, I will ask you to explain why this is true).  To better see all of the point, we will add a random vertical component to the values.  This can be done using geom_jitter.\n \nWe set the range of randomness using height and width.  0 means there is no random component.  0.3 means there is a random values between -0.3 and 0.3 added to the value:\n  plot4 = ggplot(data=weatherData) +\n    geom_boxplot(mapping=aes(y=windDir, x=changeMaxTemp)) +\n    «geom_jitter»(mapping=aes(y=windDir, x=changeMaxTemp), \n                «height=0.3»,   # range of random vertical component (-0.3 -&gt; 0.3)\n                «width = 0»,    # no random horizontal component\n                alpha=0.2,    # make points semi-transparent\n                color=\"blue\") + \n    theme_bw() +\n    labs(title = \"Change in Temperature vs. Wind Direction\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Wind Direction\",\n         y = \"Change in Temperature (\\u00B0F)\");\n  plot(plot4);\nThe alpha argument is added to make the points semi-transparent so we can see overlay points.\n\n\n\n\n\n\nFigure 4: Boxplots with the actual points overlayed with a random vertical component",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "08: Boxplots"
    ]
  },
  {
    "objectID": "lessons/08-Boxplots.html#mappings-with-a-boxplot",
    "href": "lessons/08-Boxplots.html#mappings-with-a-boxplot",
    "title": "08: Boxplots",
    "section": "5 Mappings with a boxplot",
    "text": "5 Mappings with a boxplot\nWe are going to use daily wind speed levels (given as Low, Medium, or High) as a fill (i.e., background color) mapping in our boxplot.  \n  plot5 = ggplot(data=weatherData) +\n    geom_boxplot(mapping=aes(x=windDirOrdered, y=changeMaxTemp, «fill=windSpeedLevel»),\n                 na.rm = TRUE) +  # gets rid of warning about non-finite values\n    theme_bw() +\n    labs(title = \"Change in Temperature vs. Wind Direction\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Wind Direction\",\n         y = \"Degrees (Fahrenheit)\",\n         fill = \"Wind Speed\");\n  plot(plot8);\nWe now have 12 boxes – 3 wind speeds for each of the 4 directions. The mapping maps the background color (fill) to the wind speeds.\n\n\n\n\n\n\nFigure 5: Boxplot with a fill mapping",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "08: Boxplots"
    ]
  },
  {
    "objectID": "lessons/08-Boxplots.html#faceting-with-a-boxplot",
    "href": "lessons/08-Boxplots.html#faceting-with-a-boxplot",
    "title": "08: Boxplots",
    "section": "6 Faceting with a boxplot",
    "text": "6 Faceting with a boxplot\nNext we will do something similar but using facets to “map” the wind speed levels.  We will facet by the columns – so we will get three sets of boxplots, one for each wind speed level.  And each set will have 4 boxes, one for each cardinal direction:\n  #### Part 6: Same boxplot faceted by wind speed instead of mapped ####\n  plot6 = ggplot(data=weatherData) +\n    geom_boxplot(mapping=aes(x=windDirOrdered, y=changeMaxTemp),\n                 na.rm = TRUE) + \n    theme_bw() +\n    «facet_grid( cols=vars(windSpeedLevel))» + \n    labs(title = \"Change in Temperature vs. Wind Direction\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Wind Direction\",\n         y = \"Degrees (Fahrenheit)\");\n  plot(plot6);\n\n\n\n\n\n\nFigure 6: Boxplot with a facet by column\n\n\n\n\n6.1 Alternative: Violin Plot\nA variation on the boxplot is to do a violin plot.  The only difference is that geom_boxplot get replaced with geom_violin:\n  #### Part 7: violin plot (make this earlier!) ####\n  plot7 = ggplot(data=weatherData) +\n    «geom_violin»(mapping=aes(x=windDirOrdered, y=changeMaxTemp),\n                na.rm = TRUE) +\n    theme_bw() +\n    facet_grid( cols=vars(windSpeedLevel)) +\n    labs(title = \"Change in Temperature vs. Wind Direction\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Wind Direction\",\n         y = \"Degrees (Fahrenheit)\");\n  plot(plot7);\n\n\n\n\n\n\nFigure 7: A violin plot with the same data and facets",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "08: Boxplots"
    ]
  },
  {
    "objectID": "lessons/08-Boxplots.html#colors-for-all-boxes",
    "href": "lessons/08-Boxplots.html#colors-for-all-boxes",
    "title": "08: Boxplots",
    "section": "7 Colors for all boxes",
    "text": "7 Colors for all boxes\nThe problem with using facets instead of fill to map wind speed level is that we lose the color.  If you want to bring color back, you could add a fill mapping to or you could set the colors manually.\n \nLet’s start with setting all the boxes manually to the same outline color (color=“brown”) and background color (fill = “grey70”):\n  #### Part 8: Manually setting colors (not mapped!) ####\n  plot11 = ggplot(data=weatherData) +\n    geom_boxplot(mapping=aes(x=windDirOrdered, y=changeMaxTemp),\n                 na.rm = TRUE,  \n                 «color = \"brown\"»,\n                 «fill = \"grey70\"») +\n    theme_bw() +\n    facet_grid( cols=vars(windSpeedLevel)) +  \n    labs(title = \"Change in Temperature vs. Wind Direction\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Wind Direction\",\n         y = \"Degrees (Fahrenheit)\",\n         fill=\"Wind Speed\");\n  plot(plot8);\n\n\n\n\n\n\nFigure 8: Changing unmapped properties of all the boxes\n\n\n\n\n7.1 Colors for each box\nIn Figure 8 there are 12 boxes, and we can manually set the color for each box using a vector with 12 colors values.\n \nWe want to highlight the first three boxes, because that is where the dramatic changes are happening so we will set the first 3 boxes to blue and the last 9 to brown.\n  boxColors = c(\"blue\", \"blue\", \"blue\", \"brown\",\n                \"brown\", \"brown\", \"brown\", \"brown\",\n                \"brown\", \"brown\", \"brown\", \"brown\");\nOr, we could shorten the code using the repeat, rep(),  function:\n  boxColors = c(rep(\"blue\", 3),     # 3 blue boxes followed by...\n                rep(\"brown\", 9));   # 9 brown boxes\nAnd then set the subcomponent color to the 12 value vector boxColors:\n  plot9 = ggplot(data=weatherData) +\n    geom_boxplot(mapping=aes(x=windDirOrdered, y=changeMaxTemp),\n                 na.rm = TRUE,  \n                 color = «boxColors»,\n                 fill = \"grey70\") +\n    theme_bw() +\n    facet_grid( cols=vars(windSpeedLevel)) +\n    labs(title = \"Change in Temperature vs. Wind Direction\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Wind Direction\",\n         y = \"Degrees (Fahrenheit)\");\n  plot(plot9);\nNote: the size of the vector must match the number of boxes or you will get an error.\n\n\n\n\n\n\nFigure 9: Customizing the color for each box in the boxplot\n\n\n\n \nNote: for reasons I do not know, you cannot use this method to change the properties of a geom_violin.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "08: Boxplots"
    ]
  },
  {
    "objectID": "lessons/08-Boxplots.html#outlier-properties",
    "href": "lessons/08-Boxplots.html#outlier-properties",
    "title": "08: Boxplots",
    "section": "8 Outlier properties",
    "text": "8 Outlier properties\nIf you look at the geom_boxplothelp page, there are many subcomponents that can be used to modify the outliers.  I will use two of them and change the outlier.color and outlier.shape:\n  #### Part 10: Messing with the outliers ####\n  plot10 = ggplot(data=weatherData) +\n    geom_boxplot(mapping=aes(x=windDirOrdered, y=changeMaxTemp),\n                 na.rm = TRUE,   # gets rid of warning about non-finite values\n                 color = boxColors,\n                 fill = \"grey50\",\n                 «outlier.color = rgb(red=0, green=0.3, blue=0)»,\n                 «outlier.shape = \"\\u053e\"») +\n    theme_bw() +\n    facet_grid( cols=vars(windSpeedLevel)) +\n    labs(title = \"Change in Temperature vs. Wind Direction\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Wind Direction\",\n         y = \"Degrees (Fahrenheit)\");\n  plot(plot10);\noutlier.shape is set to a Unicode value.  Unicode values allow you to access all possible characters (whereas your keyboard is quite limited).\n\\u053e  means get Unicode character 053e (this is a hexadecimal number)\n\n\n\n\n\n\nFigure 10: Boxplot with the outliers’ color and shape changed",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "08: Boxplots"
    ]
  },
  {
    "objectID": "lessons/08-Boxplots.html#changing-facet-labels",
    "href": "lessons/08-Boxplots.html#changing-facet-labels",
    "title": "08: Boxplots",
    "section": "9 Changing facet labels",
    "text": "9 Changing facet labels\nLastly, the labels on the facet are the values in the windSpeedLevel column: Low, Medium, and High. Many times, we want to change the labels on the graph to be more descriptive.\n \nAdding customized labels is a two-step process:\n\nCreate a vector with the customized labels\nUse this vector for the labeller subcomponent in the facet_grid() component\n\n\n9.1 Components of facet labeling\nWe need to create a vector that maps the wind speed values (Low, Medium, High) with the label we want for each value:\nwindLabels = c(Low = \"Light Winds\",\n               Medium = \"Medium Winds\",\n               High = \"Strong Winds\");\nand then use the argument labeller in the component facet_grid() to add these labels to the legend.\nlabeller=as_labeller(windLabels)\nNote: the function as_labeller() explicitly says the vector is a vector of labels\n\n\n9.2 Putting the code together\n### Part 11: Changing facet labels\n  «windLabels = c(Low = \"Light Winds\",»\n                 «Medium = \"Medium Winds\",»\n                 «High = \"Strong Winds\"»);\n\n  plot14 = ggplot(data=weatherData) +\n    geom_boxplot(mapping=aes(x=windDirOrdered, y=changeMaxTemp),\n                 na.rm = TRUE,   # gets rid of warning about non-finite values\n                 color = boxColors,\n                 fill = \"grey50\",\n                 outlier.color = rgb(red=0, green=0.3, blue=0),\n                 outlier.shape = \"\\u053e\") +\n    theme_bw() +\n    facet_grid( cols=vars(windSpeedLevel),\n                «labeller=as_labeller(windLabels)») +\n    labs(title = \"Change in Temperature vs. Wind Direction\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Wind Direction\",\n         y = \"Degrees (Fahrenheit)\");\n  plot(plot11);\n\n\n\n\n\n\nFigure 11: Changing labels on a facet",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "08: Boxplots"
    ]
  },
  {
    "objectID": "lessons/08-Boxplots.html#application",
    "href": "lessons/08-Boxplots.html#application",
    "title": "08: Boxplots",
    "section": "10 Application",
    "text": "10 Application\nUse data from Lansing2016NOAA.csv.\n \n1) Using the plot from Figure 9\n\nChange the axis of the boxes (put boxes on y-axis)\nReorder the wind speed to low -&gt; medium -&gt; high\nSet the outline colors so that:\n\nall boxes in low facet are blue\nall boxes in medium facet are green\nall boxes in the high facet are red\nextra points for using rep()\n\nChange the fill colors so the every other box is lightyellow\nTriple the outlier point size\nChange the outlier color to this color using rgb() \n\ncolor does not have to be exact but extra points if you know how to use a color picker to get the exact color\n\nChange the outlier shape to the ampersand ( & )\n\n \n2) Give three ways to hide the outliers in the plot from the previous question? \nnote: the easiest options use the outlier.* subcomponents of geom_boxplot.\n \n3) For the plot in Figure 4:\n\nIf geom_point is used instead of geom_jitter, why do all the points fall along the four lines?\nWhat happens if you change the width component in geom_jitter to a non-zero value?\n\n \n4) Using facet_wrap, create a series of changeMaxTemp boxplots faceted by windDir and windSpeedLevel.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n10.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?\n\n\n\n10.2 Turn in on GitHub\nSave the script as app08.r in your scripts folder, Push the changes to your GitHub repository, create an Issue in GitHub that says you have finished the application and assign the issue to belinskyc.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "08: Boxplots"
    ]
  },
  {
    "objectID": "lessons/08-Boxplots.html#extension-adding-whisker-ends",
    "href": "lessons/08-Boxplots.html#extension-adding-whisker-ends",
    "title": "08: Boxplots",
    "section": "11 Extension: adding whisker ends",
    "text": "11 Extension: adding whisker ends\nThe standard boxplot in GGPlot does not include the end at the top whiskers.   You can add it if you want, but you have to put another component, stat_boxplot, on the plot.  stat_boxplot uses the subcomponent as geom_boxplot as it is replicating the data. \n  #### Extension : Error bars  ####\n  plotA = ggplot(data=weatherData) +          \n      «stat_boxplot»(mapping=aes(x=windDirOrdered, y=changeMaxTemp),\n                   na.rm=TRUE,\n                   «geom = \"errorbar\",   # adds the whisker ends»\n                   width = 0.2,         # width of whisker ends (0 to 1)\n                   color = boxColors) + # keep ends the same color as whiskers\n      geom_boxplot(mapping=aes(x=windDirOrdered, y=changeMaxTemp),\n                   na.rm = TRUE,   # gets rid of warning about non-finite values\n                   color = boxColors,\n                   fill = \"grey50\",\n                   outlier.color = rgb(red=0, green=0.3, blue=0),\n                   outlier.shape = \"\\u053e\") +\n      theme_bw() +\n      facet_grid( cols=vars(windSpeedLevel)) +\n      labs(title = \"Change in Temperature vs. Wind Direction\",\n           subtitle = \"Lansing, Michigan: 2016\",\n           x = \"Wind Direction\",\n           y = \"Degrees (Fahrenheit)\");\n    plot(plotA);\nNote: If you put stat_boxplot after the geom_boxplot then you will see the whisker line go all the way through the box.\n\n\n\n\n\n\nFigure 12: Adding whisker ends to the boxes",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "08: Boxplots"
    ]
  },
  {
    "objectID": "lessons/06-ModifyingMappedElements.html",
    "href": "lessons/06-ModifyingMappedElements.html",
    "title": "06: Modifying Mapped Elements",
    "section": "",
    "text": "Ordering values in a vector\nCustomizing properties for both discrete and continuous variables\nCreating color gradients\n\n\n\nThe script for the lesson\n\nSave the R file, called lesson06-ModifyingMappedElements.R to the scripts folder inside your RStudio Project\n\n \nThe data for this lesson (Lansing weather in 2016) is here (same as previous lessons)\n\nSave the CSV file, called Lansing2016Data.csv to the data folder inside your RStudio Project.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "06: Modifying Mapped Elements"
    ]
  },
  {
    "objectID": "lessons/06-ModifyingMappedElements.html#purpose",
    "href": "lessons/06-ModifyingMappedElements.html#purpose",
    "title": "06: Modifying Mapped Elements",
    "section": "",
    "text": "Ordering values in a vector\nCustomizing properties for both discrete and continuous variables\nCreating color gradients\n\n\n\nThe script for the lesson\n\nSave the R file, called lesson06-ModifyingMappedElements.R to the scripts folder inside your RStudio Project\n\n \nThe data for this lesson (Lansing weather in 2016) is here (same as previous lessons)\n\nSave the CSV file, called Lansing2016Data.csv to the data folder inside your RStudio Project.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "06: Modifying Mapped Elements"
    ]
  },
  {
    "objectID": "lessons/06-ModifyingMappedElements.html#styling-elements-of-a-plot",
    "href": "lessons/06-ModifyingMappedElements.html#styling-elements-of-a-plot",
    "title": "06: Modifying Mapped Elements",
    "section": "2 Styling elements of a plot",
    "text": "2 Styling elements of a plot\nLet’s start with a plot from a few lessons ago where we mapped color to season and shape to precipitation:\n  #### Part 1: Mapping point size and color ####\n  plot1 = ggplot( data=weatherData ) +\n    geom_point( mapping=aes(x=avgTemp, y=relHum, color=season, size=precip2)) +\n    theme_bw() +\n    labs(title = \"Humidity vs. Temperature\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Temperature (\\u00B0F)\",  \n         y = \"Humidity (\\u0025)\");     \n  plot(plot1);\n… and the resulting plot with the default mapped colors and default sizes for season and precipitation:\n\n\n\n\n\n\nFigure 1: Mapping color and size to points on a scatterplot",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "06: Modifying Mapped Elements"
    ]
  },
  {
    "objectID": "lessons/06-ModifyingMappedElements.html#changing-order-of-the-seasons",
    "href": "lessons/06-ModifyingMappedElements.html#changing-order-of-the-seasons",
    "title": "06: Modifying Mapped Elements",
    "section": "3 Changing order of the seasons",
    "text": "3 Changing order of the seasons\nThe season are given in alphabetical order, which is the default for GGPlot when no order is given. Also, the colors are probably not the ones we would choose to represent the seasons.\n\n3.1 Ordering (factoring) the season\nWe need to change the order outside of the GGPlot and we do that by categorizing the season column using factor():\n  #### Part 2: Factoring the values in season ####\n  seasonOrdered = factor(weatherData$season,\n                         «levels»=c(\"Spring\", \"Summer\", \"Fall\", \"Winter\"));\nfactor() creates an ordering to the values in a vector and the order is determined by the argument levels.\n \nIn this case we have:\n\ntaken the column season from weatherData\nestablish an order to the values that goes: spring, summer, fall, and winter\nsaved the results to the vector seasonOrdered\n\n \nIf you look in the Environment tab, seasonOrdered is a Factor w/ 4 levels “Spring”…\n \nIf you put seasonOrdered in the Console tab, you see the values are the same as season:\n&gt; seasonOrdered\n  [1] Winter Winter Winter Winter Winter Winter Winter Winter Winter\n [10] Winter Winter Winter Winter Winter Winter Winter Winter Winter ...\nWith the levels given at the end:\n[353] Fall   Fall   Fall   Fall   Winter Winter Winter Winter Winter Winter Winter\n[364] Winter Winter Winter\n«Levels: Spring Summer Fall Winter»\nLevels is metadatain the vector seasonOrdered – or information about the data.\n\n\n3.2 Using the factored vector in GGPlot\nNow we will use the factored value seasonOrdered instead of season in geom_point():\n  # Use the factored values in the plot\n  plot2 = ggplot( data=weatherData ) +\n    geom_point( mapping=aes(x=avgTemp, y=relHum,\n                            color=«seasonOrdered», size=precip2)) +\n    theme_bw() +\n    labs(title = \"Humidity vs. Temperature\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Temperature (\\u00B0F)\",  \n         y = \"Humidity (\\u0025)\");     \n  plot(plot2);\nAnd GGPlot recognizes the new order of the seasons:\n\n\n\n\n\n\nFigure 2: Using a factored value in GGPlot",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "06: Modifying Mapped Elements"
    ]
  },
  {
    "objectID": "lessons/06-ModifyingMappedElements.html#appending-components-to-a-saved-plot",
    "href": "lessons/06-ModifyingMappedElements.html#appending-components-to-a-saved-plot",
    "title": "06: Modifying Mapped Elements",
    "section": "4 Appending components to a saved plot",
    "text": "4 Appending components to a saved plot\nWe have already dealt with changing the way mapped values get presented on the x and y mapping.  This was done using scale_*_continuous components.\n \nThe following code will change the limits of the x and y axes and set the breaks:\n    scale_x_continuous(limits=c(15,85),\n                       breaks = c(30,50,70)) +\n    scale_y_continuous(limits=c(40,100),\n                       breaks = c(50,70,90))\nWe could create another plot that contains all the code from plot2 with the above code attached.  Or, we can use plot2, which is a saved variable , add the above scale_*_continuous components to it, and then save the results to a new plot variable, plot3:\n#### Part 3: Appending scale components to a previous plot ####\n«plot3 = plot2» +    # get the components from plot2\n    scale_x_continuous(limits=c(15,85),           # add these components\n                       breaks = c(30,50,70)) +\n    scale_y_continuous(limits=c(40,100),\n                       breaks = c(50,70,90));\nplot(plot3);       # plot3 combines plot2 components with the new components\nAnd plot3 will contain all the components from plot2 along with the scale_*_continuous components (the change in axes values and breaks):\n\n\n\n\n\n\nFigure 3: Appending component to saved plots\n\n\n\n \nNote: The warning you get in the Console when you plot plot3 is because the new axes limits cuts off 11 (of 366) values from the plot\n&gt;   plot(plot3);\nWarning message:\nRemoved 11 rows containing missing values\n(geom_point).",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "06: Modifying Mapped Elements"
    ]
  },
  {
    "objectID": "lessons/06-ModifyingMappedElements.html#changing-color-and-size-mapped-properties",
    "href": "lessons/06-ModifyingMappedElements.html#changing-color-and-size-mapped-properties",
    "title": "06: Modifying Mapped Elements",
    "section": "5 Changing color and size mapped properties",
    "text": "5 Changing color and size mapped properties\nNow we want to change the:\n\ncolors of the points that maps the seasonOrdered and\nthe size of the points that maps the precipitation\n\n \nFor all mapped elements, there is a scale component that can modify the properties of the mapped element.\n \nThe scale components reference page is a bit intimidating at first!\n \nMost scale components have this naming format:\n\nscale_&lt;mapped_property&gt;_&lt;type_of_values&gt;\n\n \nSo, if you want to change the color or size mapping the component will be:\n\nscale_color_&lt;type_of_values&gt;\nscale_size_&lt;type_of_values&gt;\n\n \nThe third part is a little tricky and not consistent in GGPlot:\n\ncolor is mapped to the categorical/discrete values (season) so we use scale_color_manual to change the four values\n\nnote: you can map color to a continuous value as we will see later in this lesson\n\nsize is mapped to a continuous value (precipitation), and you can use either scale_size or scale_size_continuous to change the size properties\n\nscale_size_continuous is not listed on the scale_components page, but it should be\n\n\n \nAgain, we are just going to append the new components to the last plot:\n  #### Part 4: Remapping the size and color values ####\n  plot4 = plot3 + \n    «scale_color_manual»(values=c(\"green\", \"red\", \"yellow\", \"blue\")) +\n    «scale_size_continuous»(range=c(0,5));  # could also be scale_size()\n  plot(plot4);\n\n\n\n\n\n\nFigure 4: Changing the mapped color and size properties\n\n\n\n\n5.1 Categorical/Discrete scale components\nFor most properties mapped to discrete values, you will use one of the scale_*_manual components on this page:\nhttps://ggplot2.tidyverse.org/reference/scale_manual.html\n \nAll the components look pretty similar and most of the time, you are only going to change the values subcomponent:\nscale_colour_manual(\n  ...,\n  «values»,\n  aesthetics = \"colour\",\n  breaks = waiver(),\n  na.value = \"grey50\"\n)\nSo, for the color mapping, we put four colors in values to map to the four seasons:\n   scale_color_manual(values=c(\"green\", \"red\", \"yellow\", \"blue\"));\nNote: you can be more explicit and map values to color directly:\n   scale_color_manual(values=c(\"Fall\" = \"yellow\", \"Winter\" = \"blue\",\n                               \"Summer\" = \"red\", \"Spring\" = \"green\" ));\nIn the above case, the order of the seasons no longer matters – but spelling does.\n\n\n5.2 Continuous scale components\nThe scale_size or scale_size_continuous, is used to map the precipitation amounts to the size of the point, with a range of 0 to 5:\n    scale_size_continuous(range=c(0,5))\nPrecipitation goes from 0 to 1.76, so 0 maps to size=0 and 1.76 maps to size=5.\n \nBut, if you notice that even zero precipitation values, of which there are a lot, still is mapped to a very small dot on the plot (so, close to, but not quite 0).  If you really want to remove points from the plot, you need to give a negative value for the first value in the range.\n\n\n5.3 Reorder legend\nFor our last trick we will change the color and size labels in the legend and reorder the legend using theguides component so that season comes first.\n  #### Part 5: Reordering the legend and changing labels ####\n  plot5 = plot4 +\n    labs(color = \"Seasons\",\n         size = \"Precipitation\") +    \n    guides(color = guide_legend(order=1),\n           size = guide_legend(order=2));\n  plot(plot5);\nIn this case, plot4 already used a labs component that we want to add to.  So we just use labs again with the new subcomponents color and size.\n\n\n\n\n\n\nFigure 5: Redo the labs component to add color and size labels",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "06: Modifying Mapped Elements"
    ]
  },
  {
    "objectID": "lessons/06-ModifyingMappedElements.html#histograms-and-fill-color-mapping",
    "href": "lessons/06-ModifyingMappedElements.html#histograms-and-fill-color-mapping",
    "title": "06: Modifying Mapped Elements",
    "section": "6 Histograms and fill (color) mapping",
    "text": "6 Histograms and fill (color) mapping\nThe geom_histogram component in GGPlot is very similar to a geom_point.  x is mapped to the column you want to make into a histogram ( avgTemp ) and y is not mapped to any value.  The y-axis represents the count of the values on the x-axis:\n  #### Part 6: Our first histogram -- note there is only an x-mapping ####\n  plot6 = ggplot( data=weatherData ) +\n    «geom_histogram»( mapping=aes(x=«avgTemp»)) +\n    theme_bw() +\n    labs(title = \"Temperature (\\u00B0F)\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Temperature (\\u00B0F)\");     \n  plot(plot6);\n\n\n\n\n\n\nFigure 6: A basic GGPlot histogram of temperature values\n\n\n\n \nNote: if you want a density curve, then all you need to do is replace geom_histogram with geom_density.  Everything else will stay the same in the histogram examples.\n\n6.1 Mapping season to fill in the histogram\nWe can add another dimension to the histogram by mapping fill to seasonOrdered.  In geom_histogram(), fill is the background color of the bars (color is the outline color).\n \nTo change the mapped fill colors, we use scale_fill_manual, which operates just like scale_color_manual.\n \nSimilarly, changing the fill label in the legend is done by adding fill to labs():\n  #### Part 7: Mapping fill color in a histogram ####\n  plot7 = ggplot( data=weatherData ) +\n    geom_histogram( mapping=aes(x=avgTemp, «fill=seasonOrdered»),\n                    color=\"black\") +  # color is the outline color\n    theme_bw() +\n    «scale_fill_manual(values=c(\"lightgreen\", \"pink\",»     # map fill values\n                               «\"lightyellow\", \"lightblue\"))» +\n    labs(title = \"Temperature (\\u00B0F)\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Temperature (\\u00B0F)\",  \n         «fill = \"Seasons\"»);       # change the label in the legend for fill\n  plot(plot7);\n\n\n\n\n\n\nFigure 7: A temperature histogram with fill mapped to season\n\n\n\n\n\n6.2 Adding an outline color\nThe histogram would be a bit easier to see if we added on outline.  In a geom_histogram, color represents the outline color, and we will set it to black.\n  #### Part 8: Add outline color subcomponent to the histogram ####\n  plot8 = ggplot( data=weatherData ) +\n    geom_histogram( mapping=aes(x=avgTemp, fill=seasonOrdered),\n                    «color=\"black\"») +  # color is the outline color\n    theme_bw() +\n    scale_fill_manual(values=c(\"lightgreen\", \"pink\", \n                               \"lightyellow\", \"lightblue\")) +\n    labs(title = \"Temperature (\\u00B0F)\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Temperature (\\u00B0F)\",  \n         fill = \"Seasons\");      \n  plot(plot8);\ncolor in this plot is not mapped, color is a subcomponent of geom_histogram().  You can use color as a mapping in a histogram – that will be part of the application.\n\n\n\n\n\n\nFigure 8: Adding an outline color to the histogram\n\n\n\n \nExtension: Density Plots",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "06: Modifying Mapped Elements"
    ]
  },
  {
    "objectID": "lessons/06-ModifyingMappedElements.html#using-color-gradients-as-mapping",
    "href": "lessons/06-ModifyingMappedElements.html#using-color-gradients-as-mapping",
    "title": "06: Modifying Mapped Elements",
    "section": "7 Using color gradients as mapping",
    "text": "7 Using color gradients as mapping\nAll the examples above map discrete values (e.g., the four seasons) to color.  We can also map continuous values to color – and the mapping creates a gradient of colors.\n \nIn this case we have a scatterplot where we map:\n\nx to wind speed\ny to humidity\ncolor to precipitation\n\n  #### Mapping the continuous values of precipitation to color #### \n  plot9 = ggplot( data=weatherData ) +\n    geom_point( mapping=aes(x=windSusSpeed, y=relHum, «color=precip2»)) +\n    theme_bw() +\n    labs(title = \"Humidity vs. Wind Speed\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Wind Speed (miles/hour)\",  \n         y = \"Humidity (\\u0025)\"); \n  plot(plot9);\nThe default in GGPlot is to create a gradient for the values that goes from dark blue to light blue\n\n\n\n\n\n\nFigure 9: Mapping color to precipitation generates a gradient of colors\n\n\n\n\n7.1 Choose our own gradient colors\nA gradient from dark blue to light blue is probably not the best choice, luckily you can change this using the component scale_color_gradient.\n \nThe subcomponents are the low and high end colors of the gradient spectrum, in this case: orange and blue:\n  #### mapping precipitation to a gradient with two specified colors #### \n  plotA = plot9 + \n    scale_color_gradient(low=\"orange\", high=\"blue\");\n  plot(plotA);\nNote: orange and blue were specifically picked because they are on opposite sides of the color wheel, and colors on the opposite sides of the wheel create the most distinctive gradients.\n\n\n\n\n\n\nFigure 10: Choosing our own gradient spectrum for the mapped color\n\n\n\n\n\n7.2 Multiple colors in the gradient\nThe real problem is that over half of the precipitation values are zero – and we really want to better distinguish the precipitation values beyond zero.  So, let’s add more gradient colors using the scale_color_gradientn component.  scale_color_gradientn allows you to choose any (n)umber of gradient colors\n  #### mapping precipitation to 4 specified colors #### \n  plotB = plot9 + \n    scale_color_gradientn(colors=c(\"gray\", \"green\", \"yellow\", \"blue\")); \n  plot(plotB);\nThe colors gray and blue are at the top and bottom with green at the 1/3rd point and yellow at the 2/3rd point.  In other words, the four colors are equidistant apart.\n\n\n\n\n\n\nFigure 11: Using four gradient colors instead of two.\n\n\n\n\n\n7.3 Changing the boundaries of the colors\nThe colors add more distinction but there are still too many points at the low end (i.e., the grey points).  We can change the color boundaries so that green and yellow start a lot earlier in the gradient.\n \nSince there are 4 colors and they are equidistant apart, the colors by default are at:\n\ngray: 0 – or 0%\ngreen: 0.33 – or 33%\nyellow: 0.66 – or 66%\nblue: 1 – or 100%\n\n \nWe can use the subcomponent values to change these percentages.  We will change them to:\n\ngray: 0 – or 0%    (no change)\ngreen: 0.05 – or 5%\nyellow: 0.25 – or 25%\nblue: 1 – or 100%  (no change)\n\n  #### set the boundary on the 4 colors #### \n  plotC = plot9 + \n    scale_color_gradientn(colors=c(\"gray\", \"green\", \"yellow\", \"blue\"),\n                          «values=c(0,0.05,0.25,1)»); \n  plot(plotC);\nvalues is not the same as precipitation values, values represent percentages – so the boundary for yellow is at 1.76*0.25 = 0.44.\n\n\n\n\n\n\nFigure 12: Setting the boundaries of the gradient colors using values",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "06: Modifying Mapped Elements"
    ]
  },
  {
    "objectID": "lessons/06-ModifyingMappedElements.html#fill-mappings-and-gradient",
    "href": "lessons/06-ModifyingMappedElements.html#fill-mappings-and-gradient",
    "title": "06: Modifying Mapped Elements",
    "section": "8 Fill mappings and gradient",
    "text": "8 Fill mappings and gradient\nFinally, there are some shapes (#21-25) and some Unicode characters that have two colors associated with them: the outline color and the background color.  In these cases fill maps to the background color and color maps to the outline color.\n \nThe only difference with these shapes is the we map fill to the “inside” color and use scale_fill_gradientn to modify the mapping:\n  #### Some shapes (21-25) have a fill -- use fill mapping instead of color #### \n  plotD = ggplot( data=weatherData ) +\n    geom_point( mapping=aes(x=windSusSpeed, y=relHum, «fill=precip2»),\n                «shape = 23»,\n                size=2.5,\n                color=\"black\") +  # outline color\n    theme_bw() +\n    labs(title = \"Humidity vs. Wind Speed\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Wind Speed (miles/hour)\",\n         y = \"Humidity (\\u0025)\") +\n    «scale_fill_gradientn»(colors=c(\"gray\", \"green\", \"yellow\", \"blue\"),\n                         values=c(0,0.05,0.25,1));     \n  plot(plotD);\nIn this plot shape, size, and color are all subcomponents of geom_point – not mapped properties.  Only fill is a mapped property.\n\n\n\n\n\n\nFigure 13: Shapes with fill and outline colors – using fill to map the inside color\n\n\n\n \nNote: shape #23 is often rendered inconsistently…",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "06: Modifying Mapped Elements"
    ]
  },
  {
    "objectID": "lessons/06-ModifyingMappedElements.html#application",
    "href": "lessons/06-ModifyingMappedElements.html#application",
    "title": "06: Modifying Mapped Elements",
    "section": "9 Application",
    "text": "9 Application\nUse data from Lansing2016NOAA.csv.\n \nIn this script, give at least two examples of appending saved plots to a new plot.\n \n1) For the humidity vs. average temperature scatterplot\n\nmap shape to season\nmanually change the mapped shapes to shapes 21 through 24\nchange the background color of the points to match the season (you will need to make a second mapping)\nadd a regression line\nmap regression line color to season\nremove the confidence interval from the linear regressions\n\nThere are three ways to do, two involve making it transparent and the last involves removing the standard error calculations altogether.\n\n\n \n2) Create a histogram of relative humidity\n\nmap the outline color to wind speed levels\nset the order of wind speed levels to Low -&gt; Medium -&gt; High\nset the wind speed level colors to green -&gt; yellow -&gt; red\nset the background color of the histogram to black\n\n \n3) Create a scatterplot of humidity vs. average temperature\n\nmap color to stnPressure\nCreate a color gradient with 3 colors\n\nput the middle color about 1/3rd of the way through the gradient\n\nset the size of the point to 2x\nset the opacity of the points to 50%\n\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n9.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?\n\n\n\n9.2 Turn in on GitHub\nSave the script as app06.r in your scripts folder, Push the changes to your GitHub repository, create an Issue in GitHub that says you have finished the application and assign the issue to belinskyc.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "06: Modifying Mapped Elements"
    ]
  },
  {
    "objectID": "lessons/06-ModifyingMappedElements.html#extension-density-plots",
    "href": "lessons/06-ModifyingMappedElements.html#extension-density-plots",
    "title": "06: Modifying Mapped Elements",
    "section": "10 Extension: Density Plots",
    "text": "10 Extension: Density Plots\nIt is pretty easy to convert a histogram into a density plot in GGPlot, you just need to:\n\nchange the component geom_histogram to geom_density\nadd an alpha subcomponent to geom_density so you can see through the plots\n\n  #### Part 8b: Change from a histogram to a density plot ####\n  plot8b = ggplot( data=weatherData ) +\n    «geom_density»( mapping=aes(x=avgTemp, fill=seasonOrdered),\n                  color = \"black\",\n                  «alpha=0.7») +   # so you can see through the areas\n    theme_bw() +\n    scale_fill_manual(values=c(\"lightgreen\", \"pink\", \n                               \"lightyellow\", \"lightblue\")) +\n    labs(title = \"Temperature (\\u00B0F)\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Temperature (\\u00B0F)\",  \n         fill = \"Seasons\");     \n  plot(plot8b);\nThe last value (Winter) in the legend is the plot that is in “front”.\n\n\n\n\n\n\nFigure 14: A density plot of temperatures by season",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "06: Modifying Mapped Elements"
    ]
  },
  {
    "objectID": "lessons/04-ElementsAndStyles.html",
    "href": "lessons/04-ElementsAndStyles.html",
    "title": "04: Elements And Styles",
    "section": "",
    "text": "Change the style of plot components\nChange the style of canvas component using elements\nRGB color codes and Unicode\n\n\n\nThe script for the lesson\n\nSave the R file, called lesson04-StyleElements.R to the scripts folder inside your RStudio Project\n\n \nThe data for this lesson (Lansing weather in 2016) is here (same as last lesson)\n\nSave the CSV file, called Lansing2016Data.csv to the data folder inside your RStudio Project. \nIt is best to use the operating system’s File Explorer/Finder to move the CSV file to the proper folder.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "04: Elements And Styles"
    ]
  },
  {
    "objectID": "lessons/04-ElementsAndStyles.html#purpose",
    "href": "lessons/04-ElementsAndStyles.html#purpose",
    "title": "04: Elements And Styles",
    "section": "",
    "text": "Change the style of plot components\nChange the style of canvas component using elements\nRGB color codes and Unicode\n\n\n\nThe script for the lesson\n\nSave the R file, called lesson04-StyleElements.R to the scripts folder inside your RStudio Project\n\n \nThe data for this lesson (Lansing weather in 2016) is here (same as last lesson)\n\nSave the CSV file, called Lansing2016Data.csv to the data folder inside your RStudio Project. \nIt is best to use the operating system’s File Explorer/Finder to move the CSV file to the proper folder.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "04: Elements And Styles"
    ]
  },
  {
    "objectID": "lessons/04-ElementsAndStyles.html#styling-elements-of-a-plot",
    "href": "lessons/04-ElementsAndStyles.html#styling-elements-of-a-plot",
    "title": "04: Elements And Styles",
    "section": "2 Styling elements of a plot",
    "text": "2 Styling elements of a plot\nPretty much everything in a GGPlot canvas can be customized. How you customized a component depends largely on what type of component it is.\n \nThe are basically three categories of components:\n\nPlot properties that are not mapped to data (e.g., size of all points set to a specific value)\nPlot properties that are mapped to data (e.g., size of point is dependent upon the value of the point)\nNon-plot components (everything in the canvas that is not part of the plot)\n\n \nEach of the categories above have a distinct method of styling.  We will cover #1 and #3 in this lesson and #2 in a later lesson where we talk more about customizing mappings.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "04: Elements And Styles"
    ]
  },
  {
    "objectID": "lessons/04-ElementsAndStyles.html#styling-plot-components-points",
    "href": "lessons/04-ElementsAndStyles.html#styling-plot-components-points",
    "title": "04: Elements And Styles",
    "section": "3 Styling Plot Components: Points",
    "text": "3 Styling Plot Components: Points\nIn the previous lesson we mapped columns in weatherData to points (and their properties) on a scatterplot.\nIn last lesson, we used the mapping function aes() with the following arguments:\n\nx is mapped to temperature\ny is mapped to humidity\ncolor is mapped to season\nsize is mapped to precipitation\n\n#### Part 1: Mapping the points ####\nplot1 = ggplot( data=weatherData ) +\n           geom_point( mapping=aes(«x=avgTemp, y=relHum, color=season, size=precip2»)) +\n           theme_bw() +\n           labs(title = \"Humidity vs. Temperature\",\n                subtitle = \"Lansing, Michigan: 2016\",\n                x = \"Temperature (\\u00B0F)\",  # 00B0 is the Unicode degree symbol\n                y = \"Humidity (\\u0025)\");     # 0025 is the Unicode percentage symbol\nplot(plot1);\nExtension: Unicode Characters\nExtension: Using Run on a GGPlot\n \nAnd the result of the four mappings:\n\n\n\n\n\n\nFigure 1: Using mapping to style the points based on data in a column\n\n\n\n\n3.1 Unampped styling of points\nWe can also use properties like color, size, and shape to style all the points exactly the same.\n \nWe are going to start by styling the points in the same scatterplot using color, size, and shape as subcomponents of geom_point() instead of mappings:\n#### Part 2: Styling the points ####\nplot2 = ggplot( data=weatherData ) +\n           geom_point( mapping=aes(x=avgTemp, y=relHum),  # mapping\n                       «color=\"darkgreen\"», # NOT a mapping\n                       «size=2.5,»          # NOT a mapping\n                       «shape=17» ) +       # NOT a mapping\n           theme_bw() +\n           labs(title = \"Humidity vs. Temperature\",\n                subtitle = \"Lansing, Michigan: 2016\",\n                x = \"Temperature (F)\",\n                y = \"Humidity (%)\");\nplot(plot2);\nIn this example, we used four subcomponents in geom_point():\n\nmapping: maps the column data relHum vs avgTemp to the plot\n\nnote: we have only used the x and y arguments (i.e., mapped x and y) in this plot\n\ncolor: changes the point color to darkgreen\nsize: multiplies the point size by 2.5\nshape: changes the point shape to filled triangles (17)\n\n \n\n\n\n\n\n\nFigure 2: Directly styling the points on a plot\n\n\n\n\n\n3.2 Mapping properties vs. subcomponents\nProperties like color, size, and shape can be used to map data to a plot component (arguments for aes() as in Figure 1) or they can be used to directly set the property of a plot component (subcomponents of the plot as in Figure 2).  They can not be used for both.  If you use these properties as both a mapping and a subcomponent, the subcomponent will override the mapping.\n#### Part 3: Overriding mapped styles ####\nplot3 = ggplot( data=weatherData ) +\n           geom_point( mapping=aes(x=avgTemp, y=relHum, «color=season», size=precip2),\n                       «color=\"darkgreen\", # this overrides the color mapping»\n                       shape=17 ) +\n           theme_bw() +\n           labs(title = \"Humidity vs. Temperature\",\n                subtitle = \"Lansing, Michigan: 2016\",\n                x = \"Temperature (F)\",\n                y = \"Humidity (%)\");\nplot(plot3);\n\n\n\n\n\n\nFigure 3: The color subcomponent overrode the color mapping\n\n\n\nNote: There is a way to manually set the mapped color (e.g., pick your own colors for the four seasons) and we will learn this in a later lesson.\n\n\n3.3 Properties of points and their possible values\nPoints have five properties that can be changed:\n\ncolor: two options\n\nColor names: here is a complete list of all the color names in R\n\nyou can also type colors() in the Console tab to see all 657 choices\n\nRGB colors– this gives you access to all possible colors the a computer can represent\n\nsize: a number that acts as a multiplier\n\nsize=3 is 3 times the original size, size=0.5 is half the original size\n\nshape: there are three options for shape\n\nthe standard R shapes (numbered 0 through 25)\nany character on the keyboard in quotes (so, shape = “~” would use the tilde as a point character)   \nany Unicode Characters (Unicode U+018F, which is Ə, would be: shape = “\\u018f”)\n\nfill: a background color that only works for shape #21-25 and some Unicode characters\nalpha: opacity of points – a value between 0 (transparent) and 1 (opaque)\n\n \nFor more information about RGB color and Unicode go to: Extension: RGB Colors and Unicode Characters\n\n\n3.4 Adding transparency (opacity) to the point\nWhen you have a lot of points overlapping each-other, it is often helpful to make the points partially transparent so you can better see the clustering of points.  To do this we change the alpha subcomponent – alpha is a value between 0 (completely transparent) and 1 (completely opaque).\n \nFor this example, we use an alpha of 0.4 (i.e., 40% opaque):\n#### Part 4: Make points semi-transparent ####\nplotData = ggplot( data=weatherData ) +\n           geom_point( mapping=aes(x=avgTemp, y=relHum),\n                       color=\"darkgreen\",\n                       size=2.5,\n                       shape=17,\n                       «alpha = 0.4» ) +\n           theme_bw() +\n           labs(title = \"Humidity vs. Temperature\",\n                subtitle = \"Lansing, Michigan: 2016\",\n                x = \"Temperature (F)\",\n                y = \"Humidity (%)\");\nplot(plotData);\n\n\n\n\n\n\nFigure 4: Adding an alpha value (transparency) to the points to better see clustering",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "04: Elements And Styles"
    ]
  },
  {
    "objectID": "lessons/04-ElementsAndStyles.html#styling-plot-components-lines",
    "href": "lessons/04-ElementsAndStyles.html#styling-plot-components-lines",
    "title": "04: Elements And Styles",
    "section": "4 Styling plot components: Lines",
    "text": "4 Styling plot components: Lines\nLast lesson we used geom_smooth() to create a line than represent the linear regression between humidity and temperature.  In this lesson, we will create two line plots using geom_line(),  geom_line() is basically geom_point() with the points connected.\nWe are going to use geom_line() twice, to plot:\n\nmaxTemp vs day (row) number\nminTemp vs day (row) number\n\n \nTo map the row number, which is the same as the day number, to the x-axis, we set x equal to a sequence of numbers from 1 to the number of rows in the data frame: 1:nrow(weatherData).\n \nSo, x equals the sequence 1:366 or c(1,2,3, …, 364, 365, 366)\n \nThe code below says that we are going to put two geom_line() components in the plot area.  Both plots components map x to the row number and map y to a temperature column:\n#### Part 5: Add lines to a plot ####\n  plot5 = ggplot(data=weatherData) +\n    «geom_line(mapping=aes(x=1:nrow(weatherData), y=maxTemp))» +\n    «geom_line(mapping=aes(x=1:nrow(weatherData), y=minTemp))» +\n    theme_bw() +\n    labs(title = \"Temperature throughout the year\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Day (row) number\",\n         y = \"Temperature (F)\");\n  plot(plot5);\nNote: Adding in the actual date to the x-axis is a little trickier and will be covered in the next lesson.\n\n\n\n\n\n\nFigure 5: Two line graphs: maxTemp vs day number and minTemp vs day number\n\n\n\n\n4.1 Add labels and coloring\nThe black lines representing both temperature plots is hard to distinguish.  Let’s visually separate the two plots by setting the color subcomponent in geom_line():\n  #### Part 6: Add colors by name and using rgb() ###\n  plot6 = ggplot(data=weatherData) +\n    geom_line(mapping=aes(x=1:nrow(weatherData), y=maxTemp),\n              «color=\"violetred1\"») +\n    geom_line(mapping=aes(x=1:nrow(weatherData), y=minTemp), \n              «color=rgb(red=0.4, green=0.7, blue=0.9)») + \n    theme_bw() +\n    labs(title = \"Temperature vs. Date\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Date\",\n         y = \"Temperature (F)\");\n  plot(plot6);\n\n\n\n\n\n\nFigure 6: Changing the line plot colors using color names and rgb()\n\n\n\n\n\n4.2 Properties of lines and their possible values\nLines and points both use the properties color, fill, and alpha.  The difference is that linetype and linewidth is used instead point shape and point size.\n \nThere are 6 values for linetype and they are given the number 1-6 (1 is a solid line and the rest are variations of a dotted or dashed lines).\n \nNote: You can create more customized lines in GGPlot by setting the size and frequency of the dots and dashes, but that involves hexadecimals number and will be a topic for another day!\n\n\n4.3 Add a smoothing function\nOn the graph, we are going to add another component that represents the average temperature (avgTemp) and use a method that smooths out the values.  Like last lesson, we use geom_smooth(), but we will use a different smoothing method this time (loess).\n \nThe line is styled using color, linetype, linewidth, and fill:\n  #### Part 7: Add smoothing function ###\n  plot7 = ggplot(data=weatherData) +\n    geom_line(mapping=aes(x=1:nrow(weatherData), y=maxTemp),\n              color=\"violetred1\") +\n    geom_line(mapping=aes(x=1:nrow(weatherData), y=minTemp), \n              color=rgb(red=0.4, green=0.7, blue=0.9)) +  \n    theme_bw() +\n    geom_smooth(mapping=aes(x=1:nrow(weatherData), y=avgTemp),\n                method=\"loess\",\n                «color=rgb(red=1, green=0.5, blue=0),  # orange»\n                «linetype=4,»\n                «linewidth=2, »\n                «fill=\"lightgreen\"») +\n    labs(title = \"Temperature throughout the year\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Day (row) number\",\n         y = \"Temperature (F)\");\n  plot(plot7);\n\n\n\n\n\n\nFigure 7: Adding avgTemp as a smoothed plot and styled the line",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "04: Elements And Styles"
    ]
  },
  {
    "objectID": "lessons/04-ElementsAndStyles.html#ggplot-elements",
    "href": "lessons/04-ElementsAndStyles.html#ggplot-elements",
    "title": "04: Elements And Styles",
    "section": "5 GGPlot Elements",
    "text": "5 GGPlot Elements\nSo far in this lesson, we have dealt with plot components and, for plot components, you can make style changes using the subcomponents (e.g., color, size, alpha).\n \nWith most other canvas components, style changes are made using the theme() component (Figure 8).\n \nMost subcomponents in theme() are one of the these three element types:\n\nelement_text()\nelement_line()\nelement_rect()\n\n \nThere is more about the three different elements types here.\n \nAnd to modify these subcomponents, you need to use the function that matches their element type so…\n\naxis.line is modified using element_line()\nlegend.text is modified using element_text()\nlegend.background is modified using element_rect()\n\n\n\n\n\n\n\nFigure 8: Many of the theme subcomponents are either text, line, or rectangular elements\n\n\n\n\n5.1 Subcomponent groups\nThe theme() page can be a bit tricky to read.  Many of the subcomponents are grouped together (Figure 8) and the groupings can be hard to see.\nIn the image below (Figure 9), there are three groupings highlighted:\n\naxis titles\naxis text\naxis ticks\n\n \nSubcomponents in a grouping share the same element type so all:\n\naxis.title subcomponents are element_text()\naxis.text subcomponents are element_text()\naxis.ticks subcomponents are element_line()\n\n\n\n\n\n\n\nFigure 9: Subcomponent groupings in theme()\n\n\n\n\n\n5.2 Help for styling elements\nAll of the subcomponents are texts, lines, or rectangles.  You can find out more about styling text, line, and rect elements either at this webpage or by typing element_ in the search bar of the Help tab.  We will be using this in the next section.\n\n\n\n\n\n\nFigure 10: Information about the three element types in GGPlot (4 if you count element_blank)",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "04: Elements And Styles"
    ]
  },
  {
    "objectID": "lessons/04-ElementsAndStyles.html#styling-text-using-element_text",
    "href": "lessons/04-ElementsAndStyles.html#styling-text-using-element_text",
    "title": "04: Elements And Styles",
    "section": "6 Styling text using element_text()",
    "text": "6 Styling text using element_text()\nWe can change the font styles of any theme() subcomponent that is an text element using element_text().\n \nIf you look at element_text() in the Help tab, you see all the arguments, which are the same as the properties of the font that can be modified:\n\n\n\nelement_text(\n  family = NULL,\n  face = NULL,\n  colour = NULL,\n  size = NULL,\n  hjust = NULL,\n  vjust = NULL,\n  angle = NULL,\n  lineheight = NULL,\n  color = NULL,\n  margin = NULL,\n  debug = NULL,\n  inherit.blank = FALSE\n)\n\n\nFigure 11: Arguments for element_text()\n\n\n\n\n6.1 Using element_text()\nLet’s use the element_text() to change these subcomponents in theme():\n\naxis.title.x: x-axis label style\naxis.title.y: y-axis label style\nplot.title: plot title style\nplot.subtitle: plot subtitle style\n\n \nAnd for the above elements, we will modify the:\n\nsize: font size in pixels\ncolor: font color\nface: font modification (bold, italic, or bold.italic)\nfamily: font type\n\nThis should be used with caution as the font needs to be installed on the viewer’s computer – it is best to only use common fonts\n\n\n#### Part 8: Changing component text ####\n  plot8 = ggplot( data=weatherData ) +\n    geom_point( mapping=aes(x=avgTemp, y=relHum),\n                color=\"darkgreen\",\n                size=2.5,\n                shape=17,\n                alpha = 0.4 ) +\n    theme_bw() +\n    labs(title = \"Humidity vs. Temperature\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Temperature (F)\",\n         y = \"Humidity (%)\") +\n     «theme»(«axis.title.x»=element_text(«size»=14, «color»=\"orangered2\"),\n           «axis.title.y»=element_text(size=14, color=\"orangered4\"),\n           «plot.title»=element_text(size=18, «face»=\"bold\",\n                                   color =\"darkblue\"),\n           «plot.subtitle»=element_text(size=10, face=\"bold.italic\",\n                                   color =\"brown\", «family»=\"serif\"));\nplot(plot8);\nTrap: Changing a theme after modifying\n\n\n\n\n\n\nFigure 12: Styling labels and titles using element_text()\n\n\n\n\n\n6.2 Elements of a plot\nLet’s look a little deeper at how element_text() works to set font properties.\n \nIn the following code, we change the size and color of the x-axis title:\naxis.title.x = element_text(size=14, color=\"orangered2\")\nNotice that you do not directly set the size and color of axis.title.x.\n \nInstead you set axis.title.x to a text element, element_text(), that has the size and color you want – in this case, 14 and orangered2.\n \nThis method of changing the properties of an object in GGPlot is common (if not intuitive).",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "04: Elements And Styles"
    ]
  },
  {
    "objectID": "lessons/04-ElementsAndStyles.html#styling-lines-using-element_line",
    "href": "lessons/04-ElementsAndStyles.html#styling-lines-using-element_line",
    "title": "04: Elements And Styles",
    "section": "7 Styling lines using element_line()",
    "text": "7 Styling lines using element_line()\nThe function element_line() has these arguments:\nelement_line(\n  colour = NULL,\n  linewidth = NULL,\n  linetype = NULL,\n  lineend = NULL,\n  color = NULL,\n  arrow = NULL,\n  inherit.blank = FALSE,\n  size = deprecated()\n)\nNote: size = deprecated() because linewidth has replaced size – size works for now but is no longer supported (that is what deprecated means).\n \nThe line components in a plot include the axis ticks, the axis lines, and the grid lines.\n \nLike font changes, if you want to modify these line components, you set the line equal to a element_line() and supply the arguments inside element_line(). \n\n7.1 Modifying axis line elements\nWe will modify three line components:\n\nthe tick marks\nthe minor grid lines (grid lines halfway between breaks)\nthe major grid lines (grid lines attached to the breaks)\n\n#### Part 9: Changing component lines ####\n  plot9 = ggplot(data=weatherData) +\n    geom_line(mapping=aes(x=1:nrow(weatherData), y=maxTemp),\n              color=\"violetred1\") +\n    geom_line(mapping=aes(x=1:nrow(weatherData), y=minTemp), \n              color=rgb(red=0.4, green=0.7, blue=0.9)) +\n    theme_bw() +\n    geom_smooth(mapping=aes(x=1:nrow(weatherData), y=avgTemp),\n                method=\"loess\",\n                color=rgb(red=1, green=0.5, blue=0),\n                linetype=4,\n                size=2, \n                fill=\"lightgreen\") +\n    labs(title = \"Temperature throughout the year\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Day (row) number\",\n         y = \"Temperature (F)\") +\n    theme(«axis.ticks = element_line(color=\"red\", linewidth=1),»\n          «panel.grid.minor = element_line(color=\"grey75\", linetype=4),»\n          «panel.grid.major = element_line(color=\"grey75\")»);\n  plot(plot9);\n\n\n\n\n\n\nFigure 13: Styling grid lines and axis-ticks using element_text()\n\n\n\n\n\n7.2 Greyscaling\nWe are using greyscaleto set the color of the various objects in Figure 13.  In GGPlot, you can choose greyscale colors between grey0 (black) and grey100 (white).  You can think of the number after grey as the percentage of light from 0 (none – black) to 100 (all – white). So, the grey75 used in Figure 13 is a light grey.\n\n\n7.3 lineend and arrow\nThere are two arguments in element_line() that we did not cover: lineend and arrow.\n \nlineend has three options: “butt” (default), “round”, and “square”.  For the lines we are using right now you will not see much of a difference.\n \narrow is more complicated as it does not have simple options.\n \nIf you want to use an arrow you:\n\nset arrow = arrow() and\nuse arrow() arguments to modify the arrow",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "04: Elements And Styles"
    ]
  },
  {
    "objectID": "lessons/04-ElementsAndStyles.html#styling-lines-using-element_rect",
    "href": "lessons/04-ElementsAndStyles.html#styling-lines-using-element_rect",
    "title": "04: Elements And Styles",
    "section": "8 Styling lines using element_rect()",
    "text": "8 Styling lines using element_rect()\nThe last of the main GGPlot elements is element_rect(), which has the following arguments:\nelement_rect(\n  fill = NULL,\n  colour = NULL,\n  linewidth = NULL,\n  linetype = NULL,\n  color = NULL,\n  inherit.blank = FALSE,\n  size = deprecated()\n)\n\nfill is the background color of the rectangle\ncolor (or colour) is the outline color of the rectangle \nlinetype is the rectangle’s outline type\nsize is the size the the rectangle’s outline\n\n\n8.1 Using element_rect()\nWe will modify the following rectangular elements:\n\npanel.background: the background of the plot area (i.e., inside the axes)\nlegend.background: the background of the legend\n\n  #### Part 10: Modifying rectangular components ####\n  plot10 = ggplot( data=weatherData ) +\n    geom_point( mapping=aes(x=avgTemp, y=relHum, color=season, size=precip2)) +\n    theme_minimal() +\n    labs(title = \"Humidity vs. Temperature\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Temperature (F)\",\n         y = \"Humidity (%)\") +\n    theme( axis.text.x=element_text(angle=90, vjust=0.5) ,\n           «legend.background» = element_rect(color=\"blue\", fill=\"grey90\",\n                                            linewidth=1),\n           «panel.background» = element_rect(fill=\"grey10\", color=\"red\")); \n  plot(plot10);\nNote: I changed the theme from theme_bw() to theme_minimal() because theme_bw() was interfering with the panel.background outline.  I do not know why.\n\n\n\n\n\n\nFigure 14: Changing rectangular elements using element_rect() – and starting a nighttime theme",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "04: Elements And Styles"
    ]
  },
  {
    "objectID": "lessons/04-ElementsAndStyles.html#application",
    "href": "lessons/04-ElementsAndStyles.html#application",
    "title": "04: Elements And Styles",
    "section": "9 Application",
    "text": "9 Application\nUsing data from Lansing2016NOAA.csv, replicate (as best you can) this canvas:\n\n\n\n\n\n\nFigure 15: Plot canvas to replicate\n\n\n\nNote: \\n acts like an enter in a string… an example:\n&gt; cat(\"first\\nsecond\")\nfirst\nsecond\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n9.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?\n\n\n\n9.2 Turn in on GitHub\nSave the script as app04.r in your scripts folder, Push the changes to your GitHub repository, create an Issue in GitHub that says you have finished the application and assign the issue to belinskyc.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "04: Elements And Styles"
    ]
  },
  {
    "objectID": "lessons/04-ElementsAndStyles.html#extension-using-run-on-a-ggplot",
    "href": "lessons/04-ElementsAndStyles.html#extension-using-run-on-a-ggplot",
    "title": "04: Elements And Styles",
    "section": "10 Extension: Using Run on a GGPlot",
    "text": "10 Extension: Using Run on a GGPlot\nWhen you see GGPlot examples online they often skip the steps of saving the plot to a variable and using plot() – the parts highlighted below:\n«plot1» = ggplot( data=weatherData ) +\n          geom_point( mapping=aes(x=avgTemp, y=relHum, color=season, size=precip2)) +\n          theme_bw() +\n          labs(title = \"Humidity vs. Temperature\",\n               subtitle = \"Lansing, Michigan: 2016\",\n               x = \"Temperature (\\u00B0F)\",  # 00B0 is the Unicode degree symbol\n               y = \"Humidity (\\u0025)\");     # 0025 is the Unicode percentage symbol\n«plot(plot1)»;\nInstead they just click Run (or Control-Enter) on code that looks similar to this:\nggplot( data=weatherData ) +\n          geom_point( mapping=aes(x=avgTemp, y=relHum, color=season, size=precip2)) +\n          theme_bw() +\n          labs(title = \"Humidity vs. Temperature\",\n               subtitle = \"Lansing, Michigan: 2016\",\n               x = \"Temperature (\\u00B0F)\",  # 00B0 is the Unicode degree symbol\n               y = \"Humidity (\\u0025)\")      # 0025 is the Unicode percentage symbol\nWhen Source is clicked, the bottom codeblock will do nothing because there is no instruction to send the canvas to the plot tab (i.e., no plot()).  But when Run is clicked, R makes an assumption that you want to view the plot and will execute plot() in the background.  This is fine if you are testing code or if the plot is temporary – it is not good programming practice if the code is a permanent part of your script.  It is best to be explicit with your code and add the plot() instruction.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "04: Elements And Styles"
    ]
  },
  {
    "objectID": "lessons/04-ElementsAndStyles.html#extension-rgb-colors-and-unicode-characters",
    "href": "lessons/04-ElementsAndStyles.html#extension-rgb-colors-and-unicode-characters",
    "title": "04: Elements And Styles",
    "section": "11 Extension: RGB Colors and Unicode Characters",
    "text": "11 Extension: RGB Colors and Unicode Characters\nThere are many more colors than names of colors and there are many more character than keys on a keyboard.  This section will give a brief introduction on how one accesses the full spectrum of colors and characters.\n\n11.1 RGB colors\nThe are over 16 million colors we can choose from and to access all these colors, we need to use their rgb color codes.\n \nrgb stands for red, green, blue and represents the three primary light colors.  You are probably more familiar with the primary pigment colors, which are red, yellow, blue (more accurately: magenta, yellow, cyan).  The different is that primary light colors combine to make white (they are additive), whereas the primary pigment colors combine to make black/dark brown (they are subtractive).\n \nIn R, you can set color to an rgb value using the function rgb().\n \nrgb() has three arguments (red, green, blue), and each argument is set to a value from 0 (completely off) to 1 (completely on).\nSome examples:\n\nblack: rgb(red=0, green=0, blue=0)\nwhite: rgb(red=1, green=1, blue=1)\nbright blue: rgb(red=0, green=0, blue=1)\ndark blue: rgb(red=0, green=0, blue=0.3)\nyellow: rgb(red=1, green=1, blue=0)\ndark grey: rgb(red=.3, green=.3, blue=.3)\n\n \nIt takes some time to get used to mixing light colors, but it is worth it in the end to learn how to do it as you will have access to over 16 million colors.\n\n\n11.2 Unicode Characters\nUnicode characters represent the most complete digital set of characters in the world and it even includes many emojis. Wikipedia says that there are currently almost 150,000 characters (as of January 2024), and this number is growing.\n \nTo use a Unicode character, you need the Unicode number – and every character has a unique Unicode number.  Unicode numbers are hexadecimal (base-16) as opposed to the base-10 numbers you are used to.  Base-16 numbers need to use 16 character, so they use 0-9 and A-F.\n\n\n\n\n\n\nFigure 16: Unicode characters on Wikipedia, and the hexadecimal number used to refer to them\n\n\n\n \nIn R, you can use use Unicode characters by Unicode numbers preceded by \\u.\n \nSo, Unicode character 00A2 (the cent sign) would be written as “\\u00A2”.\nUnicode characters can be directly used in a text output:\n \n&gt; cat(\"10\\u00A2\")\n10¢\nYou can add Unicode characters to any text in a plot or use Unicode as the shape of a point.\n \nWarning: no font type supports all 150,000+ Unicode characters (many are not even close).  Sticking to more common font makes it more likely that the Unicode character is available.\n\n\n11.3 Script using RGB colors and Unicode characters\nIn the following script, I used RGB colors to set the color of the points, and Unicode to represent the shape of the points.\n\nThe color rgb(red=0.7, green=0.5, blue=0) is a lot of red light, half green light, and no blue light.  It is yellowish-brown (remember these are light color, not pigment colors)\nThe shape is Unicode character 00A5, which is the Yen sign: ¥ \n\n\n\n\n\n\n\nFigure 17: Using color codes and Unicode",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "04: Elements And Styles"
    ]
  },
  {
    "objectID": "lessons/04-ElementsAndStyles.html#trap-changing-a-theme-after-modifying",
    "href": "lessons/04-ElementsAndStyles.html#trap-changing-a-theme-after-modifying",
    "title": "04: Elements And Styles",
    "section": "12 Trap: Changing a theme after modifying",
    "text": "12 Trap: Changing a theme after modifying\nIs this example, theme() is used to modify various label and title components, but then theme_bw() is called.  theme_bw() reset all components of the theme basically undoing the changes we made beforehand.   Make sure theme_bw() is called before other theme changes are made.\nsource(\"scripts/reference.R\");   # include the script file reference.r\n\nweatherData = read.csv(file=\"data/LansingNOAA2016.csv\",\n                        stringsAsFactors = FALSE);\nplotData = ggplot(data=weatherData) +\n           geom_point(mapping=aes(x=avgTemp, y=relHum),\n                       color=\"darkgreen\", size=2.5, shape=17,\n                       alpha = 0.4 ) +\n           labs(title = \"Humidity vs. Temperature\",\n                subtitle = \"Lansing, Michigan: 2016\",\n                x = \"Temperature (F)\",\n                y = \"Humidity (%)\") +\n           «theme»(axis.title.x=element_text(size=14, color=\"orangered2\"),\n                 axis.title.y=element_text(size=14, color=\"orangered4\"),\n                 plot.title=element_text(size=18, face=\"bold\",\n                                         color =\"darkblue\"),\n                 plot.subtitle=element_text(size=10, face=\"bold.italic\",\n                                            color =\"brown\", family=\"serif\")) +\n           «theme_bw()»;\nplot(plotData);\n\n\n\n\n\n\nFigure 18: theme_bw() resets theme undoing the changes made in the theme() component above.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "04: Elements And Styles"
    ]
  },
  {
    "objectID": "lessons/02-Components.html",
    "href": "lessons/02-Components.html",
    "title": "02: Components",
    "section": "",
    "text": "Reword RStudio Project Windows",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "02: Components"
    ]
  },
  {
    "objectID": "lessons/02-Components.html#purpose",
    "href": "lessons/02-Components.html#purpose",
    "title": "02: Components",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nCreate a script file to be read from other scripts\nCreate a scatterplot in GGPlot\nModify the scatterplot using components\n\n\n1.1 Code for the lesson\nThe script for this lesson is here\n\nSave the R file, called lesson02-Components.R to the scripts folder inside your RStudio Project\n\n \nThe data for this lesson (Lansing weather in 2016) is here\n\nSave the CSV file, called Lansing2016NOAA.csv to the data folder inside your RStudio Project (this is the same file as last lesson). \nIt is best to use the operating system’s File Explorer/Finder to move the CSV file to the proper folder.   \n\nTrap: Using Excel to move files",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "02: Components"
    ]
  },
  {
    "objectID": "lessons/02-Components.html#spacing-code",
    "href": "lessons/02-Components.html#spacing-code",
    "title": "02: Components",
    "section": "2 Spacing Code",
    "text": "2 Spacing Code\nIn GGPlot, you create a plot by initializing a GGPlot canvas, with ggplot(), and then add components (e.g., a boxplot) to the canvas.  Most components will, in turn, have subcomponents, (e.g., color or size).\n \nFigure 1 shows a plot that has:\n\nA function to initialize GGPlot – highlighted in blue\nFive components – highlighted in yellow \n+ to “add” components to the canvas – highlighted in green\n10 subcomponents – highlighted in red\n\n\n\n\n\n\n\nFigure 1: Spacing code to emphasize the different components of a plot\n\n\n\n\n2.1 Component and subcomponent spacing\nWe will be going over the code in Figure 1 in much more detail in later lessons.  For now, we are going to focus on the spacing.  As you can see in Figure 2, the code for a plot can quickly get unwieldy– that is why it is important to consider code spacing from the very beginning.  For this class, all components and subcomponents on a GGPlot will get its own line of code.  This is also a requirement for all the lesson applications as it makes the code much easier to read.\n\n\n\n\n\n\nFigure 2: Poorly spaced code – it works but it is too hard to read!\n\n\n\n\n\n2.2 GGPlot Functions are components\nThe components of a GGPlot are really the functions in the GGPlot package.  The subcomponents are the arguments of those functions.\n \nOne component (i.e., function) in the GGPlot package is labs(), which is the labeling component in GGPlot. labs() has multiple subcomponents (i.e., arguments) representing the different parts of the plot that can be labelled.  labs() was used in Figure 1 to add a title and subtitle and x-axis and y-axis labels. It looks like this:\nlabs(title = \"Change in Temperature vs. Wind Direction\",\n     subtitle = \"Lansing, Michigan: 2016\",\n     x = \"Wind Direction\",\n     y = \"Degrees (Fahrenheit)\")\nIn this class, we will refer to labs() as a component and title, subtitle, x, and y as subcomponents.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "02: Components"
    ]
  },
  {
    "objectID": "lessons/02-Components.html#how-to-make-comments-in-r",
    "href": "lessons/02-Components.html#how-to-make-comments-in-r",
    "title": "02: Components",
    "section": "3 How to make comments in R",
    "text": "3 How to make comments in R\nIn the R language, comments are created using the number-sign ( # ) key.  Any text on the line after the ( # ) will be treated by R as a comment and it will not be executed. In Figure 2, there are comments on lines 2, 3, 4, 8, 11, and 12.  These comments are colored light green but the color of the comments depends on your color scheme ([Color Schemes (extension)]).\n \nYou are required to make use of comments for your project in this class.  Aside from being a good practice, it significantly reduces the frustration level of people who are trying to evaluate your work! Commenting also significantly reduces the frustration you will feel when trying to read your own code after an extended absence.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "02: Components"
    ]
  },
  {
    "objectID": "lessons/02-Components.html#open-your-project",
    "href": "lessons/02-Components.html#open-your-project",
    "title": "02: Components",
    "section": "4 Open your project",
    "text": "4 Open your project\nWe are going to open the RStudio Project we created in the last lesson.  You can open your project by any of the following three methods:\n\nGo to your Project Folder using your operating system’s file manager and double-clicking the .RProj file\nIn RStudio: click File -&gt; Recent Projects -&gt; (choose your project)\nIn RStudio: click File -&gt; Open Project -&gt; Navigate to the Project Folder and click the .RProj file\n\n \nExtension: RStudio Project windows",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "02: Components"
    ]
  },
  {
    "objectID": "lessons/02-Components.html#starting-a-new-script",
    "href": "lessons/02-Components.html#starting-a-new-script",
    "title": "02: Components",
    "section": "5 Starting a new script",
    "text": "5 Starting a new script\nTo create a new script in RStudio, click File -&gt; New File -&gt; R Script.\n \nAll the scripts in this class will contain these three lines at the top:\nrm(list=ls());                        # clear the Environment tab\noptions(show.error.locations = TRUE); # show line numbers on error\nlibrary(package=ggplot2);             # include all GGPlot2 functions\nCopy the three lines to your new script file and save this script as lesson02.R inside the scripts folder in your Project (File -&gt; Save as… -&gt; open scripts folder -&gt; click Save).\n\n5.1 Cleaning the Environment\nrm(list=ls());                        # clear the Environment tab\nThis line removes all the variables and data from the Environment tab.  Basically, this means your script can be executed with a clean slate.  This is useful when you are creating scripts that are designed to be executed as a standalone script.\n\n\n5.2 Error locations\noptions(show.error.locations = TRUE);  # show line numbers on error\nThis line is good to include in your R code because it instructs R to output to Console the line number that errors occur on.  However, this error detection does not work well within GGPlot functions – so, it is of limited use in this class.\n\n\n5.3 GGPlot2 Package \nlibrary(package=ggplot2);            # include all GGPlot2 functions\nThis line gives your script access to all of the functions in the GGPlot2 package.  This package is technically the third version of GGPlot – but no one uses the first two versions (ggplot and ggplot1) anymore.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "02: Components"
    ]
  },
  {
    "objectID": "lessons/02-Components.html#sec-components",
    "href": "lessons/02-Components.html#sec-components",
    "title": "02: Components",
    "section": "6 GGPlot components and subcomponents",
    "text": "6 GGPlot components and subcomponents\nGGPlot is based more on a building metaphor where the plot is made up of a bunch of component parts. whereas R-Base plotting (what GGPlot was built to replace) is based on the metaphor or drawing on a transparency.\n \nOne way to think about the functions is that they are components of a plot.  Each time you call a GGPlot function, you are either adding a component to a plot or modifying an existing component. For this class, I refer to the functions in GGPlot as components.\n \nThe arguments for GGPlots functions can be thought of as subcomponents of the components.\n \nThe full list of functions in the GGPlot package is here:\nhttps://ggplot2.tidyverse.org/reference/\n \nAnd a helpful resource for many R packages is the cheat sheets – the most recent cheat sheet for GGPlot2 can be downloaded here:\nhttps://github.com/rstudio/cheatsheets/blob/main/data-visualization.pdf",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "02: Components"
    ]
  },
  {
    "objectID": "lessons/02-Components.html#opening-the-data-file",
    "href": "lessons/02-Components.html#opening-the-data-file",
    "title": "02: Components",
    "section": "7 Opening the data file",
    "text": "7 Opening the data file\nThe data file, Lansing2016NOAA.csv, contains weather information from the NOAA for 2016.\n \nWe will use read.csv() to open the file and save the data to a data frame named weatherData. read.csv() reads in the data from the CSV file – and saves the data to a variable named weatherData.\n# read in CSV file and save the content to weatherData\nweatherData = read.csv(file=\"data/Lansing2016NOAA.csv\");\n\n7.1 Viewing the data frame\nweatherData is a data frame variable and it appears in the Environment tab under Data as 366 obs. of 29 variables. (i.e., 366 rows and 29 columns)\n\nDouble-clicking on weatherData opens the data frame in the File Viewer window.  This is a convenient way to visualize the data frame.\nClicking on the arrow to the left of weatherData provides information about each of the columns\n\n\n\n\n\n\n\nFigure 3: Viewing the data inside the data frame",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "02: Components"
    ]
  },
  {
    "objectID": "lessons/02-Components.html#create-plot-data-using-ggplot",
    "href": "lessons/02-Components.html#create-plot-data-using-ggplot",
    "title": "02: Components",
    "section": "8 Create plot data using GGPlot",
    "text": "8 Create plot data using GGPlot\nNext, we will create a scatterplot of average temperature (avgTemp column) vs. humidity (relHum column) from weatherData.\n \nThe code to create a scatterplot using GGPlot is:\n  #### Part 1: Create a scatterplot ####\n  plot1 = ggplot( data=weatherData ) +\n          geom_point( mapping=aes(x=avgTemp, y=relHum) );\n  plot(plot1);\n \nClick the Source button the script and this plot appears:\n\n\n\n\n\n\nFigure 4: Our first plot using GGPlot with argument names highlighted\n\n\n\n\n8.1 Taking out argument names\nBelow I highlight the argument names in the code:\n  #### Part 1: Create a scatterplot ####\n  plot1 = ggplot( «data»=weatherData ) +\n          geom_point( «mapping»=aes(«x»=avgTemp, «y»=relHum) );\n  plot(plot1);\nIn the script below, the argument names are removed but it will still create the same plot:\n#### Part 2: Same scatterplot without argument names ####\nplot2 = ggplot( weatherData ) +\n        geom_point( aes(avgTemp, relHum) );\nplot(plot2);\n\n\n8.2 Benefits of using argument names\nThis script without arguments works because, for this specific example, we\n\nonly used the default arguments for each function\nused the arguments in the same order they appear in the function.\n\nHowever, you should never code using these assumptions!\n \nIn this class, we will (almost always) use argument names because using argument names:\n\nmakes the code more intuitive to the reader – and making code more intuitive should (almost always) take precedence over saving space.\nmeans that you can order the arguments however you want\navoids bad assumptions about the ordering of arguments and their default values\n\nThe one exception where we will not use argument names is:\nplot(plotData)   # no argument name here\ninstead of\nplot(x=plotData) # x is the argument name\nThere are multiple functions in R and GGPlot where the argument name x is used generically as the name for the first argument in a function.  This is not intuitive when plotting because x is also used to refer to data that maps to the x-axis. \n \nWe will use the argument name x when x refers to the x-axis (e.g., x=avgTemp) but not when x is a generic name for the first argument (e.g., x=plotData).",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "02: Components"
    ]
  },
  {
    "objectID": "lessons/02-Components.html#components-of-a-ggplot",
    "href": "lessons/02-Components.html#components-of-a-ggplot",
    "title": "02: Components",
    "section": "9 Components of a GGPlot",
    "text": "9 Components of a GGPlot\nLet’s take a more detailed look at the three lines of code that created the scatterplot.\nThe function ggplot() creates a canvas where the plots will be drawn.  The argument data gives the data frame that will be used for the plots, weatherData:\n  plot1 = «ggplot( data=weatherData )» +\n          geom_point( mapping=aes(x=avgTemp, y=relHum) );\n  plot(plot1);\nNext, we add the component, geom_point(), which creates a scatterplot using the avgTemp and relHum columns from weatherData:\n  plot1 = ggplot( data=weatherData ) +\n          «geom_point( mapping=aes(x=avgTemp, y=relHum) )»;\n  plot(plot1);\nThe canvas is saved to a List variable named plot1:\n  «plot1» = ggplot( data=weatherData ) +\n          geom_point( mapping=aes(x=avgTemp, y=relHum) );\n  plot(plot1);\nAnd then plot() is used to display the canvas saved in plot1:\n  plot1 = ggplot( data=weatherData ) +\n          geom_point( mapping=aes(x=avgTemp, y=relHum) );\n  «plot(plot1)»;\nExtension: The yellow warning sign (which you might or might not see)\n\n9.1 GGPlot components\nIn GGPlot, you initialize a canvas and then add components to the canvas.  The ( + ) symbol is used to add components, and you can string multiple components together.  In the above example, there is the initializing canvas function, ggplot(), and one component, geom_point():\n \n1) ggplot() is used to initialize a GGPlot canvas with the data from weatherData:\nplotData = ggplot( data=weatherData ) +\n           «geom_point( mapping=aes(x=avgTemp, y=relHum) )»;\n2) geom_point() is a plotting component that creates a scatterplot\nplotData = ggplot( data=weatherData ) +\n           geom_point( mapping=«aes(x=avgTemp, y=relHum)» );\n\n\n9.2 GGPlot mapping and aesthetics (aes)\nAll plotting components in GGPlot contain a subcomponent called mappings.  mapping is used to describe the relationship between the data and the plot.  Or, another way to put it, mapping defines what data gets represented on the plot (e.g., avgTemp and relHum) and how the data gets represented (e.g., avgTemp on x-axis, relHum on y-axis):  \n\nplotData = ggplot( data=weatherData ) +\n           geom_point( mapping=«aes(x=avgTemp, y=relHum)» );\nThe mapping is set to a mapping element called an aesthetic (aes).  The concept of an aesthetic comes into play when we are generating legends and creating data categories, which we will talk about in future lessons.  In the meantime, it is easier to just think of aes as a mapping element.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "02: Components"
    ]
  },
  {
    "objectID": "lessons/02-Components.html#adding-more-components-to-the-canvas",
    "href": "lessons/02-Components.html#adding-more-components-to-the-canvas",
    "title": "02: Components",
    "section": "10 Adding more components to the canvas",
    "text": "10 Adding more components to the canvas\nLet’s make the three following modifications to the plot:\n\nadd a title and change the axes labels\nchange the numeric tick marks on the y-axis\nchange the direction of the x-axis labels \n\n \nTo do this we will add three new components to the canvas:\n\nlabs()                       # label component\nscale_x_continuous()    # x-scaling component (there is a corresponding y-scaling component)\ntheme()                   # theme component\n\nNote: you can also add more plotting components to the canvas (e.g., line plot, histogram) – this will be shown next lesson.\n \nWe add components using ( + ) and subcomponents are the arguments within the components:\n  plot3 = ggplot( data=weatherData ) +\n    geom_point( mapping=aes(x=avgTemp, y=relHum) ) +\n    «labs»( title=\"Humidity vs Temperature\",\n          subtitle=\"Lansing, MI -- 2016\",\n          x = \"Average Temperatures (Fahrenheit)\",\n          y = \"Relative Humidity\") +\n    «scale_x_continuous»( breaks = seq(from=10, to=80, by=10) ) +\n    «theme»( axis.text.x=element_text(angle=90, vjust=0.5) );\n  plot(plot3);\nTrap: putting the ( + ) on the next line\n\n\n\n\n\n\nFigure 5: Scatterplot with a few added components\n\n\n\n\n10.1 The Components in detail – labs()\n    labs( title=\"Humidity vs Temperature\",\n          subtitle=\"Lansing, MI -- 2016\",\n          x = \"Average Temperatures (Fahrenheit)\",\n          y = \"Relative Humidity\") +\nWhen we search in the Help tab for labs() ( Figure 6) we see that it has many subcomponents (or arguments) to change including:\n\nlabel: the title\nsubtitle: a secondary title\n\n \nA couple of notes about the information about labs() in the Help tab:\n\nThere are many ways to add axes labels, labs() merges these methods into one component.  Because of this, the Help section does not explicitly show the x and y arguments (although, the examples do).  This is one area where the Help could do a better job reflecting the functionality of a function.\nwaiver() is the default value given by the plotting function (i.e., waiver() does whatever the plotting functions thinks is best)\n\n\n\n\n\n\n\nFigure 6: Using the Help Tab in RStudio to find info about GGPlot components\n\n\n\n\n\n10.2 The Components in detail – scale_x_continuous()\nscale_x_continuous( breaks = seq(from=10, to=80, by=10))\nscale_x_continuous() is the component used when you want to modify an x-axis that has continuous values.  There are many subcomponents (Figure 7) that can be changed in scale_x_continuous() and the corresponding scale_y_continuous().  We modified one subcomponent, breaks, by setting it to a sequence from 10 to 80 with numeric values place at intervals of 10. \n \nnote: there is also a corresponding component named scale_x_discrete, which modifies x-axes with discrete values\n\n\n\n\n\n\nFigure 7: scale_x_continuous help page\n\n\n\n\n\n10.3 The Components in detail – theme()\ntheme( axis.text.x=element_text(angle=90, vjust=0.5) )\nIn this example we changed one subcomponent in theme() called axis.text.x and set it to an element_text() that modifies the text by rotating it to an angle of 90 degrees and centering the text (vjust=0.5). Note: the default for vjust is 1, meaning the text will be vertically justified to the bottom.  vjust=0 means the text will be vertically justified to the top.\n \nBroadly speaking, theme() is used to make modifications to the canvas (the plots and the background) that are not related to the data.  theme() is probably the most used component in GGPlot and we could spend many lessons going through all the subcomponents of theme().  We will be using theme() a lot more in future lessons and talking more about elements (e.g., element_text()).\n\n\n\n\n\n\nFigure 8: theme() component help page  in the Help tab (yes, there is a lot there!)\n\n\n\n\n\n10.4 For more help with components\nA good place to find more information about components in GGPlot is the Help tab in the lower-right corner of RStudio (Figure 8).  The Help tab provides information directly from https://ggplot2.tidyverse.org/reference/, which is the official webpage for GGPlot.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "02: Components"
    ]
  },
  {
    "objectID": "lessons/02-Components.html#getting-rid-of-the-grey-themes",
    "href": "lessons/02-Components.html#getting-rid-of-the-grey-themes",
    "title": "02: Components",
    "section": "11 Getting rid of the grey (themes)",
    "text": "11 Getting rid of the grey (themes)\nThe default GGplot theme, which uses the gray background is not one of my favorite.  Luckily, GGPlot makes it easy to change the theme.  The components that do this, called complete themes, are on this page.  I will change to the black-white theme, theme_bw():\n  #### Part 4: Changing the theme ####\n  plot5 = ggplot( data=weatherData ) +\n    geom_point( mapping=aes(x=avgTemp, y=relHum) ) +\n    labs( title=\"Humidity vs Temperature\",\n          subtitle=\"Lansing, MI -- 2016\",\n          x = \"Average Temperatures (Fahrenheit)\",\n          y = \"Relative Humidity\") +\n    scale_x_continuous( breaks = seq(from=10, to=80, by=10) ) +\n    «theme_bw()» +\n    theme( axis.text.x=element_text(angle=90, vjust=0.5) );\n  plot(plot5);\n\n\n\n\n\n\nFigure 9: Setting the GGPlot theme to black and white\n\n\n\n\n11.1 Complete themes must come before theme changes\nA complete theme (e.g., theme_bw()) overwrites the whole theme for the canvas.  This means it will overwrite any theme changes you previously made:\n  #### Part 5: Changing the theme --- oops, undoes theme ####\n  plot5 = ggplot( data=weatherData ) +\n    geom_point( mapping=aes(x=avgTemp, y=relHum) ) +\n    labs( title=\"Humidity vs Temperature\",\n          subtitle=\"Lansing, MI -- 2016\",\n          x = \"Average Temperatures (Fahrenheit)\",\n          y = \"Relative Humidity\") +\n    scale_x_continuous( breaks = seq(from=10, to=80, by=10) ) +\n    «theme( axis.text.x=element_text(angle=90, vjust=0.5) )» +\n    «theme_bw();  # this complete theme change will remove the theme change above»\n  plot(plot5);\nSo, make sure you put your theme changes after your complete theme.\n\n\n\n\n\n\nFigure 10: The complete theme change removed the theme change above it (the axis labels are no longer at 90 degrees)",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "02: Components"
    ]
  },
  {
    "objectID": "lessons/02-Components.html#application",
    "href": "lessons/02-Components.html#application",
    "title": "02: Components",
    "section": "12 Application",
    "text": "12 Application\nA) Looking at the GGPlot cheat sheet (or the GGPlot functions page) from Section 6, answer the following in comments in your script file\n\nWhat component (function) would be used to create a text plot?\nWhat component would you use to change the breaks on the x-axis if the values were in date format?\n\n \nC) Create a scatterplot in GGPlot in the app1-02.r script:\n\nCreate a scatterplot of stnPressure vs windSpeed using the data from Lansing2016NOAA.csv\nAdd a title and labels the axes appropriately\nChange the plot theme to one of your choice\nChange the angle of the stnPressure axis labels to 45 degrees\nChange the stnPressure breaks to go up by 0.1\nHave the wind-speed axis only display three values: 3, 12, 21\nChallenge: Use the limits argument in scale_x_continuous and scale_y_continuous to remove the top and right parts of the plot where there are only a couple points.\n\nlimits is set equal to a vector with two values – so limits = c(0,100) would mean the axis would go from 0 to 100\n\n\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n12.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?\n\n\n\n12.2 Turn in on GitHub\nSave the script as app02.r in your scripts folder, Push the changes to your GitHub repository, create an Issue in GitHub that says you have finished the application and assign the issue to belinskyc.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "02: Components"
    ]
  },
  {
    "objectID": "lessons/02-Components.html#extension-rstudio-project-windows",
    "href": "lessons/02-Components.html#extension-rstudio-project-windows",
    "title": "02: Components",
    "section": "13 Extension: RStudio Project windows",
    "text": "13 Extension: RStudio Project windows\nAn RStudio Project takes the whole RStudio window – also called an RStudio Session.  If you want to open up a second RStudio Project, you need to start a new RStudio Session (i.e., a new RStudio window).  This can be done by clicking File -&gt; Open Project in New Session…",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "02: Components"
    ]
  },
  {
    "objectID": "lessons/02-Components.html#trap-using-excel-to-move-files",
    "href": "lessons/02-Components.html#trap-using-excel-to-move-files",
    "title": "02: Components",
    "section": "14 Trap: Using Excel to move files",
    "text": "14 Trap: Using Excel to move files\nOn many computers, Microsoft Excel is the default application for opening CSV files – so double-clicking on a CSV file opens it in Excel.  So, it is common for people to open a CSV file in Excel and then save it to a different folder.\n \nThere are a couple of issues with using Excel to move CSV files:\n\nSome versions of Excel will ask you to save the file with an XLSX extension – make sure you ignore that.  This will convert the file from a CSV to an XLSX, and the file will be unreadable in R if  you use read.csv().  There are packages that can read XLSX files but you are unnecessarily adding complexity.\nExcel will occasionally change the format of a column.  For instance, if you have a column with values that look like this: 01-01, 01-02, 01-03 then Excel will likely switch those values to dates like this: Jan-1, Jan-2, Jan-3\n\n \nYou should not use Excel to move a CSV.  Instead, use the system’s File Explorer (Windows) / Finder (Mac) to move the file.  You can also safely open the CSV file in RStudio and save it to another location.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "02: Components"
    ]
  },
  {
    "objectID": "lessons/02-Components.html#trap-putting-the-on-the-next-line",
    "href": "lessons/02-Components.html#trap-putting-the-on-the-next-line",
    "title": "02: Components",
    "section": "15 Trap: Putting the ( + ) on the next line",
    "text": "15 Trap: Putting the ( + ) on the next line\nThe ( + ) commands strings together the components of a GGPlot.  A common mistake is to put the ( + ) at the beginning of the following line:\nsource(file=\"scripts/reference.R\");\npackageData = read.csv(file=\"data/CRANpackages.csv\");\n\nplotData = ggplot( data=packageData )\n    + geom_point( mapping=aes(x=Date, y=Packages) )\n    + ggtitle(label=\"Packages in CRAN (2001-2014)\")\n    + scale_y_continuous(breaks = seq(from=0, to=6000, by=500))\n    + theme(axis.text.x=element_text(angle=90, hjust=1));\nplot(plotData);\nThis will result in an error and a surprisingly wise assessment of the problem fro the R debugger.\n\n\n\n\n\n\nFigure 11: Error when putting the ( + ) on the next line\n\n\n\nThe reason for this error is that R thinks that line 5:\nplotData = ggplot( data=packageData )\nis a fully-formed and completed command \n \nAnd R does not understand why line 6 starts a new command with a ( + )\n + geom_point( mapping=aes(x=Date, y=Packages) )\nA ( + ) at the end of a line tells R to append the next line to the current line.  A ( + ) at the beginning of a line tells R to perform the mathematical operation addition.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "02: Components"
    ]
  },
  {
    "objectID": "lessons/02-Components.html#extension-the-yellow-warning-sign",
    "href": "lessons/02-Components.html#extension-the-yellow-warning-sign",
    "title": "02: Components",
    "section": "16 Extension: The yellow warning sign",
    "text": "16 Extension: The yellow warning sign\nWhen you are working in GGPlot and have diagnostic features turned on in RStudio (located at Tools -&gt; Global Options… -&gt; Code -&gt; Diagnostics):\n\n\n\n\n\n\nFigure 12: The diagnostic features in RStudio – the highlighted line is causing the scope warning\n\n\n\nYou will almost always see multiple yellow warning signs on the side of your code (Figure 13)  The warning no symbol named ‘Date’ in scope means that RStudio does not recognize Date as a variable or a function. This is because Date is a variable within the GGPlot function geom_point(), and the debugger is not sophisticated enough to always search through the GGPlot functions.\n \nThis is just a limitation of the RStudio debugger and does not reflect an actual issue. \n\n\n\n\n\n\nFigure 13: Warning about variables within the GGPlot functions",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "02: Components"
    ]
  },
  {
    "objectID": "lessons/01a-RStudioProjectsSetup.html",
    "href": "lessons/01a-RStudioProjectsSetup.html",
    "title": "01a: RStudio Projects Setup",
    "section": "",
    "text": "Include checklist",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01a: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/01a-RStudioProjectsSetup.html#purpose",
    "href": "lessons/01a-RStudioProjectsSetup.html#purpose",
    "title": "01a: RStudio Projects Setup",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nInstall and test the software you will need for this class\nProvide a basic overview of how RStudio works and its relationship to R\nExecute, using the Source button, an R script\nShow how commenting works and the importance of commenting\n\n\n1.1 Special note about images in the lessons for this class\nRStudio is a rapidly evolving program, and it would be too much work to maintain all the images so that they reflect the newest version of RStudio and its visual likeness.  Some of the images in this class reflect older versions of RStudio and there are minor changes that I have made to the code that I did not believe warrants putting in new images. I have tried to make sure these differences change nothing functionally.  Inevitably, something will fall through the cracks – so please, contact the instructor if there is a problem!",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01a: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/01a-RStudioProjectsSetup.html#questions-about-the-material",
    "href": "lessons/01a-RStudioProjectsSetup.html#questions-about-the-material",
    "title": "01a: RStudio Projects Setup",
    "section": "2 Questions about the material…",
    "text": "2 Questions about the material…\nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01a: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/01a-RStudioProjectsSetup.html#viewing-file-extensions-and-hidden-files",
    "href": "lessons/01a-RStudioProjectsSetup.html#viewing-file-extensions-and-hidden-files",
    "title": "01a: RStudio Projects Setup",
    "section": "3 Viewing file extensions and hidden files",
    "text": "3 Viewing file extensions and hidden files\nBy default, Windows and Mac hides file extensions from you (e.g., your Word document file is listed in the file manager as stuff instead of stuff.docx).  This is not convenient when you are programming as you are working with many file types (e.g., *.txt, *.r, *.csv) and, many times, the only difference between the name of two files is the extension.  For instance, you might have two files called weather.r and weather.csv in your folder – without file extensions they are both listed as weather.\n \nAlso, when you are programming, there are files you will need to access that are hidden by default by the operating system.\n \nThis section is optional, but I would highly recommend you learn how to view all files and file extensions – it will greatly assist you when programming.\n\n3.1 Viewing in newer versions of Windows 11\nThis is easy to to do in newer versions of Windows 11:\n\nOpen the File Explorer\nClick View -&gt; Show\nCheck File name extensions and Hidden items\n\n\n\n\n\n\n\nFigure 1: Change settings to view all file extensions on Windows 11\n\n\n\n\n\n3.2 Viewing in Windows 10 and older Windows 11 versions\nThis feature is a bit buried in these Window versions.\n \n\nOpen any File Explorer window (i.e., your folder viewer)\nIn menu bar\n\nWindows 10: click View -&gt; Options -&gt; Change folder and search options\nWindows 11: click 3 dots ( · · · ) -&gt; Options\n\nIn Folder Options window (Figure 2), go to the View tab\nUncheck Hide extensions for known file types\nCheck Show hidden files, folder, and drives\nClick OK\n\n\n\n\n\n\n\nFigure 2: Viewing in older versions of Windows\n\n\n\n\n\n3.3 Viewing in Mac\nFile Extensions:\n\nOpen Finder\nClick on Finder -&gt; Preferences…\nIn Finder Preferences window click on the Advanced tab\nCheck Show all filename extensions\n\n \nHidden files:\n\nYou can temporarily see hidden files in the Finder by pressing Command-Shift-Dot ( . ). \nYou can use the Terminal to permanently show hidden files as described on this webpage but this is not recommended unless you are comfortable with Terminal commands.\n\n\n\n\n\n\n\nFigure 3: Change settings to view all file extensions on a Mac",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01a: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/01a-RStudioProjectsSetup.html#install-r-and-rstudio-on-your-computer",
    "href": "lessons/01a-RStudioProjectsSetup.html#install-r-and-rstudio-on-your-computer",
    "title": "01a: RStudio Projects Setup",
    "section": "4 Install R and RStudio on your computer",
    "text": "4 Install R and RStudio on your computer\nWe are going to install R and RStudio on your computer. R is a programming language and RStudio provides a structured environment for the R programming language, similar to the way Microsoft Word provides a structured environment for document editing. RStudio is patterned on other popular programming environments like Microsoft’s Visual Studio.\n \nOn Windows the default installation can be used for R and RStudio. For Mac, installation is a bit trickier – details below.\n \nNote: Even if you already have the software installed, it is a good idea to verify you have a recent version.\n\n4.1 Install or update R (need version 4.4 or higher)\nThe R for Windows download is here. Click on Download R 4.#.# for Windows.\n \nThe R for Mac download is here.  \n\nThere are two versions of R for Mac \n\nR-4.#.#-arm64.pkg: for Macs with Apple-based processors (M1, M2, M3…), all Macs from 2021 on use Apple-based processors\nR-4.#.#.pkg: for older Macs with Intel-based processors\n\nThe installer will tell you If you pick the wrong pkg file – there is no harm except a bit of wasted time.\n\n \nAnd for those of you using Linux – the R for Linux download instructions are here.\n\n\n4.2 Install or update RStudio\nYou need version 2023.12 or higher for this class and you should have 2025.04 or higher if you are using Git.\n \nYou can download the RStudio Installer here. Download the appropriate file for your computer under Installers, open the file, and use the default installation options.\n\n4.2.1 Special instructions for Mac users\nFor Mac users there are some extra complexities:\n\nYou might be asked to install Command Line Developer Tools while installing RStudio. Go ahead and install the developer tools.\n \nThe download for RStudio is called RStudio-202X.XX.dmg.  Double-clicking the file will open the window below (Figure 4).  In the window, drag the RStudio file to the Applications folder\n\n\n\n\n\n\n\nFigure 4: Opening RStudio DMG file\n\n\n\nIf you already have RStudio installed, you will be asked if you want to replace the old version – go ahead and Replace it.\n \n\nAfter installation, unmount the RStudio device in the Finder by clicking the eject button (Figure 5)\n\n\n\n\n\n\n\nFigure 5: Unmounting the RStudio device (very important!)",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01a: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/01a-RStudioProjectsSetup.html#installing-a-package",
    "href": "lessons/01a-RStudioProjectsSetup.html#installing-a-package",
    "title": "01a: RStudio Projects Setup",
    "section": "5 Installing a package",
    "text": "5 Installing a package\nGGPlot2, is a widely used package that does not come with R or RStudio – so we are going to install the GGPlot2 package using RStudio.\n \nTo install the package GGPlot2 using RStudio (Figure 6):\n\nClick Tools -&gt; Install Packages…\nIn the Install Packages window, type GGPlot2 in the Packages textbox\nClick Install\n\n \nGGPlot2 requires many other packages (its dependencies) – and RStudio will install those packages along with GGPlot2.  Be patient, as this could take a little time.\n\n\n\n\n\n\nFigure 6: Installing the GGPlot2 Package in RStudio\n\n\n\n \nExtension: Different ways to install packages",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01a: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/01a-RStudioProjectsSetup.html#rstudio-projects-and-project-folders",
    "href": "lessons/01a-RStudioProjectsSetup.html#rstudio-projects-and-project-folders",
    "title": "01a: RStudio Projects Setup",
    "section": "6 RStudio Projects and Project Folders",
    "text": "6 RStudio Projects and Project Folders\nMost of the work you will do in R involves multiple scripts, data files, and perhaps other types of files.  All these files together make up your project and they exist within a Project Folder, which is the folder on your computer than contains all the files and subfolders for your project – and it is very important that you keep all files associated with a project within a Project Folder.\n \nIn this class we will be using RStudio to create, edit, and execute R scripts.  In RStudio, there is a feature called RStudio Projects, which is a Project Folder, that makes it much easier to move, share, and host your project on GitHub.  You need to keep all of your class work in an RStudio Project.\n\n6.1 Create a new RStudio Project\nTo create a new RStudio Project, which is also your project folder:\n\nopen RStudio\nclick File -&gt; New Project \nIn the Create Project window click New Directory\nIn the Project Type window click New Project\n\n\n\n\n\n\n\nFigure 7: Creating a new RStudio Project\n\n\n\n \nIn the Create New Project window:\n\nThe Directory name is the name of the Project Folder that will contain your whole RStudio Project\nThe Project Folder will be created in the folder listed in the second textbox (Create project as subdirectory of:)\n\n \nIn Figure 8, the Project Folder is named My_Project and is in the Desktop folder.  Note: you can name the folder whatever you want and put it in any folder location.\n\n\n\n\n\n\nFigure 8: Creating a directory for the RStudio Project\n\n\n\n \nExtension: RStudio Project in an existing directory\n\n\n6.2 RStudio Project Files Tab\nThe Files tab (bottom-right corner) in RStudio is a File Manager, and it allows you to do many things that you can do in your operating systems File Manager (called File Explorer in Windows and Finder in Mac). The Files tab can be used to open, add, remove, or rename files and folders. When we first create the RStudio Project, the Files tab will be set to the Project Folder (Figure 9, C:/Users/Charlie/Desktop/My_Project) and there is one file in the folder: My_Project.Rproj.\n \nWhenever you create an RStudio Project, an .Rproj file is added to the Project Folder. This main purpose of this file is to designate this folder as the working directory for your project.  Double-clicking on the .Rproj file in your File Manager will open your Project in RStudio (just like double-clicking a .docx file opens the file in Word).\n\n\n\n\n\n\nFigure 9: Files tab opened to the Project Folder\n\n\n\n\n\n6.3 Viewing hidden files in RStudio\nBy default, the Files tab shows file extension but it does not show hidden files.  If you click on More -&gt; Show Hidden Files, you will see the hidden folder .Rproj.user – this is not a folder you will use in this class.\n \n\n\n\n\n\n\nFigure 10: Showing hidden files\n\n\n\nExtension: *.RProj and .Rhistory\n\n\n6.4 Add Subfolders\nWe will use the Files tab in RStudio (bottom-right tab) to create two subfolders: scripts and data.\n \nTo add two folders named scripts and data:\n\nClick on New Folder in the Files tab\nEnter scripts in the textbox and click OK\nRepeat the last two steps to add a folder called data\n\n\n\n\n\n\n\nFigure 11: Adding folders using the Files tab in RStudio\n\n\n\n\n\n6.5 Add files to the project\nWe are going to download two files and add them to your new RStudio Project.\n\nRSProj_Setup.r: put this file in your scripts directory\nRSProj_Setup.csv: put this file in your data directory\n\n\n\n6.6 Opening File Manager from Files tab\nThe Files tab can do a lot of things that File Explorer/Finder can do – but not everything.  For instance, you cannot drag and drop files in the Files tab like you can in File Explorer/Finder.\n \nYou can open up a File Explorer/Finder window to the same folder by clicking More… -&gt; Show Folder in New Window.\n\n\n\n\n\n\nFigure 12: The Files tab in RStudio and the File Manager\n\n\n\n\n\n6.7 RStudio Project File Manager\nYou should now be running RStudio, opened to the RStudio Project that you just created.  If you click on the Files tab in the lower-right corner, you will see all the folders and files within your RStudio Project (linked to your Project Folder). You will also see your project name in the upper-right corner (in this case, My_Project).\n\n\n\n\n\n\nFigure 13: RStudio opened with an RStudio Project (named My_Project)\n\n\n\nThe *.RProj files is here and you might also see a file named .RHistory. These are not files you will need to use right away but you can learn more about them at Extension: *.RProj and .Rhistory.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01a: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/01a-RStudioProjectsSetup.html#rstudio-basics",
    "href": "lessons/01a-RStudioProjectsSetup.html#rstudio-basics",
    "title": "01a: RStudio Projects Setup",
    "section": "7 RStudio Basics",
    "text": "7 RStudio Basics\nNow we are going to execute the script file, RSProj_Setup.R, that we just downloaded to your RStudio Project’s scripts folder.\n \nRSProj_Setup.R takes weather data from the other downloaded file, RSProj_Setup.csv and creates boxplots showing how Wind Direction and Wind Speed relate to the Change In Temperature.\n \nWe are executing the script to test your setup and help you become familiar with the RStudio environment. If you are taking the GGPlot class, the code in RSProj_Setup.R is something you will learn throughout the course. For this lesson,\n\n7.1 Open your RStudio Project\nThere are multiple ways to open an RStudio Project – three of them are:\n\nOpen your Project Folder in File Explorer (Windows) or Finder (Mac) window and double-click the &lt;Project_Name&gt;.Rproj file\nIn RStudio, click File -&gt; Open Project… -&gt; navigate to the Project Folder and click the *&lt;Project_Name&gt;.Rproj file\nIn RStudio, click File -&gt; Recent Projects -&gt; choose the RStudio Project you just created\n\n\n\n7.2 Open a script file in your Project\nTo open the script file either:\n\nIn Files tab, go to the scripts folder and click on RSProj_Setup.R or\nIn RStudio click File -&gt; Open File -&gt; and then find  RSProj_Setup.R in the scripts folder and click Open.\n\n \nAfter opening the script file, you should see something that looks like this (Figure 14) on your screen:\n\n\n\n\n\n\nFigure 14: Opening your first script in RStudio\n\n\n\nThe script will only execute if it is opened inside your RStudio Project.\n\n\n7.3 Setting up RStudio tabs for scripts\nWhen we are editing and executing an R script, we generally have the following RStudio tabs open (Figure 15):\n\nFile Viewer – text viewer and editor for the opened script files (upper-left corner)\nConsole – displays information about the execution of your script file (lower-left corner)\nEnvironment – displays data points, or variables, from the execution of your script file (upper-right corner)\nPlots – plots produced by the execution of your script file are displayed here (lower-right corner)\n\n \nThe fourth (lower-right corner) tab is on Files, so we switched the tab to Plots:\n\n\n\n\n\n\nFigure 15: The Tabs most commonly used in RStudio\n\n\n\n \nNote: the Help tab in the lower-right corner is something you might find useful. Extension: The Help Tab\n\n\n7.4 Common buttons used in RStudio\nThe script file, RSProj_Setup.r, is a fully functioning script that takes temperature and wind data from the Comma Separated Value (CSV) file, RSProj_Setup.csv, and plots out the data. I am going to use this program to demonstrate a few of the useful buttons in RStudio.\n \nThe one button you will use most in R is Source, which executes your whole script.  Press the Source button to execute the script (Figure 16).\n \nNote: If you have already used R, there is a good chance you highlight lines of code and click Run to execute just those lines.  We are not using this method in this class.  For this class, you should always use Source to execute your code.  For more information go to Extension: Run vs. Source\n\n\n\n\n\n\nFigure 16: Running (Sourcing) the script\n\n\n\nAfter the script is run:\n\nThe Environment tab displays values for the data (variables) in the script (e.g., weatherData, windLabels).\nThe Console tab displays information about the execution of the script.\nThe Plot tab displays the box plots.  If there are multiple plots, you can use the arrow buttons to switch between the plots.\n\n\n\n7.5 Cleaning up the RStudio windows\nThere many times where you want to clean up the windows, which can get very crowded with information from old script executions.\n\nTo clean the Environment, Plot, and Console tabs use the brush button (Figure 16).\n\n\n\n\n\n\n\nFigure 17: Cleaning out the windows\n\n\n\n \nIf you click Source again, the Environment, Plot, and Console tabs will once again be populated with data from the script.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01a: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/01a-RStudioProjectsSetup.html#application",
    "href": "lessons/01a-RStudioProjectsSetup.html#application",
    "title": "01a: RStudio Projects Setup",
    "section": "8 Application",
    "text": "8 Application\n\nIn your RStudio Project, create a new script file (File -&gt; New File -&gt; R Script)\nCopy and paste this lesson’s script, RSProj_Setup1.r, to the new script.\nChange the colors in the boxplot (edit lines 17-21)\n\nHere is a comprehensive list of color names you can use in R\n\nSave the script as app01.r, and to your script folder\n\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n8.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?\n\n\n\n8.2 Turn in on GitHub\nSave the script as app01a.r in your scripts folder, Push the changes to your GitHub repository, create an Issue in GitHub that says you have finished the application and assign the issue to belinskyc.\n\n\n8.3 Zip your Project Folder\nIn your File Manager (not in RStudio), right-click on the Project Folder and in:\n\nWindows 10:\n\nClick Send to\nClick Compressed (zipped) folder\n\nWindows 11:\n\nClick Compress to Zip file\n\nMac:\n\nClick Compress “&lt;Project Folder&gt;”\n\n\nFor all operating systems, a zipped file named &lt;Project Folder&gt;.zip with all the Project Folders’ contents is created in the same folder. You can email the zip file.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01a: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/01a-RStudioProjectsSetup.html#extension-color-schemes",
    "href": "lessons/01a-RStudioProjectsSetup.html#extension-color-schemes",
    "title": "01a: RStudio Projects Setup",
    "section": "9 Extension: Color Schemes",
    "text": "9 Extension: Color Schemes\nI am not a big fan of the default color scheme in RStudio.  It does not create enough differentiation between the different components of a script.  For instance, comments (red arrows) are in green and quoted items (blue arrows) are in just a slightly different green (Figure 18).\n\n\n\n\n\n\nFigure 18: The text color for comments and quotes\n\n\n\n\n9.1 Changing the color scheme\nA good color scheme can really help a programmer by allowing them to quickly identify parts of a script and common errors, like misplaced quotes.\n \nRStudio offers many color schemes – you can change the color scheme by:\n\nclicking on Tools in the main menu (circled in Figure 19)\nchoose Global Options\nWhen the Global Options window open (in Figure 19), click on Appearance\n\n\n\n\n\n\n\nFigure 19: Color schemes for RStudio (note: the Editor font might be different in your window – that is OK)\n\n\n\n \nThe image above shows the Xcode color scheme ( Figure 19).  I prefer Xcode because it does a good job differentiating the different aspects of the script. Notice how the comments (in green) are now clearly distinguished from the quotes (in red).\n \nYou can choose from around 20 themes in the Editor theme window and you can change the theme anytime without affecting anything else.\n\n\n9.2 Adding more color to differentiate output\nThere are a couple more helpful options in RStudio that use color to distinguish components of your code and the output in the Console tab.\n \nTo make these changes go to\nTools -&gt; Global Options… -&gt; Code -&gt; Display and check:\n\nHighlight R function calls\n\n \nTools -&gt; Console and check:\n\nShow syntax highlighting in console input\n\n\n\n\n\n\n\nFigure 20: Console Window changes",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01a: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/01a-RStudioProjectsSetup.html#extension-stop-rstudio-from-automatically-adding-matching-parenthesis-and-quotes",
    "href": "lessons/01a-RStudioProjectsSetup.html#extension-stop-rstudio-from-automatically-adding-matching-parenthesis-and-quotes",
    "title": "01a: RStudio Projects Setup",
    "section": "10 Extension: Stop RStudio from automatically adding matching parenthesis and quotes",
    "text": "10 Extension: Stop RStudio from automatically adding matching parenthesis and quotes\nA common complaint I have gotten from my students is they hate the way RStudio tries to be “helpful” by automatically adding matching parenthesis or quotes when the user types in a parenthesis or start quote.\n \nYou can turn off this feature by:\n\ngoing to Tools -&gt; Global Options… -&gt; Code  -&gt; Editing\nuncheck Insert matching parens/quotes\nset Surround selection on text insertion to Never\n\n\n\n\n\n\n\nFigure 21: Stop RStudio from automatically ending your parenthesis and quotes.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01a: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/01a-RStudioProjectsSetup.html#extension-rstudio-project-in-an-existing-directory",
    "href": "lessons/01a-RStudioProjectsSetup.html#extension-rstudio-project-in-an-existing-directory",
    "title": "01a: RStudio Projects Setup",
    "section": "11 Extension: RStudio Project in an existing directory",
    "text": "11 Extension: RStudio Project in an existing directory\nTo create a new RStudio Project inside a directory that already exists (has scripts and data)\n\nopen RStudio\nclick File -&gt; New Project \nIn the Create Project window click Existing Directory\nBrowse to the folder you want to be the Project working directory and click Create Project\n\n \nRStudio will add a *.RProj file to the folder – this is what makes the folder an RStudio Project.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01a: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/01a-RStudioProjectsSetup.html#extension-working-directories-in-r-and-rstudio-why-rstudio-projects",
    "href": "lessons/01a-RStudioProjectsSetup.html#extension-working-directories-in-r-and-rstudio-why-rstudio-projects",
    "title": "01a: RStudio Projects Setup",
    "section": "12 Extension: Working directories in R and RStudio (why RStudio Projects)",
    "text": "12 Extension: Working directories in R and RStudio (why RStudio Projects)\nThis topic is, in this author’s opinion, one of the most frustrating topic in R.  Compared to other programming languages (e.g., C++. Python, Javascript), R handling of working directories makes it harderto share projects.\n \nA working directory is the folder location used when one file is looking for another file.  It is best shown by its use-case: a script file that is reading in information from another file – this file can be a data file or another script file.\n \nFor example, let’s say we have a script file called weather.r and it is pulling in data from the file weather2020.csv.  weather.r needs to first find the folder location for weather2020.csv before it can access the file.  To do this, weather.r needs a path to weather2020.csv.  This path can be thought of as map directions between two points – and the working directory is the starting point.\n \nFor the vast majority of programming languages, there is no concept of a working directory.  The process of files calling other files works like google maps – a route is specified between the two files starting with the folder the caller (e.g., weather.r) is in and ending where the callee (e.g., weather.csv) is. The path between the two files is called a relative file path. \n\n12.1 R’s default handling of working directories\nIn R, the starting point, or working directory, is fixed for all R files opened in a session (called a session variable).  Using the google maps analogy, this is like saying the map starting point is fixed for everyone – it does not matter where you actually are located.  You can change the working directory in your script using setwd() but this changes the working directories for all R files in the session.  In other words, you are simply changing the starting point to a new location and all files will now use that location.\n\n\n12.2 Absolute file paths (a bad fix to the problem)\nOne way to get around working directories is to use an absolute file path.  So, instead of mapping between weather.R and weather.csv, you just give the file path for weather.csv on your computer (called the absolute file path).\n \nThis will look something like: c:\\Users\\RStudent\\Documents\\WeatherProj\\Data\\weather.csv\n \nDoing this means you do not have to worry about working directories.  But this solution breaks as soon as you move files on your computer or move them to another computer.  The reason is that the file path changes.  Absolute file paths make it almost impossible to share file and should not be used.\n\n\n12.3 How RStudio Projects handle working directory (the least-worst option)\nAn RStudio Project sets the working directory to the Project Folder.  So, for weather.r to find weather.csv inside an RStudio Project, it just needs to know where weather.csv is located relative to the project folder.  Most likely this will be something like: Data\\weather.csv. This makes it far easier to share your project because the path to weather.csv will be the same on any computer.\nWhile I believe this is by far the best method for handling working directory issues, it comes with a major caveat:You need to open script files from within the RStudio Project.  Opening the project sets the working directory for all script files used in the session.  If you a file outside of the Project session, then the working directory is not set by the project.\n\n\n12.4 The default working directory\nA working directory is not defined for a file, it is defined for a session.  So, all files within that session will have the same working directory.  IF you change the working directory in one file, you change it for every file within the session.  This leads to awkward behavior where one R file can change the behavior of another R file within the same session by using setwd().",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01a: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/01a-RStudioProjectsSetup.html#extension-different-ways-to-install-packages",
    "href": "lessons/01a-RStudioProjectsSetup.html#extension-different-ways-to-install-packages",
    "title": "01a: RStudio Projects Setup",
    "section": "13 Extension: Different ways to install packages",
    "text": "13 Extension: Different ways to install packages\nHere are three different ways in RStudio to install packages used in your script\n\n13.1 Use the RStudio menu\nTo install packages using the RStudio menu:\n\nClick Tools -&gt; Install Packages…\nIn the Install Packages window, type the package name in the Packages textbox (RStudio will give suggestions based on what you have typed)\n\nnote: you can type in multiple packages using spaces to separate them\n\nClick Install\n\n\n\n13.2 Use the Console tab\nIn R, we can install packages using install.packages().  So, if you wanted to install GGPlot2, you would type:\ninstall.packages(\"GGPlot2\")\nNote: you can install multiple packages at once if you put the names in a vector:\ninstall.packages(c(\"GGPlot2\", \"gridExtra\", \"tidyverse\")\nThe Console tab in RStudio is an R interface, and you could type in the above line to install the GGPlot2 package.\n\n\n\n\n\n\nFigure 22: Using the RStudio Console to install a package\n\n\n\n\n\n13.3 Have RStudio install the packages\nRStudio looks through your script and will prompt you to install packages used in your script that you do not have installed. With a click, RStudio installs all needed packages and dependencies.\n\n\n\n\n\n\nFigure 23: RStudio looking for packages needed by the script– click Install and RStudio installs the required package(s)",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01a: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/01a-RStudioProjectsSetup.html#extension-the-help-tab",
    "href": "lessons/01a-RStudioProjectsSetup.html#extension-the-help-tab",
    "title": "01a: RStudio Projects Setup",
    "section": "14 Extension: The Help tab",
    "text": "14 Extension: The Help tab\nThe Help tab is essentially an intelligent online search through the R documentation.  So, if you type plot in the search bar and hit enter, the R plot help page from the online documentation will appear.  Note: you could have done the same thing by typing ?plot in the Console tab.\n\n\n\n\n\n\nFigure 24: The R plot help page in the online documentation.\n\n\n\n \nThe page that appears in the Help tab (Figure 24) is this page: https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/plot.html\n \nhttps://stat.ethz.ch is where the official documentation for R is located.  So, you will see this website appear quite often when you do an internet search for something R related.\n \nIn a future lesson we will use the Help tab to find information about GGPlot functions.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01a: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/01a-RStudioProjectsSetup.html#extension-run-vs.-source",
    "href": "lessons/01a-RStudioProjectsSetup.html#extension-run-vs.-source",
    "title": "01a: RStudio Projects Setup",
    "section": "15 Extension: Run vs. Source",
    "text": "15 Extension: Run vs. Source\nTechnically speaking, the difference between Run and Source is:\n\nSource will execute all the code in a script file.\nRun will execute either:\n\nThe code that is highlighted (if code is highlighted) OR\nThe command that the cursor is on (if the command is on more than one line) OR\nThe whole line the cursor is on\n\n\n \nThe real difference lies in a historical discussion of scripting vs. programming, which is a discussion beyond this class.  Suffice to say, R was originally intended to be more like an advanced calculator than a programming language. The script files would contain multiple lines of code that could be execute independently and in any order (think of these as buttons on a calculator).  The user could click a “button” to pull in data, click another “button” to run statistical analysis on the data, and click a third “button” to output the analysis.  This is what the Run button does.\n \nHowever, as R has grown, the focus has shifted towards developing well-structured code just like any modern programming language (e.g., Python, C, Java). This means executing the script as a whole instead of in parts.  This is what Source does.  Executing your script as a whole instead of in parts has many advantages as the code is easier to debug, easier to share, and much better organized – because you are forced to organize it. In the not-so-humble opinion of this author, learning to treat your script as a whole is a vital part of learning how to program.  For this reason, we will always be using the Source button in this class.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01a: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/01a-RStudioProjectsSetup.html#extension-create-a-standalone-r-script",
    "href": "lessons/01a-RStudioProjectsSetup.html#extension-create-a-standalone-r-script",
    "title": "01a: RStudio Projects Setup",
    "section": "16 Extension: Create a standalone R script",
    "text": "16 Extension: Create a standalone R script\nThere are two ways to create script file in RStudio:\n\nA standalone script\nAs part of an RStudio Project\n\n \nMany people use the first method.  In this class we exclusively use the second method.  The first method of creating a script file is fine for testing something out.  The second method is far better for organizing larger projects and sharing your code with others.\n \nThe reason the second method is better is because a project consist of many file that need to talk each-other.  Script files will call other scripts file or read in data from data files.  In order to makes this work, the script files need to know how to find the other files. In an RStudio Project, this is easy because the working directory is always the Project Folder of your project – and all files in the project are contained within the Project Folder.  So, you just need to look for the file relative to the Project Folder.\n \nR Programmers often get around the lack of a Project Folder/defined working directory by setting the working directory in code using setwd().  This can work locally but becomes problematic when files are shared or moved.  Whereas, RStudio Project always maintain their folder structure.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01a: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/00-IntroductionAndSyllabus.html",
    "href": "lessons/00-IntroductionAndSyllabus.html",
    "title": "00: Introduction and Syllabus",
    "section": "",
    "text": "The purpose of this class is to introduce students to the graphing package in R called GGPlot2 and the modularization techniques used by GGPlot2 to create plots.  GGPlot2, developed by Hadley Wickham, is a powerful data visualization tool used to make publication-quality plots and it has one of the largest, and most active, R communities.  GGPlot2 differs from other graphing packages by separating a plot into its component parts, making the code for the plot more reusable and extensible.\n \nThis class uses RStudio and is designed for students who have at least a basic background in programming – the equivalent of one semester of R, or any similar programming language (e.g., Visual Basic, JavaScript, C++) and familiarity with R.\n \nGraphing with GGPlot is a self-paced and asynchronous online class. The amount of material in the class is about the same as a 1.5 credit, one semester class and students are expected to complete the class within three months.  There are no regularly scheduled office hours but you can email the instructor anytime to ask questions or set up a Zoom meeting.  All contacts will receive a response within one business day.\n\n\nCharlie Belinsky\n\nbelinsky@msu.edu\n517-355-0126\n\n \nAbout me…\nI started my career as a Software Engineer for Motorola in Arizona where I developed software for military radios. From there I became a high school teacher in Port Huron, MI where I taught Computer Science, Web Design, and Physical Science. After that, I worked as an Instructional Designer for the College of Education at MSU where my main project was developing the hybrid graduate program. I currently work at the QFC where my primary job is developing and teaching online classes, including this one.  In my free time you will often find me with a backpack deep in a forest or, as my picture testifies to, hanging out on a mountain in the Northern Cascades.\n\n\n\n\nYou can contact me, Charlie, regarding technical issues.\n \nMSU also offers 24 hour technical support for MSU and MSU Guest students.\n\n517-432-6200 or 844-678-6200 (toll free)\nemail: ithelp@msu.edu\nYou can get an MSU Guest ID here.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "00: Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/00-IntroductionAndSyllabus.html#welcome-to-graphing-with-ggplot",
    "href": "lessons/00-IntroductionAndSyllabus.html#welcome-to-graphing-with-ggplot",
    "title": "00: Introduction and Syllabus",
    "section": "",
    "text": "The purpose of this class is to introduce students to the graphing package in R called GGPlot2 and the modularization techniques used by GGPlot2 to create plots.  GGPlot2, developed by Hadley Wickham, is a powerful data visualization tool used to make publication-quality plots and it has one of the largest, and most active, R communities.  GGPlot2 differs from other graphing packages by separating a plot into its component parts, making the code for the plot more reusable and extensible.\n \nThis class uses RStudio and is designed for students who have at least a basic background in programming – the equivalent of one semester of R, or any similar programming language (e.g., Visual Basic, JavaScript, C++) and familiarity with R.\n \nGraphing with GGPlot is a self-paced and asynchronous online class. The amount of material in the class is about the same as a 1.5 credit, one semester class and students are expected to complete the class within three months.  There are no regularly scheduled office hours but you can email the instructor anytime to ask questions or set up a Zoom meeting.  All contacts will receive a response within one business day.\n\n\nCharlie Belinsky\n\nbelinsky@msu.edu\n517-355-0126\n\n \nAbout me…\nI started my career as a Software Engineer for Motorola in Arizona where I developed software for military radios. From there I became a high school teacher in Port Huron, MI where I taught Computer Science, Web Design, and Physical Science. After that, I worked as an Instructional Designer for the College of Education at MSU where my main project was developing the hybrid graduate program. I currently work at the QFC where my primary job is developing and teaching online classes, including this one.  In my free time you will often find me with a backpack deep in a forest or, as my picture testifies to, hanging out on a mountain in the Northern Cascades.\n\n\n\n\nYou can contact me, Charlie, regarding technical issues.\n \nMSU also offers 24 hour technical support for MSU and MSU Guest students.\n\n517-432-6200 or 844-678-6200 (toll free)\nemail: ithelp@msu.edu\nYou can get an MSU Guest ID here.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "00: Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/00-IntroductionAndSyllabus.html#class-requirements",
    "href": "lessons/00-IntroductionAndSyllabus.html#class-requirements",
    "title": "00: Introduction and Syllabus",
    "section": "2 Class Requirements",
    "text": "2 Class Requirements\nStudents should be familiar with basic programming structures covered in a typical first semester programming class: if…else, for(), and functions.  All material for this course is online – no textbooks are required.\n\n2.1 Tech requirements\nHardware:  Any Windows (10 or 11), Mac, or Linux machine from the past ten years that has updates installed can handle all hardware and software requirements of this class.\n \nBrowser: You can use any browser (Firefox, Microsoft’s Edge, Chrome, Safari) updated within the last couple of years.\n \nVideoconferencing: We use Zoom for our videoconference meetings.  The meeting link will be emailed to you prior to the meeting.  It is recommended that you download and test your camera and microphone on Zoom before attending an instructor meeting.  The easiest way to do this is to go to the Zoom test page.  Note: Zoom’s test page will download Zoom for you.\n \nTo test your hardware in Zoom, open Zoom and make sure you are on the Home tab and click the Settings Icon (Figure 1) and the Settings Window will open Figure 1.  Go to the Audio and Video tabs to test your microphone, speakers, and webcam.  If you are using a Mac, the view is different but the buttons are the same.\n\n\n\n\n\n\nFigure 1: Testing the audio and video in Zoom (click on picture to resize).\n\n\n\n\n\n2.2 Accessing the class\nYou need a GitHub ID to access the class and hand in assignments. Go to http://github.com and click Sign up, you can use a free GitHub account or a professional account.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "00: Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/00-IntroductionAndSyllabus.html#class-structure",
    "href": "lessons/00-IntroductionAndSyllabus.html#class-structure",
    "title": "00: Introduction and Syllabus",
    "section": "3 Class Structure",
    "text": "3 Class Structure\nThe course has 12 lessons:\n\nRStudio Projects and GGPlot Setup: Set up software and the programming environment for the class, go over the programming environment\nComponents: Getting data from a CSV file, scatterplots, breaking down GGPlot components\nMapping and Aesthetics: code spacing, mapping data to different aspects of a plot (size, color, shape), adding legends\nElements and Styles: modifying plot and canvas components, RGB colors and Unicode\nDate Objects and Theming: proper formatting and converting of Date objects, creating your own GGPlot theme\nModifying Mapped Elements: changing the properties of data elements on a plot, color gradients\nFaceting: break up plot data horizontally and vertically\nBoxplot: mapping data to a boxplot, faceting boxplots, outliers\nReshaping and For Loops 1: two different methods for mapping data from a complex data frame\nReshaping and For Loops 2: methods for plotting subset data within a data frame, text plots\nAnnotations: adding non-data elements to your plot (e.g., text, points, lines)\nMultipaneling: arranging and customizing plots on a canvas, regular expression\n\n\n3.1 Lesson Application\nAll lessons have an Application section at the end that will ask you to apply what you learned in the lesson in your own script. The Application is the only product that gets evaluated. There are no tests and there is no final exam. \n\n\n3.2 Lesson feedback\nEach application has these three questions regarding the lesson:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?\n\n \nThese questions are vital for feedback in this class and far more useful to me than end-of-class surveys as they give me real-time information.  Please take a few minutes to answer these questions.  Feedback from these questions has become my main way of improving the class.  In return, I promise to address concerns and questions from your responses.\n\n\n3.3 Extensions and Traps\nMany of the lessons contain optional content called Extension and Traps.  Extensions contain material that goes beyond the lesson’s objectives and Traps capture some of the common issues students have with the lesson’s objectives.  There are links to Extensions and Traps within the Content area of the lesson.  Clicking on the appropriate link takes you directly to the Extension or Trap. Extension: Testing the extension link",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "00: Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/00-IntroductionAndSyllabus.html#student-instructor-meetings",
    "href": "lessons/00-IntroductionAndSyllabus.html#student-instructor-meetings",
    "title": "00: Introduction and Syllabus",
    "section": "4 Student-Instructor Meetings",
    "text": "4 Student-Instructor Meetings\nStudent-instructor meetings will be done on an as-needed basis and meetings can always be requested by the student.  Meetings are preferably over Zoom so that screens can be shared.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "00: Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/00-IntroductionAndSyllabus.html#lesson-features-technical",
    "href": "lessons/00-IntroductionAndSyllabus.html#lesson-features-technical",
    "title": "00: Introduction and Syllabus",
    "section": "5 Lesson features (technical)",
    "text": "5 Lesson features (technical)\nThis sections goes over some of the technological features built into the lessons.\n\n5.1 Long-click menu\nIf you long-click (hold left-button for about half a second) anywhere on any lesson page Figure 2, try it!), you are given options to:\n\nGo to Top of Page\nPrint/ Save as PDF (same as the lesson’s Print link)\nReturn to the Previous Position (only appears after you have jumped to a position on the page)\nMaximize All Images\nMinimize All Images\n\n \n\n\n\n\n\n\nFigure 2: The long-click menu – this view is from Firefox .\n\n\n\n\n\n5.2 Resizing Pictures\nMost images in the course can be resized so that the picture is out of your way when you don’t need to view it.\n \nClicking on the image toggles it between the minimized and maximized states.\nClicking and dragging on the image allows you to resize the image to any size. (Figure 3).\n\n\n\n\n\n\nFigure 3: Test picture to resize (Ninh Bình, Việt Nam)\n\n\n\n\n\n5.3 Figures and references\nWhen you click on a figure reference (e.g., Figure 3), the caption on the figure will highlight for 2 seconds.\n \nIf the figure is not on the screen, then the page will scroll to the figure and highlight it.  For instance, clicking on Figure 1 will take you to the Zoom figure near the top of this page.  You can return to this position by long-clicking and selecting Return to the Previous Position\n\n\n5.4 Printing lessons and saving lessons to PDF\nYou can print any lesson or save it as a PDF by clicking on the Printer icon at the top of every lesson (and this syllabus).  This will bring up a print dialog (Figure 4) and you can print the lesson to a printer.  On most machines, you can also choose a PDF device as a printer – this will save the lesson as a PDF document.\n \nNote: Using your browser’s print feature instead on the Print link will print out the whole webpage instead of just the lesson.\n\n\n\n\n\n\nFigure 4: This author has two print-to-PDF devices – the Microsoft Print to PDF, which comes with Windows 10 and 11, works fine\n\n\n\n\n5.4.1 Print-to-PDF Software\nIf you are using Windows 7 or 8 you might not have a PDF device and you will need to download Print-to-PDF software. You can see if you have a PDF device by going to the print options in any program and see if any of the devices have “PDF” in their name (Figure 4).  If you don’t have a PDF device, then I recommend you install CutePDF (direct link to the file download).  CutePDF is simple and powerful print-to-PDF software that does not try to install any extra software on your computer. Trap: Bloatware\n\n\n\n5.5 Codeblocks\nClicking on the clipboard in the upper-right corner of the codeblock (Figure 5) will copy the code to the clipboard. You can then paste the code into RStudio (or any other text editor)\n\n\n\n# the next two lines should be at the top of all your scripts\nrm(list=ls());\noptions(show.error.locations = TRUE);\n# create three variables: d, t, and v\n# give d and t values and use them to calculate v\nd = 100;\nt = 20;\nv = d/t;\n\n\nFigure 5: Clicking on clipboard in upper-right corner selects all the text and copies it to the clipboard\n\n\n\n\n\n5.6 Special note about images in the lessons for this class\nRStudio is a rapidly evolving program, and it would be too much work to maintain all the lesson images in order to reflect the visual likeness of the newest version of RStudio.  Some of the images in this class still reflect the 2019 version of RStudio (when R was still at version 3.5). There are also minor changes that I have made to the code that I did not believe warrants putting in new images.  For instance, my RStudio Project name might change between images and some of the RStudio buttons and tabs will look slightly different (think of it as a check on how observant you are!).  I have tried to make sure these differences change nothing functionally.  Inevitably, something will fall through the cracks – so please, contact the instructor if there is something causing a problem!",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "00: Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/00-IntroductionAndSyllabus.html#personal-statement-from-charlie",
    "href": "lessons/00-IntroductionAndSyllabus.html#personal-statement-from-charlie",
    "title": "00: Introduction and Syllabus",
    "section": "6 Personal statement from Charlie",
    "text": "6 Personal statement from Charlie\nThe biggest thing that is lost when you move a class from a face-to-face environment to an online environment is the daily interaction between the instructor and the students.  These interactions provide invaluable informal feedback for the instructor and, I would argue, are the main tool that an instructor uses to make improvements to their class.  It is impossible to replicate this in an online class but I ask that you help me out and make an effort to communicate to me the little things.  This could mean technical nags like content not appearing properly or pages loading too slowly, lesson content that is unclear, grammar and spelling issues, or scripts that does not work or work in a way that you do not understand.\n \nThank you for reading and taking this into consideration.  In the end, it is the interactions between an instructor and the students that make a class great.\n \nNow on to the stuff I have to put in a syllabus…",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "00: Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/00-IntroductionAndSyllabus.html#disclaimers-and-loose-ends",
    "href": "lessons/00-IntroductionAndSyllabus.html#disclaimers-and-loose-ends",
    "title": "00: Introduction and Syllabus",
    "section": "7 Disclaimers and Loose Ends",
    "text": "7 Disclaimers and Loose Ends\n\n7.1 Student Responsibilities\n\nStudents are expected to regularly check the Announcements section on the home page for the class and the email address associated with their MSU ID/ MSU Community ID for new information regarding the class.\nStudents are expected to ask questions if they are having problems with an application or their class project.\nStudents are expected to monitor their progress in order to complete the course work on time.\nStudents are expected to contact either the instructor or MSU regarding technical issues that are interfering with the class.\nStudents are expected to follow the MSU’s academic integrity policy.\nPlease notify the instructor regarding issues with the class website and lessons.\n\n\n\n7.2 Academic Integrity (summarized)\nWritten or other work which a student submits in a course, shall be the product of his/her own efforts. Plagiarism, cheating, and all other forms of academic dishonesty are prohibited. Students are expected to adhere to the ethical and professional standards associated with their programs and academic courses. All applicable portions of Michigan State’s Policy on Academic Integrity apply to non-credit courses. Copies of the Policy on Academic Integrity may be accessed at https://www.msu.edu/unit/ombud/honestylinks.html.\n\n\n7.3 Instructor Responsibilities\n\nInstructor will be available for assistance for requested virtual office hours (through Zoom).\nInstructor will respond to emails from students within 1 business day.  Potential for delayed responses (e.g., instructor is on vacation) will be posted on the front page of the course.\nChanges to the course will be posted in the Announcements section of the home page for the class.\n\n\n\n7.4 Attendance\nYou are expected to log in to the class at least once a week. Logging in allows you to stay updated and see new announcements.\n\n\n7.5 Participation\nPlease note that not all course lessons are the same length and the later ones tend to involve more work. Our goals with regard to participation/progress are to (a) keep you engaged in the course, (b) enhance the overall learning environment by promoting student-teacher communication, and (c) avoid a last minute time crunch for everyone involved. We will not be sympathetic or make allowances for your failure on course tasks or deadlines that result from not seeing announcements because you had not accessed the course for an extended period, and had not told us you would be away from the internet.\n\n\n7.6 ADA Statement\n\nMSU provides students with disabilities reasonable accommodations to participate in educational programs, activities, or services. Students with disabilities requiring accommodations to participate in class activities or meet course requirements should contact the instructor as early as possible.\nFor students needing accommodations for disabilities, please contact your instructor and The Resource Center for Persons with Disabilities at Michigan State University at 517-353-9642.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "00: Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/00-IntroductionAndSyllabus.html#trap-bloatware",
    "href": "lessons/00-IntroductionAndSyllabus.html#trap-bloatware",
    "title": "00: Introduction and Syllabus",
    "section": "8 Trap: Bloatware",
    "text": "8 Trap: Bloatware\nAdobe Acrobat, like most free software you download, attempts to bundle itself with software you most likely do not need nor want (i.e., bloatware).  Make sure you take some time to read the optional offers whenever you download software. This author would argue that the main reason computers “slow” down over time is because of extra software that users unwittingly install.\n \n\n\n\n\n\n\nFigure 6: Three offers from Adobe that you neither need nor want – this author recommends you uncheck them all.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "00: Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/00-IntroductionAndSyllabus.html#extension-testing-the-extension-link",
    "href": "lessons/00-IntroductionAndSyllabus.html#extension-testing-the-extension-link",
    "title": "00: Introduction and Syllabus",
    "section": "9 Extension: Testing the extension link",
    "text": "9 Extension: Testing the extension link\nHi, and welcome to the test Extension.  If you clicked on the Extension link to get here then you can return to your previous location by long-clicking on this page and choosing Go to Previous Location.\n \nIf you just scrolled down to this point then, congratulations, you have reached the end of the document.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "00: Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/01b-GitAndGitHubSetup.html",
    "href": "lessons/01b-GitAndGitHubSetup.html",
    "title": "01b: Git and GitHub Setup",
    "section": "",
    "text": "Show how to use Git tab in app as an extension",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01b: Git and GitHub Setup"
    ]
  },
  {
    "objectID": "lessons/01b-GitAndGitHubSetup.html#purpose",
    "href": "lessons/01b-GitAndGitHubSetup.html#purpose",
    "title": "01b: Git and GitHub Setup",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nSetup Git on your computer\nUse Git to connect your RStudio Project to a GitHub repository\nShare your GitHub repository\n\n\n1.1 Prerequisite\nYou will need a GitHub account to complete this lesson. You can sign up for an account at https://github.com.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01b: Git and GitHub Setup"
    ]
  },
  {
    "objectID": "lessons/01b-GitAndGitHubSetup.html#git-and-github",
    "href": "lessons/01b-GitAndGitHubSetup.html#git-and-github",
    "title": "01b: Git and GitHub Setup",
    "section": "2 Git and GitHub",
    "text": "2 Git and GitHub\nFor this class, we will use Git and GitHub for your class assignments.\n \nGit and GitHub are two terms that are often conflated. Git is versioning software – you use Git on your computer to document and create a history of your project folder.  Using the project history, you can bring back previous versions of files or your entire Project.  Git calls the project folder, along with its full history, a repository.\n \nGitHub is an online software development platform and a place to store, sync, and share your Git repository. When combined, Git and GitHub make a very powerful project-management system.\n \nWhile Git and GitHub are very powerful tools, they are not intuitive and there is a pretty high-barrier to getting started. This lesson is designed to allow you to do the very basics in Git and GitHub.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01b: Git and GitHub Setup"
    ]
  },
  {
    "objectID": "lessons/01b-GitAndGitHubSetup.html#install-git-on-your-computer-need-version-2.44-or-higher",
    "href": "lessons/01b-GitAndGitHubSetup.html#install-git-on-your-computer-need-version-2.44-or-higher",
    "title": "01b: Git and GitHub Setup",
    "section": "3 Install Git on your computer (need version 2.44 or higher)",
    "text": "3 Install Git on your computer (need version 2.44 or higher)\nFor Windows, go here to download and install Git – click on Download for Windows. Git asks a lot of questions during installation and you can choose the default option for everything.\n \nFor Mac, there is no direct installation of Git. I recommend using Homebrew, which is a useful tool for any programmer using a Mac because it gives you access to a bunch of programming tools.\n\n3.1 Homebrew installation of Git on Mac:\n\nGo to the Homebrew homepage\nCopy the text under the heading Install Homebrew\nPaste the text in a Terminal window (RStudio has a Terminal tab in the bottom-left pane)\n\nBe patient – it takes time to install!\n\nWhen Homebrew is finished installing, install Git by typing in the Terminal:\n\nbrew install git \n\nAnd then install the credential manager by typing in the Terminal:\n\nbrew install --cask git_crendential_manager\n\n3.1.1 Alternate installation for Git on Mac\nIf you cannot get Homebrew to work, other options are available here. MacPort is the best alternative. XCode will work but it is a huge installation (at least 20GB), and most of it is not going to be used. The Binary Installer option is the easiest but is too outdated.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01b: Git and GitHub Setup"
    ]
  },
  {
    "objectID": "lessons/01b-GitAndGitHubSetup.html#rstudio-terminal",
    "href": "lessons/01b-GitAndGitHubSetup.html#rstudio-terminal",
    "title": "01b: Git and GitHub Setup",
    "section": "4 RStudio Terminal",
    "text": "4 RStudio Terminal\nWe will be using the Terminal tab in RStudio to setup Git and to connect your project to a repository on GitHub. The Terminal in RStudio is a tab in the lower left area in RStudio. The Terminal tab is similar to the Command Prompt in Windows or Terminal in Mac\n \nMost of the Terminal command used in this lesson will only work if you are in the correct RStudio Project. The RStudio Project name (in Figure 1 it is My_Project) is in the upper-right corner of RStudio (circled in red).\n\n\n\n\n\n\nFigure 1: RStudio Terminal tab (don’t forget to check the Project Folder)",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01b: Git and GitHub Setup"
    ]
  },
  {
    "objectID": "lessons/01b-GitAndGitHubSetup.html#configuring-git-on-your-computer",
    "href": "lessons/01b-GitAndGitHubSetup.html#configuring-git-on-your-computer",
    "title": "01b: Git and GitHub Setup",
    "section": "5 Configuring Git on your computer",
    "text": "5 Configuring Git on your computer\nBefore you use Git, you first need to configure Git on your computer with your GitHub username and email (i.e., the email you use to sign up for your GitHub account). The username and email are used by Git to identify who made what changes in the project history – this is especially important when you are collaborating on a project.\n \nGit will not check if you put in wrong or invalid usernames and emails.\n\n5.1 Adding the username and email\nWe will use the RStudio Terminal tab to enter these values.\n \nThe first command sets the user name in Git (replace userName with your GitHub ID):\ngit config --global user.name \"userName\"\nThe second command sets the user email in Git (replace email with the email you used to signup for GitHub):\ngit config --global user.email \"email\"\n\n\n\n\n\n\nFigure 2: Changing Git username and email using the Terminal tab\n\n\n\n\n\n5.2 Viewing the configured values\nYou can check if you successfully changed the username and email by executing these lines in the Terminal tab:\ngit config user.name \ngit config user.email\nAfter executing the two above command, your Terminal tab should look similar to this:\n\n\n\n$ git config user.name \nbelinskyc  \n$ git config user.email \nbelinsky@msu.edu\n\n\nFigure 3: Testing the git configuration using the RStudio Terminal tab",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01b: Git and GitHub Setup"
    ]
  },
  {
    "objectID": "lessons/01b-GitAndGitHubSetup.html#add-git-repository-to-your-rstudio-project-folder",
    "href": "lessons/01b-GitAndGitHubSetup.html#add-git-repository-to-your-rstudio-project-folder",
    "title": "01b: Git and GitHub Setup",
    "section": "6 Add Git Repository to your RStudio Project folder",
    "text": "6 Add Git Repository to your RStudio Project folder\nBoth RStudio Projects and Git Repositories are set up in your Project Folder (i.e., the root folder for your project).\n \nTo add a Git repository to your Project Folder\n\nMake sure your RStudio Project is open\n\nLook for your Project name in the upper-right corner (In Figure 1 it is My_Project)\n\nType git init -b main in the Terminal\n\nThis command initializes git and sets the initial branch name to main\nYou should get a message in the Terminal like:\n\nInitialized empty Git repository in C:/Users/Charlie/...\n\n\nRestart RStudio\n\n\n6.1 RStudio Git tab\nAfter you add Git to an RStudio Project folder, a Git tab will appear in the upper-right window. This tab is RStudio’s built-in Git interface and it can handle many commonly performed Git functions, including most of the things needed for class. It is not necessary to use the Git tab.\n\n\n\n\n\n\nFigure 4: The Git tab has been added to the RStudio Project",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01b: Git and GitHub Setup"
    ]
  },
  {
    "objectID": "lessons/01b-GitAndGitHubSetup.html#create-a-github-repository",
    "href": "lessons/01b-GitAndGitHubSetup.html#create-a-github-repository",
    "title": "01b: Git and GitHub Setup",
    "section": "7 Create a GitHub repository",
    "text": "7 Create a GitHub repository\nA GitHub repository is an online storage location that syncs with the Git repository (Project Folder) on your computer.\n \nTo create a GitHub repository (Figure 5)\n\nLog in to GitHub\nClick on the + at the top-right and choose New Repository\nChoose a repository name (any name you want – just remember you are sharing it!)\nChoose whether you want the repository to be Public or Private (this can be changed later)\n\nPublic means that anyone with the repository link can view (but not edit) your files\nPrivate means that only users you add in Settings -&gt; Manage Access can view the repository\n\nClick Create Repository\n\n\n\n\n\n\n\nFigure 5: Creating a new repository on GitHub\n\n\n\n\n7.1 Get the GitHub URL\nTo link the Git repository on your computer with this GitHub repository, you will need the URL for the GitHub repository. After you create the new repository, a window will appear ( Figure 6) with the URL at the top in the Quick Setup section. Copy this URL and save it– you will use it in the next section.\n\n\n\n\n\n\nFigure 6: The URL of your GitHub repository\n\n\n\nThe GitHub repository link is the URL that takes you directly to the online project.  A GitHub repository link is always in this format:\nhttps://github.com/&lt;github_user_name&gt;/&lt;github_repository_name&gt;.git\n\nSo, if my GitHub username is QFCatMSU and my repository name is gitHubTest then the link is:\nhttps://github.com/qfcatmsu/githubtest.git\nNote: capital/lowercase does not matter and .git is optional\n \nIf you lose the Quick Setup page then the URL is going to be the part of the URL for your repository circled in Figure 6\n\n\n7.2 Inviting the instructor to your repository\nTo invite a user (or, as GitHub calls them, collaborator) to your repository:\n\nGo to the GitHub home page for your repository and click Settings\nClick Collaborators\nClick Add people\n\nYou can use either the person’s GitHub ID or their email address associated with their GitHub ID\ninvite your instructor: belinsky@msu.edu or belinskyc\n\n\n\n\n\n\n\n\nFigure 7: Inviting a user to your GitHub Repository",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01b: Git and GitHub Setup"
    ]
  },
  {
    "objectID": "lessons/01b-GitAndGitHubSetup.html#linking-your-git-repository-to-a-github-repository",
    "href": "lessons/01b-GitAndGitHubSetup.html#linking-your-git-repository-to-a-github-repository",
    "title": "01b: Git and GitHub Setup",
    "section": "8 Linking your Git repository to a GitHub repository",
    "text": "8 Linking your Git repository to a GitHub repository\nIn this section we are going to link your Git repository, which is in the same folder as your RStudio Project, with your GitHub Repository.  The GitHub repository will become the online version of your Git repository. \nWarning: This only works if the GitHub repository is empty .\n \nType the line below into the Terminal. Replace the URL with the URL for your GitHub repository. Make sure your are in your RStudio Project.\ngit remote add origin \"https://github.com/myUserName/myRepository.git\"\nNote: In Windows, Control-V does not paste in a Terminal window, but right-click -&gt; Paste works\n\n8.1 If you added the wrong repository name…\nThen you first need to remove the current GitHub repository (i.e., the origin):\ngit remote rm origin\nand then repeat this line (using the correct GitHub URL)\ngit remote add origin \"https://github.com/myUserName/myRepository.git\"",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01b: Git and GitHub Setup"
    ]
  },
  {
    "objectID": "lessons/01b-GitAndGitHubSetup.html#uploading-to-the-github-repository",
    "href": "lessons/01b-GitAndGitHubSetup.html#uploading-to-the-github-repository",
    "title": "01b: Git and GitHub Setup",
    "section": "9 Uploading to the GitHub repository",
    "text": "9 Uploading to the GitHub repository\nGit/GitHub is asynchronous. Changes to your local project are not automatically uploaded to GitHub – you need to explicitly upload the changes.\n \nTo upload your changes to GitHub, in the Terminal type:\ngit add -A\ngit commit -m \"A message about the changes to your project\"\ngit push -u origin main\nYou will repeat these lines every time you turn in an application.\n\nThe first line compiles all the changes you have made to your project\nThe second line accepts, and adds a message about, your changes\nThe third line sends the changes with the message to GitHub.\n\n \nNote: you can also use the Git tab as shown in Extension: Use Git Tab\n\n9.1 Authenticating with GitHub\nGitHub will ask for authentication the first time you connect to a GitHub repository on a computer:\n\n\n\n\n\n\nFigure 8: GitHub asking for authentication\n\n\n\nWhen you click Sign in with your browser, your default browser will open to the GitHub login page.\n \nAfter you login you will get an Authentication Successful window:\n\n\n\n\n\n\nFigure 9: The Authentication Successful window",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01b: Git and GitHub Setup"
    ]
  },
  {
    "objectID": "lessons/01b-GitAndGitHubSetup.html#verifying-the-change-on-github",
    "href": "lessons/01b-GitAndGitHubSetup.html#verifying-the-change-on-github",
    "title": "01b: Git and GitHub Setup",
    "section": "10 Verifying the change on GitHub",
    "text": "10 Verifying the change on GitHub\nLet’s go to your GitHub account to verify that the project files are there (Figure 10):\n\nLog in to GitHub\nOn the left side, there is a section called Repositories. \nClick on the repository called &lt;your-user-name&gt;/&lt;your-repository-name&gt;\nChoose the Code tab (you are probably already on it)\n\n \nYou should notice that the files changed in the newest Commit have your Commit message attached (my Commit message: “A message about…”) and the last commit for these files is recent (in this case: 9 minutes). \n\n\n\n\n\n\nFigure 10: GitHub after a new Commit was pushed",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01b: Git and GitHub Setup"
    ]
  },
  {
    "objectID": "lessons/01b-GitAndGitHubSetup.html#application",
    "href": "lessons/01b-GitAndGitHubSetup.html#application",
    "title": "01b: Git and GitHub Setup",
    "section": "11 Application",
    "text": "11 Application\nA) Append to the top of your app01.r the Questions to answer for this lesson.\nB) Send the change to GitHub by executing these lines in the Terminal:\ngit add -A\ngit commit -m \"Finished lesson 1b application\"\ngit push -u origin main\nAlternatively, you can use the Git tab: Extension: Use Git Tab\n \n\nC) Inform your instructor the application is done by creating an Issue:\n\n\nClick on Issues (top of page)\nClick on New Issue (green button – not pictured)\nClick on Setting wheel and add the instructor as an assignee (belinskyc)\nPut in title that application 1b is finished, add anything you want to the description, and\nClick Submit new issue\n\n\n\n\n\n\n\nFigure 11: Creating an Issue in GitHub\n\n\n\n\n11.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01b: Git and GitHub Setup"
    ]
  },
  {
    "objectID": "lessons/01b-GitAndGitHubSetup.html#extension-use-git-tab",
    "href": "lessons/01b-GitAndGitHubSetup.html#extension-use-git-tab",
    "title": "01b: Git and GitHub Setup",
    "section": "12 Extension: Use Git Tab",
    "text": "12 Extension: Use Git Tab\nThe Git tab can be used to sync changes from your Project Folder to your GitHub repository.\n\nIn the Git tab, click Commit and the RStudio Review Changes window appears\nOn the left, check the files you want to sync with your GitHub repository (you do not have to check all of them)\nOn the right side, put a message in that describes the changes\nClick Commit in the lower right\nClose the window that pops up (not pictured)\nclick Push in the upper-right\nClose the windows\n\n\n\n\n\n\n\nFigure 12: Using the Git tab to sync with your Github repository",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "01b: Git and GitHub Setup"
    ]
  },
  {
    "objectID": "lessons/03-MappingAndAesthetics.html",
    "href": "lessons/03-MappingAndAesthetics.html",
    "title": "03: Mapping And Aesthetics",
    "section": "",
    "text": "Discuss code spacing\nMap data to the x and y axis\nMap data to other properties of the plot (e.g., size, alpha, color) \nCreate a linear regression\n\n\n\nThe script used in this lesson is here\n\nSave the R file, called lesson03-Aesthetics.R to the scripts folder inside your RStudio Project\n\n \nThe data, same as previous lessons, Lansing weather in 2016 is here\n\nSave the CSV file, called Lansing2016Data.csv to the data folder inside your RStudio Project. \nIt is best to use the operating system’s File Explorer/Finder to move the CSV file to the proper folder.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "03: Mapping And Aesthetics"
    ]
  },
  {
    "objectID": "lessons/03-MappingAndAesthetics.html#purpose",
    "href": "lessons/03-MappingAndAesthetics.html#purpose",
    "title": "03: Mapping And Aesthetics",
    "section": "",
    "text": "Discuss code spacing\nMap data to the x and y axis\nMap data to other properties of the plot (e.g., size, alpha, color) \nCreate a linear regression\n\n\n\nThe script used in this lesson is here\n\nSave the R file, called lesson03-Aesthetics.R to the scripts folder inside your RStudio Project\n\n \nThe data, same as previous lessons, Lansing weather in 2016 is here\n\nSave the CSV file, called Lansing2016Data.csv to the data folder inside your RStudio Project. \nIt is best to use the operating system’s File Explorer/Finder to move the CSV file to the proper folder.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "03: Mapping And Aesthetics"
    ]
  },
  {
    "objectID": "lessons/03-MappingAndAesthetics.html#spacing-of-code",
    "href": "lessons/03-MappingAndAesthetics.html#spacing-of-code",
    "title": "03: Mapping And Aesthetics",
    "section": "2 Spacing of code",
    "text": "2 Spacing of code\nAs you can imagine, the code for a GGPlot can get quite large and cumbersome.  Because of this, it is vital to space the code in a way that makes it readable to the user (including yourself).  There is no official way to do this but my method is to line up the components and the subcomponents and to give each subcomponent its own line.  This is a standard I will ask you to follow in this class.\n \nThe last example from the last lesson shows the subcomponents (i.e., arguments) highlighted:\n  #### Part 1: Last lesson's plot ####\n  plot1 = ggplot( data=weatherData ) +\n    geom_point( «mapping»=aes(x=avgTemp, y=relHum) ) +\n    labs( «title»=\"Humidity vs Temperature\",\n          «subtitle»=\"Lansing, MI -- 2016\",\n          «x» = \"Average Temperatures (Fahrenheit)\",\n          «y» = \"Relative Humidity\") +\n    scale_x_continuous( «breaks» = seq(from=10, to=80, by=10) ) +\n    theme_bw() +   # has no subcomponents\n    theme( «axis.text.x»=element_text(angle=90, vjust=0.5) );\n  plot(plot1);\n\n\n\n\n\n\nFigure 1: Plot from last showing components (on each line) and subcomponents (highlighted)\n\n\n\n\n2.1 Spacing does not matter to R\nR, like most programming languages, gives you a lot of flexibility when it comes to spacing code.  The code below is functionally the same as the previous code and, when Sourced, will produce the exact same plot:\n  #### Part 2: Same plot with awful code spacing. «Please don't do this.»  ####\n  plot2 = ggplot( data=weatherData ) + geom_point( mapping=aes(x=avgTemp, \ny=relHum) ) + labs( title=\"Humidity vs Temperature\", subtitle=\"Lansing, MI -- 2016\",\nx = \"Average Temperatures (Fahrenheit)\", y = \"Relative Humidity\") +\n    scale_x_continuous( breaks = seq(from=10, to=80, by=10) ) + theme_bw() +\n theme( axis.text.x=element_text(angle=90, vjust=0.5) );  plot(plot2);\nBut, I would hate to ever have to read or modify the code above!\n\n\n\n\n\n\nFigure 2: Both GGPlot codeblocks above produce the same plot",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "03: Mapping And Aesthetics"
    ]
  },
  {
    "objectID": "lessons/03-MappingAndAesthetics.html#mapping-and-aesthetics",
    "href": "lessons/03-MappingAndAesthetics.html#mapping-and-aesthetics",
    "title": "03: Mapping And Aesthetics",
    "section": "3 Mapping and aesthetics",
    "text": "3 Mapping and aesthetics\nAlmost every plot will have an aes() function that maps data to a component of the plot.  In the previous example the mapping is:\ngeom_point( «mapping»=aes(x=avgTemp, y=relHum) )\nThe line above tells GGPlot to map the column avgTemp to the x-axis and map the column relHum to the y-axis.  The function, aes(), stands for aesthetics.  I find the argument name, mapping, to be much more intuitive than the function name, aes().\n \naes() maps data (often a column from a data frame) to a component of the plot.  And there many more components of the plot that we can map data to – the most common ones are size, color, and shape.  We will first take a look at color.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "03: Mapping And Aesthetics"
    ]
  },
  {
    "objectID": "lessons/03-MappingAndAesthetics.html#mapping-color-to-the-plot",
    "href": "lessons/03-MappingAndAesthetics.html#mapping-color-to-the-plot",
    "title": "03: Mapping And Aesthetics",
    "section": "4 Mapping color to the plot",
    "text": "4 Mapping color to the plot\nWe have a humidity vs. temperature plot but we might want to add more data (i.e., another dimension) to this plot, like season.  Since there are just four seasons, one way to do it is to represent each season with a different color.  The four seasons can be mapped on to the existing plot using the mapping color.\n  #### Part 3: adding color to represent season ####\n  plot3 = ggplot( data=weatherData ) +\n    geom_point( mapping=aes(x=avgTemp, y=relHum, «color=season») ) +\n    labs( title=\"Humidity vs Temperature\",\n          subtitle=\"Lansing, MI -- 2016\",\n          x = \"Average Temperatures (Fahrenheit)\",\n          y = \"Relative Humidity\") +\n    scale_x_continuous( breaks = seq(from=10, to=80, by=10) ) +\n    theme_bw() +\n    theme( axis.text.x=element_text(angle=90, vjust=0.5) );\n  plot(plot3);\nNow the plot has an added dimension: point colors that represent season:\n\n\n\n\n\n\nFigure 3: Mapping season to the color of the point in the scatterplot\n\n\n\nNote: For those of you thinking that winter is much drier than summer – you are correct, but the plot gives relative humidity – not total moisture in the air.\n\n4.1 Legend and mapping\nWhenever you put a mapping in to GGPlot beyond x and y, GGPlot will create a legend for that mapping.  In Figure 3 the legend gives the colors for each season, and the title of the legend (season) is the column name.  Summer days (colored blue) is clearly on the high end of the temperature axis, where winter (colored purple) is on the low end.\n \nEverything in the legend can be modified, something we will do next lesson.\n\n\n4.2 Mapping color using numeric values\nseason is a string value with four distinct values, or categories: Summer, Fall, Winter, and Spring.  A small number of discrete values maps well to color.\n \nContinuous values can also be mapped to color –  GGPlot will create a gradient of colors to handle the continuous values.  For instance, if we use the precip2 column, which gives precipitation in inches and goes from 0 to about 1.5, we get a default blue gradient of colors to represent the values:\n#### Part 3b: adding color to represent precipitation ####\n  plot3 = ggplot( data=weatherData ) +\n    geom_point( mapping=aes(x=avgTemp, y=relHum, «color=preicp2») ) +\n    labs( title=\"Humidity vs Temperature\",\n          subtitle=\"Lansing, MI -- 2016\",\n          x = \"Average Temperatures (Fahrenheit)\",\n          y = \"Relative Humidity\") +\n    scale_x_continuous( breaks = seq(from=10, to=80, by=10) ) +\n    theme_bw() +\n    theme( axis.text.x=element_text(angle=90, vjust=0.5) );\n  plot(plot3b);\nSince most of the precip2 values are 0.1 or less, most of the points are on the dark side of the gradient.  There are only a few light blue points on the plot, represent the days with 1 inch or more or rain.\n\n\n\n\n\n\nFigure 4: Mapping a numeric value to color – this creates a gradient\n\n\n\n\n\n4.3 Mapping colors to numerous string values\nSometimes columns that look numeric are not treated as numeric – this is because they contain some string values.  In R, if a vector/column has one string value, the whole vector/column is treated as a string.  For instance, the precip column uses T to indicate a trace of precipitation (less than 0.01 inch).  We can see “T” values if we look at the first 10 values of precip.\n&gt; weatherData$precip[1:10]\n [1] \"0.04\" \"0.00\" \"T\"    \"T\"    \"0.00\" \"0.00\" \"0.00\" \"0.15\" \"0.53\" \"0.18\"\nIf we try to map precip to color, GGPlot treats each unique “string” value as distinct and discrete value, creating a very busy legend:\n\n\n\n\n\n\nFigure 5: Mapping a column with numerous “string” values",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "03: Mapping And Aesthetics"
    ]
  },
  {
    "objectID": "lessons/03-MappingAndAesthetics.html#mapping-size-to-the-plot",
    "href": "lessons/03-MappingAndAesthetics.html#mapping-size-to-the-plot",
    "title": "03: Mapping And Aesthetics",
    "section": "5 Mapping size to the plot",
    "text": "5 Mapping size to the plot\nThe values in precip2 are probably better represented by size than color.  We can map the precipitation on to the size of the points on the plot by using the size mapping:\n  #### Part 4: adding size to represent precipitation ####\n  plot4 = ggplot( data=weatherData ) +\n    geom_point( mapping=aes(x=avgTemp, y=relHum, size=«precip2») ) +\n    labs( title=\"Humidity vs Temperature\",\n          subtitle=\"Lansing, MI -- 2016\",\n          x = \"Average Temperatures (Fahrenheit)\",\n          y = \"Relative Humidity\") +\n    scale_x_continuous( breaks = seq(from=10, to=80, by=10) ) +\n    theme_bw() +\n    theme( axis.text.x=element_text(angle=90, vjust=0.5) );\n  plot(plot4);\nAgain, anytime you map something other than x or y,  GGPlot creates a legend.  The title on the legend is precip2 because the column’s name is precip2.\n \nNote: GGPlot does not directly translate the precip2 values to size, otherwise half of the values would be 0 since half the days had no precipitation.\n\n\n\n\n\n\nFigure 6: Mapping the precipitation to the size of the points\n\n\n\n\n5.1 Mapping size to a string value\nYou can also map size to a string value, like season, but discrete values generally do not work with size:\n  #### Part 4b: adding size to represent precipitation ####\n  plot4b = ggplot( data=weatherData ) +\n    geom_point( mapping=aes(x=avgTemp, y=relHum, «size=season») ) +\n    labs( title=\"Humidity vs Temperature\",\n          subtitle=\"Lansing, MI -- 2016\",\n          x = \"Average Temperatures (Fahrenheit)\",\n          y = \"Relative Humidity\") +\n    scale_x_continuous( breaks = seq(from=10, to=80, by=10) ) +\n    theme_bw() +\n    theme( axis.text.x=element_text(angle=90, vjust=0.5) );\n  plot(plot4b);\nAnd you will also get this warning message in the Console from GGPlot: \nUsing size for a discrete variable is not advised. \n\n\n\n\n\n\nFigure 7: Mapping size to a string value",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "03: Mapping And Aesthetics"
    ]
  },
  {
    "objectID": "lessons/03-MappingAndAesthetics.html#mapping-alpha",
    "href": "lessons/03-MappingAndAesthetics.html#mapping-alpha",
    "title": "03: Mapping And Aesthetics",
    "section": "6 Mapping alpha",
    "text": "6 Mapping alpha\nAlpha measures the transparency of an object and is often used to help deal with overlapping object or when the plot is too busy.  When you map alpha to a numeric value, the lowest value will be mapped to an alpha of almost0 (i.e., almost transparent) and the highest value will be mapped to an alpha of 1 (i.e., completely opaque), with in-between values mapped between 0 and 1.\n \nWe can map the precipitation column, precip2, to alpha:\n  plot4c = ggplot( data=weatherData ) +\n    geom_point( mapping=aes(x=avgTemp, y=relHum, «alpha=precip2») ) +\n    labs( title=\"Humidity vs Temperature\",\n          subtitle=\"Lansing, MI -- 2016\",\n          x = \"Average Temperatures (Fahrenheit)\",\n          y = \"Relative Humidity\") +\n    scale_x_continuous( breaks = seq(from=10, to=80, by=10) ) +\n    theme_bw() +\n    theme( axis.text.x=element_text(angle=90, vjust=0.5) );\n  plot(plot4c);\nAnd, because most of the values are near zero, the plot looks less busy:\n\n\n\n\n\n\nFigure 8: Mapping alpha to a numeric value",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "03: Mapping And Aesthetics"
    ]
  },
  {
    "objectID": "lessons/03-MappingAndAesthetics.html#legend-title-and-position",
    "href": "lessons/03-MappingAndAesthetics.html#legend-title-and-position",
    "title": "03: Mapping And Aesthetics",
    "section": "7 Legend title and position",
    "text": "7 Legend title and position\nBy default, the title of the legend is the same as the mapping – in all the cases above, the title is the column name.  So, alpha=precip2 means the title of the legend will default to precip2.  The legend title can be changed in labs() by setting the mapping name (in this case, alpha) to the title you want:\n    labs( title=\"Humidity vs Temperature\",\n          subtitle=\"Lansing, MI -- 2016\",\n          x = \"Average Temperatures (Fahrenheit)\",\n          y = \"Relative Humidity\",\n          «alpha = \"Precipitation\"») +\nThe position of the legend can be changed using the legend.position subcomponent (argument) in theme().  The value of legend.position is set to a two value vector with values from 0 to 1.  The first value represents the x-position of the legend, the second values represents the y-position:\n    theme( axis.text.x=element_text(angle=90, vjust=0.5),\n           «legend.position = c(0.15, 0.2)»);  # x=0.15, y=0.2\nPutting the title and position together with the rest of the plot:\n  plot5 = ggplot( data=weatherData ) +\n    geom_point( mapping=aes(x=avgTemp, y=relHum, alpha=precip2) ) +\n    labs( title=\"Humidity vs Temperature\",\n          subtitle=\"Lansing, MI -- 2016\",\n          x = \"Average Temperatures (Fahrenheit)\",\n          y = \"Relative Humidity\",\n          «alpha = \"Precipitation\"») +\n    scale_x_continuous( breaks = seq(from=10, to=80, by=10) ) +\n    theme_bw() +\n    theme( axis.text.x=element_text(angle=90, vjust=0.5),\n           «legend.position = c(0.15, 0.2)»);  # x=0.15, y=0.2\n  plot(plot5);\nNote: theme() must come after theme_bw(), otherwise the changes will be overwritten by theme_bw()\n\n\n\n\n\n\nFigure 9: Changing the legend’s title and position",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "03: Mapping And Aesthetics"
    ]
  },
  {
    "objectID": "lessons/03-MappingAndAesthetics.html#multiple-mappings",
    "href": "lessons/03-MappingAndAesthetics.html#multiple-mappings",
    "title": "03: Mapping And Aesthetics",
    "section": "8 Multiple mappings",
    "text": "8 Multiple mappings\nWe can using multiple mappings to add more dimensions to the plot. For instance, we can map season to color and map precip2 to size on the same plot.\n \nThe titles on the legend for size and precip2 can also be changed in labs():\n  plot6 = ggplot( data=weatherData ) +\n    geom_point( mapping=aes(x=avgTemp, y=relHum, «size=precip2, color=season») ) +\n    labs( title=\"Humidity vs Temperature\",\n          subtitle=\"Lansing, MI -- 2016\",\n          x = \"Average Temperatures (Fahrenheit)\",\n          y = \"Relative Humidity\",\n          «size = \"Precipitation\"»,\n          «color = \"Seasons\"») +    # changes order\n    scale_x_continuous( breaks = seq(from=10, to=80, by=10) ) +\n    theme_bw() +\n    theme( axis.text.x=element_text(angle=90, vjust=0.5) ,\n           legend.position = \"left\");\n  plot(plot6);\n\n\n\n\n\n\nFigure 10: Using both size and color in the mapping\n\n\n\n\n8.1 Setting legend to a fixed position\nOne other change to the plot in ?@fig-sizeAndColorwas to move the legend to the left side of the plot:\n    theme( axis.text.x=element_text(angle=90, vjust=0.5) ,\n           «legend.position = \"left\"»);\nYou can either set the position of the legend to either:\n\nan x,y coordinate or\nthe fixed values: “top”, “bottom”, “right”, or “left”\n\n \nIf you want to remove the legend, then set legend.position = “none”, which will be done in the next plot.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "03: Mapping And Aesthetics"
    ]
  },
  {
    "objectID": "lessons/03-MappingAndAesthetics.html#adding-a-linear-models",
    "href": "lessons/03-MappingAndAesthetics.html#adding-a-linear-models",
    "title": "03: Mapping And Aesthetics",
    "section": "9 Adding a linear models",
    "text": "9 Adding a linear models\nNext, we will add a regression line to the canvas.  GGPlot calls its plotting component geoms, and the geom to use is geom_smooth().\n \nSince geom_smooth() adds data to the plot area, we need to use the mapping subcomponent to tell GGPlot what data is being mapped to the plot area and how. In this case we are mapping relHum vs. avgTemp.\n \nWe also add the method subcomponent to geom_smooth() to set the smoothing method we will use on the data.  In this case, linear model (lm).\n  #### Part 7: adding a linear model ####\n  plot7 = ggplot( data=weatherData ) +\n    geom_point( mapping=aes(x=avgTemp, y=relHum, size=precip2, color=season) ) +\n    «geom_smooth( mapping=aes(x=avgTemp, y=relHum),» \n                « method=\"lm\"» ) +\n    labs( title=\"Humidity vs Temperature\",\n          subtitle=\"Lansing, MI -- 2016\",\n          x = \"Average Temperatures (Fahrenheit)\",\n          y = \"Relative Humidity\",\n          size = \"Precipitation\",\n          color = \"Seasons\") +    # changes order\n    scale_x_continuous( breaks = seq(from=10, to=80, by=10) ) +\n    theme_bw() +\n    theme( axis.text.x=element_text(angle=90, vjust=0.5) ,\n           «legend.position = \"none\"»);  # get rid of legend\n  plot(plot7);\n\n\n\n\n\n\nFigure 11: Adding a linear model – and removing the legend\n\n\n\n\n9.1 Overlapping plots\nWhen two plots overlap, as the linear model and the scatterplot do in Figure 11, the component that is later in the ggplot() call overlaps the earlier component.  So, in the above case, the linear model overlaps the scatterplot.  To have the scatterplot overlap the linear model, just switch the two components around:\n  plot8 = ggplot( data=weatherData ) +\n    «geom_smooth»( mapping=aes(x=avgTemp, y=relHum), \n                 method=\"lm\" ) +\n    «geom_point»( mapping=aes(x=avgTemp, y=relHum, size=precip2, color=season) ) +\n    labs( title=\"Humidity vs Temperature\",\n          subtitle=\"Lansing, MI -- 2016\",\n          x = \"Average Temperatures (Fahrenheit)\",\n          y = \"Relative Humidity\",\n          size = \"Precipitation\",\n          color = \"Seasons\") +    # changes order\n    scale_x_continuous( breaks = seq(from=10, to=80, by=10) ) +\n    theme_bw() +\n    theme( axis.text.x=element_text(angle=90, vjust=0.5) ,\n           legend.position = \"none\");\n  plot(plot8);\n\n\n\n\n\n\nFigure 12: Switching the order of the components to change which plot is on top",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "03: Mapping And Aesthetics"
    ]
  },
  {
    "objectID": "lessons/03-MappingAndAesthetics.html#application",
    "href": "lessons/03-MappingAndAesthetics.html#application",
    "title": "03: Mapping And Aesthetics",
    "section": "10 Application",
    "text": "10 Application\n1) For the linear model in the last plot, add a mapping of color=season.\n   In comments in your script:\n        Explain what happens to the plot when you add the mapping color=season to the linear model\n \nNote: the only other meaningful mapping you can make with lines is linetype (try linetype = season)\n \n2) Create a scatterplot that maps the four columns windDir, windSpeed, precip2, and tempDept to a scatterplot\n\nyou choose the mappings\n\nnote: tempDept is how far the temperature was from average\n\nGive a title and label the axes and legend\nChange the theme of the plot\nMove the legend to the area inside the plot with the most whitespace\n\nnote: the size and shape of the legend will be problematic – something we will deal with next lesson\n\n\n \n3) In comments in your script:\n       What patterns can you find in the plot?\n \n4) Create a scatterplot that (somewhat intelligently) makes use of five mappings in one component. \n     Note: shape is a common mapping that was not used in this lesson.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n10.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?\n\n\n\n10.2 Turn in on GitHub\nSave the script as app03.r in your scripts folder, Push the changes to your GitHub repository, create an Issue in GitHub that says you have finished the application and assign the issue to belinskyc.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "03: Mapping And Aesthetics"
    ]
  },
  {
    "objectID": "lessons/05-DateObjectsAndThemes.html",
    "href": "lessons/05-DateObjectsAndThemes.html",
    "title": "05: Date object and themes",
    "section": "",
    "text": "Convert values to date format\nDisplay Dates in various formats\nCreate a ggplot theme for use in multiple scripts\nChange defaults for plots/geoms\n\n\n\nScripts for this lesson (save both to the scripts folder inside your RStudio Project):\n\nlesson script (lesson05-Dates-Themes.R)\ntheme scripts used in lesson (ggplot_theming.R)\n\n \nThe data for this lesson (Lansing weather in 2016) is here (same as previous lessons)\n\nSave the CSV file, called Lansing2016NOAA.csv to the data folder inside your RStudio Project.\n\n \nIn the lesson script, there is one line added to the header code:\nsource(file=\"scripts/ggplot_theming.r\");\nThis line includes the code for user-created GGPlot themes that will be used later in the lesson",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "05: Date object and themes"
    ]
  },
  {
    "objectID": "lessons/05-DateObjectsAndThemes.html#purpose",
    "href": "lessons/05-DateObjectsAndThemes.html#purpose",
    "title": "05: Date object and themes",
    "section": "",
    "text": "Convert values to date format\nDisplay Dates in various formats\nCreate a ggplot theme for use in multiple scripts\nChange defaults for plots/geoms\n\n\n\nScripts for this lesson (save both to the scripts folder inside your RStudio Project):\n\nlesson script (lesson05-Dates-Themes.R)\ntheme scripts used in lesson (ggplot_theming.R)\n\n \nThe data for this lesson (Lansing weather in 2016) is here (same as previous lessons)\n\nSave the CSV file, called Lansing2016NOAA.csv to the data folder inside your RStudio Project.\n\n \nIn the lesson script, there is one line added to the header code:\nsource(file=\"scripts/ggplot_theming.r\");\nThis line includes the code for user-created GGPlot themes that will be used later in the lesson",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "05: Date object and themes"
    ]
  },
  {
    "objectID": "lessons/05-DateObjectsAndThemes.html#get-data",
    "href": "lessons/05-DateObjectsAndThemes.html#get-data",
    "title": "05: Date object and themes",
    "section": "2 Get data",
    "text": "2 Get data\nLet’s again use the weather data from the file LansingNOAA2016.csv and save it to a data frame called weatherData ( Figure 1 ):\nweatherData = read.csv(file=\"data/LansingNOAA2016.csv\",\n                       stringsAsFactors = FALSE);\n…and look back at one of the plots from last lesson, where we plotted the high, low, and average temperatures for the whole year:\n  plot1 = ggplot(data=weatherData) +\n    geom_line(mapping=aes(x=«1:nrow(weatherData)», y=maxTemp),\n              color=\"violetred1\") +\n    geom_line(mapping=aes(x=«1:nrow(weatherData)», y=minTemp),\n              color=rgb(red=0.4, green=0.7, blue=0.9)) +\n    geom_smooth(mapping=aes(x=«1:nrow(weatherData)», y=avgTemp),\n                method=\"loess\",\n                color=rgb(red=1, green=0.5, blue=0), # orange\n                linetype=4,\n                linewidth=2,\n                fill=\"lightgreen\") +\n    theme_bw() +\n    labs(title = \"Temperature throughout the year\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Day (row) number\",\n         y = \"Temperature (F)\");\n  plot(plot1);\n\n\n\n\n\n\nFigure 1: High, low, and average temperature throughout the year.\n\n\n\n\n2.1 Creating a date value\nOn the x-axis we kind of cheated and used the row number to represent the day (1:nrow(weatherData)) instead of the actual date.  This is because displaying dates in GGPlot is tricky.\n \nThe first thing to notice is that, while weatherData has a column named date, the column is not actually in Date format.  The date column is in character (or string) format:\n&gt; typeof(weatherData$date)\n[1] \"character\"\nLooking at the date column in a Viewer tab can see the date is not properly formatted (mostly because it does not have a year):\n\n\n\n\n\n\nFigure 2: weatherData data frame, note that the date column has only the month and day (no year)\n\n\n\nGGPlot (and R in general) will only treat a data column as Date values if:\n\nthe values in the column are properly formed (i.e., the values have a month, date, and year) and\nthe column is explicitly declared as a Date variable. \n\n \nOtherwise, GGPlot will treat the column as string (character) values.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "05: Date object and themes"
    ]
  },
  {
    "objectID": "lessons/05-DateObjectsAndThemes.html#adding-the-year-to-the-date-values",
    "href": "lessons/05-DateObjectsAndThemes.html#adding-the-year-to-the-date-values",
    "title": "05: Date object and themes",
    "section": "3 Adding the year to the date values",
    "text": "3 Adding the year to the date values\nWe are going to create a new column in weatherData that has properly formatted date values.  Sinceit is generally not a good idea to directly modify values in a data frame, we are going to make a copy of the date column, called dateYr, and modify the dateYr column instead.\n \nThis process will be broken into four steps: \n\nSave the date column in weatherData to a vector\nAppend the year 2016 to all values in the vector\nConvert the vector into a Date vector\nSave the vector back to the data frame as the column dateYr\n\n \nNote: There are quicker ways to do this but it is important to understand the individual steps.\n\n3.1 Save the date column to a vector\nThere are multiple ways in R to save a column in a data frame to a vector.  Three ways are given below, the last two are commented out but they will produce the same results:\n#### Part 1: Add year to date values ####\n# a) save the date vector from the data frame to the variable theDate\ntheDate1 = weatherData$date;         # get all values from the dates column\n# theDate1 = weatherData[[\"date\"]];  # equivalent to previous line\\\n# theDate1 = weatherData[ , \"date\"]; # equivalent to previous 2 lines in base R\nI choose to use the first method, which uses $ to subset weatherData, for two reasons:\n\nWhen you type in $ after weatherData, RStudio will suggest a list of column names from weatherData\n$ works for both R data frames and the TidyVerse version of a dataframe called a tibble\n\nExtension: R data frames and TidyVerse tibbles\n \nIf we look at the Environment, we can see theDate1 is a character vector with 366 values:\ntheDate1 chr[1:366] \"01-01\" \"01-02\" \"01-03\" ...\nExtension: Getting a range of values in a column\n\n\n3.2 Append the year to the date\nNow we want to append, or paste,the year on to every date value in the string vector theDate1. \nWe will use paste() and there are three arguments to set:\n\nThe initial values: theDate\nThe value being appended or pasted: “-2016”\nThe separator between initial and pasted values: in this case, an empty string, “”\n\nnote: the default value for sep is a space\n\n\n# append (paste) \"-2016\" to all values in theDate1\ntheDate2 = paste(theDate1, \"-2016\", sep=\"\");\nExtension: more about paste() and the reason why argument names are not used for the first two values\n\nNow every value has a year attached to it:\n\n\n\ntheDate2    chr[1:366] \"01-01-2016\" \"01-02-2016\" \"01-03-2016\" ...\n\n\nFigure 3: Pasting the year to all values in the vector\n\n\n\n\n\n3.3 Convert the vector into a date vector\ntheDate2 has values that look like proper dates but R still sees the values in theDate2 as strings (or chr) not Date.\n \nTo convert the values to Date, values we need to tell R:\n\nthat the vector contains dates and\nhow the date values are formatted\n\n \nWe can do both using as.Date(), and modifying two arguments:\n\nthe object we want to convert to dates (in this case, the vector theDate2)\nthe format that the dates are in, which is: %m-%d-%y\n\n%m: 2-digit month (01 through 12)\n-: dash used to separate month from day\n%d: 2-digit date (01 through 31)\n-: dash used to separate day from year\n%Y: 4-digit year (2016) \n\nTrap: using the wrong argument for year (lowercase y vs. capital Y)\n\n\n\n# c) Save the values in Date format\ntheDate3 = as.Date(theDate2, format=\"%m-%d-%Y\");\nNow, R recognizes the values in the vector as Dates:\ntheDate3    Date[1:366] format: \"2016-01-01\" \"2016-01-02\" \"2016-01-03\" ...\nnote: The Environment always shows Date values in R’s standard date format (YYYY-MM-DD),  which is not the same as the format we used to create the date.\n\n3.3.1 Date formats and conversion specifications\nThe official term for the representation of the different parts of the Date (e.g., %m, %d, %Y)is conversion specifications, which you can find here under the details section: https://stat.ethz.ch/R-manual/R-devel/library/base/html/strptime.html\n \nThis includes all the different specification for time (e.g., hours, minutes), most of which are not used in this lesson.  A more concise conversion specification sheet for this lesson, which only includes specifications for dates can be found here.\n \nThe conversion specifications allow you to generalize the different components of the date – and all generalized components start with a %.  When you declare the format of a datetime string, you replace the date and time components of the string with conversion specifications.  For instance, April 15, ’22 would have the conversion specification:  “%B %d, ’%y” where:\n\n%B: Full month name\n%d: 2-digit date \n%y: 2-digit year \n\n \nThe conversion specification has the Date components (month, date, and year) and the other characters in the string (multiple spaces, comma, and apostrophe).\n \nSo, April - 15 - 22 would have the conversion specification: “%B - %d - %y”.\n \nSome other specifications:\n\n%m: Month – given as a number between 00 and 12\n%a: Abbreviated weekday (Mon, Tue, Wed…)\n%y: Last two digits of the year\n%Y: Full year\n\n\n\n\n3.4 Save the date vector to the data frame\nWe have the vector in Date format, now we need to save the values back to a new column in the data frame.  This is pretty much the reverse of the first step and, again, there are multiple ways to do it – I present three ways and comment out the last two.\n \nIn each case, we are saving theDate to the column in weatherData called dateYr:\n# d) Save theDate back to the data frame as a new column\nweatherData$dateYr = theDate3;\n# weatherData[[\"dateYr\"]] = theDate3; # equivalent to previous line\n# weatherData[, \"dateYr\"] = theDate3; # equivalent to previous 2 lines using data frames\n\n\n\n\n\n\nFigure 4: The data frame now has a new column, dateYr, with properly formatted dates\n\n\n\n \nWe now have a column with properly formatted date values, we can go back to plotting the data….",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "05: Date object and themes"
    ]
  },
  {
    "objectID": "lessons/05-DateObjectsAndThemes.html#using-date-values",
    "href": "lessons/05-DateObjectsAndThemes.html#using-date-values",
    "title": "05: Date object and themes",
    "section": "4 Using date values",
    "text": "4 Using date values\nThe only change from the first plot is that we are using the new dateYr column, which is in Date format, instead of using row numbers for the x-axis mappings:\n#### Part 2: Use Dates on x-axis ###\n  plot2 = ggplot(data=weatherData) +\n    geom_line(mapping=aes(x=«dateYr», y=maxTemp),\n              color=\"violetred1\") +\n    geom_line(mapping=aes(x=«dateYr», y=minTemp),\n              color=rgb(red=0.4, green=0.7, blue=0.9)) +\n    geom_smooth(mapping=aes(x=«dateYr», y=avgTemp),\n                method=\"loess\",\n                color=rgb(red=1, green=0.5, blue=0), # orange\n                linetype=4,\n                lenwidth=2,\n                fill=\"lightgreen\") +\n    theme_bw() +\n    labs(title = \"Temperature throughout the year\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Day (row) number\",\n         y = \"Temperature (F)\");\n  plot(plot2);\n\n\n\n\n\n\nFigure 5: The x-axis now has date values instead of numeric\n\n\n\n\n4.1 The repeated date values\nSince all three plots, or geomsas GGPlot calls them, use dateYr for the x-axis, we can move the x-axis mapping to ggplot(). This says that all geoms will use dateYr as the x mapping.  and we do not have to declare an x-mapping in the individual geoms:\n  #### Part 3: Move x to canvas --\n  ###   only works because EVERY geom uses dateYr\n  plot3= ggplot(data=weatherData, «mapping=aes(x=dateYr)») +  # x mapping here\n    geom_line(mapping=aes(y=maxTemp),     # no x mapping here  \n              color=\"violetred1\") +\n    geom_line(mapping=aes(y=minTemp),     # no x mapping here\n              color=rgb(red=0.4, green=0.7, blue=0.9)) +\n    geom_smooth(mapping=aes(y=avgTemp),   # no x mapping here\n                method=\"loess\",\n                color=rgb(red=1, green=0.5, blue=0), # orange\n                linetype=4,\n                linewidth=2,\n                fill=\"lightgreen\") +\n    theme_bw() +\n    labs(title = \"Temperature throughout the year\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Day (row) number\",\n         y = \"Temperature (F)\");\n  plot(plot3);\nAnd the plot is exactly the same.  Moving the x-mapping to ggplot() works because the x-axis mapping is the same for every geom in the canvas.\n\n\n\n\n\n\nFigure 6: Moving the x-axis to the canvas does not change the plot\n\n\n\n\n\n4.2 Using scale component to modify date axis (proper GGPlot method)\nGGPlot, by default, displays Date values as abbreviated months and four-digit years (e.g., Jan 2016, Apr 2016) as shown in Figure 6 .\n \nIf you want to change how the dates are displayed, you need to use scale components and conversion specifications.  scale components, which we will explore much more in the next lesson, are used in GGPlot to modify the visual aspects of the axes without changing the data.  In this case, we are visually changing the way dates are displayed.\n \nThe scale component to modify date values on the x-axis is: scale_x_date\n\n\n\n\n\n\nFigure 7: scale_x_date Help page – scroll down to see a description of the subcomponents\n\n\n\n \nAnd we are going to modify two subcomponents in scale_x_date:\n\ndate_breaks: The distance between axis lines – we will use 5 weeks\ndate_labels: The formatting of the date – using conversion specifications\n\n we will use abbreviated months (%b), two-digit days (%d), and two-digit years (%y) (e.g., Apr 15, ’22)\n\n\n #### Part 5: Convert date format and date breaks\n  plot5= ggplot(data=weatherData, mapping=aes(x=dateYr)) +\n    geom_line(mapping=aes(y=maxTemp),\n              color=\"violetred1\") +\n    geom_line(mapping=aes(y=minTemp),\n              color=rgb(red=0.4, green=0.7, blue=0.9)) +\n    geom_smooth(mapping=aes(y=avgTemp),\n                method=\"loess\",\n                color=rgb(red=1, green=0.5, blue=0), # orange\n                linetype=4,\n                linewidth=2,\n                fill=\"lightgreen\") +\n    «scale_x_date(date_breaks = \"5 weeks\",»\n                «date_labels =  \"%b %d, '%y\") +  # uses conversion specifications»\n    theme_bw() +\n    labs(title = \"Temperature throughout the year\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Day (row) number\",\n         y = \"Temperature (F)\");\n  plot(plot5);\n\n\n\n\n\n\nFigure 8: The x-axis has formatted dates at 5-week intervals",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "05: Date object and themes"
    ]
  },
  {
    "objectID": "lessons/05-DateObjectsAndThemes.html#theme-changes-outside-the-plots",
    "href": "lessons/05-DateObjectsAndThemes.html#theme-changes-outside-the-plots",
    "title": "05: Date object and themes",
    "section": "5 theme changes (outside the plots)",
    "text": "5 theme changes (outside the plots)\nNow we are going to use theme() component to modify the canvas area. Remember that theme needs to come after theme_bw() because theme_bw() will override all previous theme changes:\n  #### Part 6: Add theme component\n  plot6= ggplot(data=weatherData, mapping=aes(x=dateYr)) +\n    geom_line(mapping=aes(y=maxTemp),\n              color=\"violetred1\") +\n    geom_line(mapping=aes(y=minTemp),\n              color=rgb(red=0.4, green=0.7, blue=0.9)) +\n    geom_smooth(mapping=aes(y=avgTemp),\n                method=\"loess\",\n                color=rgb(red=1, green=0.5, blue=0), # orange\n                linetype=4,\n                linewidth=2,\n                fill=\"lightgreen\") +\n    scale_x_date(date_breaks = \"5 weeks\",\n                 date_labels =  \"%m/%d\") +\n    theme_bw() +\n    «theme»(panel.background = element_rect(fill=\"grey25\",\n                                          linewidth=2, color=\"grey0\"),\n          panel.grid.minor = element_line(color=\"grey50\", linetype=4),\n          panel.grid.major = element_line(color=\"grey100\"),\n          plot.background = element_rect(fill = \"lightgreen\"),\n          plot.title = element_text(hjust = 0.45),\n          plot.subtitle = element_text(hjust = 0.42),\n          axis.text = element_text(color=\"blue\", family=\"mono\", size=9)) +\n    labs(title = \"Temperature throughout the year\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Day (row) number\",\n         y = \"Temperature (F)\");\n  plot(plot6);\nAnd our new themed plot looks like this:\n\n\n\n\n\n\nFigure 9: Our new (questionably) themed plot\n\n\n\n\n5.1 The Element changes we made \nThe subcomponents we changed in theme were:\n\npanel.background: the background inside the axis lines (rectangular element)\npanel.grid.minor: grid lines for the major axis (line element)\npanel.grid.major: grid lines for the minor axis (line element)\nplot.background: the background outside the plot area (rectangular element)\nplot.title: the text that represents the title of the graph (text element)\nplot.subtitle: the text that represent the subtitle of the graph (text element)\naxis.text: the text that represents the labels on the x and y axes (text element)\n\n \nWe talked about the first three subcomponents in the previous lesson, I will cover a little more about the last four subcomponents…\n \nplot.background is set to a rectangular element (element_rect) with argument:\n\nfill = “lightgreen”: set the background color outside the plot area to light green\n\n \nplot.title is set to a text element (element_text) with argument:\n\nhjust= 0.45: sets the horizontal justification of the text to almost the center\n\n \nnote: hjust has values from 0.0 (left justified text) to 1.0 (right justified text) and 0.5 is centered\n \nplot.subtitle is set to a text element (element_text) with argument:\n\nhjust= 0.42: set the horizontal justification of the text to line up underneath the title\n\n \naxis.text is set to a text element (element_text) that represents the text labels on the x and y axes. \nWe change the arguments:\n\ncolor= “blue”: set the text color to blue\nfamily=“mono”: set the font type to mono\nlinewidth=9: set the font size to 9 pixels\n\n \nIf you want to individually change the x-axis text style or y-axis text style you can use the components: axis.text.x and axis.text.y\n \nNote: Changing the font family to an uncommon font can cause issues because different computers have different fonts installed.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "05: Date object and themes"
    ]
  },
  {
    "objectID": "lessons/05-DateObjectsAndThemes.html#saving-the-theme-for-later-use",
    "href": "lessons/05-DateObjectsAndThemes.html#saving-the-theme-for-later-use",
    "title": "05: Date object and themes",
    "section": "6 Saving the theme for later use",
    "text": "6 Saving the theme for later use\nLet’s say you like this theme and want to use it in other ggplots in other scripts.  To do this, you create your own theme in a separate script file.\n \nIn the scripts folder, I created a new script file named ggplot_theming.R and inside the script file:\n\ncreate a function named theme_ugly()\ncreate an object that contains the new theme (I called the object newTheme)\nset newTheme to the theme changes\n\nIn this case, it is theme_bw() with seven modified subcomponents (just like in Figure 9)\n\nreturn newTheme to the caller of the function\n\n#### 1) create a function with the name of your theme\n«theme_ugly = function()»    \n{\n  #### 2,3) Create an object and include everything from theme_bw()  \n  «newTheme» = theme_bw() +    \n\n  ## then modify theme_bw() with the seven subcomponents below\n    theme(panel.background = element_rect(fill=\"grey25\",\n                                          linewidth=2, color=\"grey0\"),\n          panel.grid.minor = element_line(color=\"grey50\", linetype=4),\n          panel.grid.major = element_line(color=\"grey100\"),\n          plot.background = element_rect(fill = \"lightgreen\"),\n          plot.title = element_text(hjust = 0.45),\n          plot.subtitle = element_text(hjust = 0.42),\n          axis.text = element_text(color=\"blue\", family=\"mono\", size=9));\n  \n  ### 4) Return newTheme to the caller\n  #   You will often see this step skipped -- which is a bad programming practice!\n  return(«newTheme»);\n}\n\n6.1 Using themes from another script\nTo use theme_ugly(), we need to include the theme’s script file in our current script file:\n  source(file=\"themes/ggplot_theming.r\");\ntheme_ugly() is a function that contains information about a theme and returns it to the caller.  We can use theme_ugly() in our ggplot as if it were any other theme:\n  #### Part 7: Use a theme saved elsewhere\n  plot7= ggplot(data=weatherData, mapping=aes(x=dateYr)) +\n    geom_line(mapping=aes(y=maxTemp),\n              color=\"violetred1\") +\n    geom_line(mapping=aes(y=minTemp),\n              color=rgb(red=0.4, green=0.7, blue=0.9)) +\n    geom_smooth(mapping=aes(y=avgTemp),\n                method=\"loess\",\n                color=rgb(red=1, green=0.5, blue=0), # orange\n                linetype=4,\n                linewidth=2,\n                fill=\"lightgreen\") +\n    scale_x_date(date_breaks = \"5 weeks\",\n                 date_labels =  \"%m/%d\") +\n    «theme_ugly() +  # function call to our new theme»\n    labs(title = \"Temperature throughout the year\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Day (row) number\",\n         y = \"Temperature (F)\");\n  plot(plot7);\nAnd the plot looks the same as the last plot (theme_bw with seven modified components):\n\n\n\n\n\n\nFigure 10: Same plot but using theme_ugly() from a script file",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "05: Date object and themes"
    ]
  },
  {
    "objectID": "lessons/05-DateObjectsAndThemes.html#changing-styles-on-plots-geoms",
    "href": "lessons/05-DateObjectsAndThemes.html#changing-styles-on-plots-geoms",
    "title": "05: Date object and themes",
    "section": "7 Changing styles on plots/ geoms",
    "text": "7 Changing styles on plots/ geoms\nThe function theme_ugly() returns a theme() component to the caller.\n \nThe problem is that theme() cannot be used to change styles on plots (i.e., geoms). However, if you are developing a theme that you want to use across all of your plots, there is a good chance you want to define styles for the plots/geoms (e.g., set the default color for geom_line, set a default shape for points in a geom_point, set the background color of a geom_boxplot).\n \nChanging the default style for geoms is tricky in GGPlot because it involves changing the default behavior of GGPlot\n\n7.1 Changing geom behavior\nThe function update_geom_defaults is used to change the default style for geoms in GGPlot.\nI have created a function in ggplot_theming.r called modifyGeoms(), which calls update_geom_defaults three time to modify three different geoms (line, point, and smooth):\nmodifyGeoms = function()\n{ \n  update_geom_defaults(\"line\", list(color = \"yellow\"));\n  update_geom_defaults(\"point\", list(color = \"green\"));\n  update_geom_defaults(\"smooth\", list(color = \"red\",\n                                      linetype=4,\n                                      linewidth=2,\n                                      fill=\"lightblue\"));\n}\nupdate_geom_default needs to be called before you call ggplot().  When modifyGeoms() is called, the default color of geom_line, geom_point will be changed and the the default color, linetype, linewidth, and fill for geom_smooth will be changed.\n  #### Part 7: Include geom defaults in theme \n  «modifyGeoms();»   # function that changes the geoms\n  \n  plot7= ggplot(data=weatherData, mapping=aes(x=dateYr)) +\n    geom_line(mapping=aes(y=maxTemp)) +\n    geom_line(mapping=aes(y=minTemp)) +\n    geom_smooth(mapping=aes(y=avgTemp),\n                method=\"loess\") +\n    scale_x_date(date_breaks = \"5 weeks\",\n                 date_labels = \"%m/%d\") +\n    theme_ugly() +\n    labs(title = \"Temperature throughout the year\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Day (row) number\",\n         y = \"Temperature (F)\");\n  plot(plot7);\nAnd see the changes made by the theme and the update_geom_defaults functions in theme_UglyAdv().  We can still change the color of the lines as we did earlier (Figure 10) – all we did here was change the default color of the lines to yellow.\n\n\n\n\n\n\nFigure 11: A plot that uses the geom and theme changes\n\n\n\n\n\n7.2 Changes to geoms are persistent\nOnce update_geom_default() is called, all subsequent ggplot() will adapt the new defaults in your R session.  This means that every subsequent GGPlot will default to yellow lines in geom_line, green points in geom_point, and four default changes in geom_smooth.\n \nFor the following code, theme_ugly() and modifyGeoms() has been removed:\n  #### Part 8: The defaults in GGPlot have been changed and will persist\n  plot8= ggplot(data=weatherData, mapping=aes(x=dateYr)) +\n    geom_line(mapping=aes(y=maxTemp)) +\n    geom_line(mapping=aes(y=minTemp)) +\n    geom_smooth(mapping=aes(y=avgTemp),\n                method=\"loess\") +\n    scale_x_date(date_breaks = \"5 weeks\",\n                 date_labels =  \"%m/%d\") +\n    labs(title = \"Temperature throughout the year\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Day (row) number\",\n         y = \"Temperature (F)\");\n  plot(plot8); \nThe theme has been removed but the changes to the geoms are still there:\n\n\n\n\n\n\nFigure 12: The changes to the geoms are persistent\n\n\n\n\n\n7.3 Changing back to default behavior\nThe easiest way to change back to the default geom behavior is to reload the ggplot package:\ndetach(\"package:ggplot2\", unload = TRUE);   # unloads ggplot package from session\nlibrary(package=\"ggplot2\");                 # reload package ggplot\n\nThe first line unloads the ggplot2 package from the session\nThe second line reloads the GGPlot package (effectively resetting GGPlot back to defaults).\n\n \nNow the same ggplot(): \n  plot9= ggplot(data=weatherData, mapping=aes(x=dateYr)) +\n    geom_line(mapping=aes(y=maxTemp)) +\n    geom_line(mapping=aes(y=minTemp)) +\n    geom_smooth(mapping=aes(y=avgTemp),\n                method=\"loess\") +\n    scale_x_date(date_breaks = \"5 weeks\",\n                 date_labels =  \"%m/%d\") +\n    labs(title = \"Temperature throughout the year\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Day (row) number\",\n         y = \"Temperature (F)\");\n  plot(plot9); \n…will go back to default behaviors:\n\n\n\n\n\n\nFigure 13: The geoms are back to their default properties",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "05: Date object and themes"
    ]
  },
  {
    "objectID": "lessons/05-DateObjectsAndThemes.html#application",
    "href": "lessons/05-DateObjectsAndThemes.html#application",
    "title": "05: Date object and themes",
    "section": "8 Application",
    "text": "8 Application\n1) Convert this string values into a Date vector: \n\nstringValues = c(“01, January-2019”, “02, January-2019”, “03, January-2019”, “04, January-2019”, “05, January-2019”)\n\n \n2) Create a column in weatherData named newDate that has the dates from the date column in Date format (just like dateYr in the lesson)\n \n3) Make a GGPlot canvas with 4 geoms\n\nscatterplot of heatDays vs newDate\nscatterplot of coolDays vs newDate\nlinear regression of heatDays vs newDate\nlinear regression of coolDays vs newDate\n\n \n4) On the GGPlot from #3:\n\ndisplay dates in this format: (28-Jun-’16)\nheatDay - change to red points and red regression line\ncoolDays - change to blue points and blue regression line\n\n \n5) Using update_geom_defaults(),on the ggplot from #3\n\nchange the point shape to triangles and doubles the size of the points\ndon’t forget to unload the defaults\n\n \n6) Create an external theme that:\n\nright justify the title and subtitle\nmake all fonts (titles and labels) brown and arial\nangles the x and y axis test 45 degrees\n\n \n7) Add the external theme to the ggplot from #3.\n \n8) Create another ggplot that has the same four geoms and a legend mapped to color that contains heatDays and coolDays\n\nnote: you will not be able to maintain the blue and red colors (that will be next lesson)\n\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n8.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?\n\n\n\n8.2 Turn in on GitHub\nSave the script as app05.r in your scripts folder, Push the changes to your GitHub repository, create an Issue in GitHub that says you have finished the application and assign the issue to belinskyc.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "05: Date object and themes"
    ]
  },
  {
    "objectID": "lessons/05-DateObjectsAndThemes.html#extension-getting-a-range-of-values-in-a-column",
    "href": "lessons/05-DateObjectsAndThemes.html#extension-getting-a-range-of-values-in-a-column",
    "title": "05: Date object and themes",
    "section": "9 Extension: Getting a range of values in a column",
    "text": "9 Extension: Getting a range of values in a column\nweatherData[3, \"date\"];   # get the 3rd value from the date column\nweatherData[3:7, \"date\"];   # get the 3rd through 7th values from the date column\nweatherData[seq(from=2, by=2), \"date\");   # get all even values in the date column",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "05: Date object and themes"
    ]
  },
  {
    "objectID": "lessons/05-DateObjectsAndThemes.html#trap-using-the-wrong-argument-for-year",
    "href": "lessons/05-DateObjectsAndThemes.html#trap-using-the-wrong-argument-for-year",
    "title": "05: Date object and themes",
    "section": "10 Trap: Using the wrong argument for year",
    "text": "10 Trap: Using the wrong argument for year\n%Y means that the year is in the 4-digit format, whereas\n%y means that the year is in the 2-digit format\n \nIf you put in the wrong argument value (lowercase y instead of uppercase Y):\ntheDate = as.Date(theDate, format=\"%m-%d-%y\");\nthen you will get an unusual result:\n\n\n\n\n\n\nFigure 14: The year is now 2020 instead of 2016\n\n\n\n \n%y tells R to take the first two values of the number and make that the year.  The first two values of the year 2016 is 20 – so the 16 is dropped.  R then assumes we are in the 21st century so R assumes the year is 2020.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "05: Date object and themes"
    ]
  },
  {
    "objectID": "lessons/05-DateObjectsAndThemes.html#extension-more-about-paste",
    "href": "lessons/05-DateObjectsAndThemes.html#extension-more-about-paste",
    "title": "05: Date object and themes",
    "section": "11 Extension: more about paste()",
    "text": "11 Extension: more about paste()\nThe help page can be accessed in RStudio by going to the Help tab in the lower-left corner and searching for paste.\n \nIf we go to the help page for paste(), it gives the usage for paste() as:\npaste (..., sep = \" \", collapse = NULL)\n( …, ) means that paste() will accept any number of initials values – these are the values that paste() will attempt to paste together. These values do not have a argument name.  When using paste(), you must use argument names for sep and collapse, otherwise paste() will see these value as part of the initial set of values to be pasted together.  There are many functions in R that accept an indeterminate number of unnamed (i.e., no argument name) values at the beginning of a function.\n \nsep = ” ” means the default separator value is one space.  So, if you do not set sep, you will get one space between all the values that paste() is pasting together.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "05: Date object and themes"
    ]
  },
  {
    "objectID": "lessons/05-DateObjectsAndThemes.html#extension-r-data-frames-and-tidyverse-tibbles",
    "href": "lessons/05-DateObjectsAndThemes.html#extension-r-data-frames-and-tidyverse-tibbles",
    "title": "05: Date object and themes",
    "section": "12 Extension: R data frames and tidyverse tibbles",
    "text": "12 Extension: R data frames and tidyverse tibbles\nIn this lesson I introduce three ways to access a column from a data frame and save it to a vector:\n#### Part 1: Add year to date values ####\n# a) save the date vector from the data frame to the variable theDate\ntheDate = weatherData$date;         # get all values from the dates column\n# theDate = weatherData[[\"date\"]];  # equivalent to previous line\n# theDate = weatherData[ , \"date\"]; # equivalent to previous 2 lines in base R\nAll three of these methods are functionally the same on R data frames but they are functionally different if you are working with tibbles, which is a modern take on data frames used by packages in the TidyVerse.\n \nThe first and second methods are the same in R-base and TidyVerse but the third method:\ntheDate = weatherData[ , \"date\"];   # equivalent to previous 2 lines in base R\nwill save the date column as a one-column tibble as opposed to a vector.\n \nThe first method also has the advantage that as soon as you type weatherData$ in RStudio, RStudio will give you suggestions.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "05: Date object and themes"
    ]
  },
  {
    "objectID": "lessons/05-DateObjectsAndThemes.html#formatting-the-date-value-improper-ggplot-method",
    "href": "lessons/05-DateObjectsAndThemes.html#formatting-the-date-value-improper-ggplot-method",
    "title": "05: Date object and themes",
    "section": "13 Formatting the date value (improper GGPlot method)",
    "text": "13 Formatting the date value (improper GGPlot method)\nLet’s say you want the format to be two-digit month/ two-digit day, so April 15 would be 04/15.\nYou could create a formatted vector from the dateYr column:\ndateYrFormatted = format(weatherData$dateYr, format=\"%m/%d\");\nAnd dateYrFormatted has the dates formatted how you want:\ndateYrFormatted    chr[1:366] \"01/01\" \"01/02\" \"01/03\" ...\nBut, dateYrFormatted is still a chr (string) value:\n  plot4= ggplot(data=weatherData, mapping=aes(x=«dateYrFormatted»)) +\n    geom_line(mapping=aes(y=maxTemp),\n              color=\"violetred1\") +\n    geom_line(mapping=aes(y=minTemp),\n              color=rgb(red=0.4, green=0.7, blue=0.9)) +\n    geom_smooth(mapping=aes(y=avgTemp),\n                method=\"loess\",\n                color=rgb(red=1, green=0.5, blue=0), # orange\n                linetype=4,\n                linewidth=2,\n                fill=\"lightgreen\") +\n    theme_bw() +\n    labs(title = \"Temperature throughout the year\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Day (row) number\",\n         y = \"Temperature (F)\");\n  plot(plot4);\nWhen you try to plot this, you will get the warning:\n\n\n\ngeom_path: Each group consists of only one observation. Do you need to adjust the group aesthetic?\n\n\nFigure 15: Using the “character” date values\n\n\n\n \nWhat happened is that GGPlot saw the 366 dates as discrete values and GGplot is trying to show all 366 values on the x-axis (hence, the x-axis looks very crowded).  Each x-axis mapping is associated with one point from the y-axis mapping (observation) – and one point cannot make a line so nothing is shown on the plot.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "05: Date object and themes"
    ]
  },
  {
    "objectID": "lessons/07-Faceting.html",
    "href": "lessons/07-Faceting.html",
    "title": "07: Faceting",
    "section": "",
    "text": "fix application",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "07: Faceting"
    ]
  },
  {
    "objectID": "lessons/07-Faceting.html#purpose",
    "href": "lessons/07-Faceting.html#purpose",
    "title": "07: Faceting",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nBreak up (facet) a plot by rows and column\ncreate a two-dimensional facet\n\n\n1.1 Code for the lesson\nScript for this lesson\n\nSave the R file, called lesson07-FacetingAndBoxplots.R to the scripts folder inside your RStudio Project\n\nThe data for this lesson (Lansing weather in 2016) is here (same as previous lessons)\n\nSave the CSV file, called Lansing2016Data.csv to the data folder inside your RStudio Project.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "07: Faceting"
    ]
  },
  {
    "objectID": "lessons/07-Faceting.html#factoring-data",
    "href": "lessons/07-Faceting.html#factoring-data",
    "title": "07: Faceting",
    "section": "2 Factoring data",
    "text": "2 Factoring data\nLet’s start with the stacked histogram from last lesson where we mapped x to temperature and fill to season – so, a temperature histogram with seasons stacked:\n  #### Part 1: Factoring the values in season ####\n  seasonOrdered = factor(weatherData$season,\n                         levels=c(\"Spring\", \"Summer\", \"Fall\", \"Winter\"));\n \n  #### Histogram with factored seasons ####\n  plot1 = ggplot( data=weatherData ) +\n    geom_histogram( mapping=aes(x=avgTemp, fill=seasonOrdered),\n                    color=\"black\") +  # outline color -- not mapped\n    theme_bw() +\n    scale_fill_manual(values=c(\"lightgreen\", \"pink\", \n                               \"lightyellow\", \"lightblue\")) +\n    labs(title = \"Temperature (\\u00B0F)\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Temperature (\\u00B0F)\",  \n         fill = \"Seasons\");     \n  plot(plot1);\n… and the resulting stacked histogram\n\n\n\n\n\n\nFigure 1: A stacked histogram that maps temperature to the x-axis and seasons to the fill color\n\n\n\n\n2.1 Mapping columns and Environment variables\nIf we look at the first two lines of plot1:\n  plot1 = ggplot( data=«weatherData» ) +\n    geom_histogram( mapping=aes(x=«avgTemp», fill=«seasonOrdered»),\nWe are creating a canvas area with the data frame weatherData.  For the histogram we are mapping the avgTemp column in weatherData to the x-axis and we are mapping the vector seasonOrdered to the fill (i.e., background color).\n \nIn a mapping, GGPlot will first check the data frame initialized in the canvas to see if there is a column with the name mapped and avgTemp is a column in weatherData.\n \nIf there is no column in the data frame with the name mapped then GGPlot will check the Environment.  In the fill mapping, seasonOrdered is not a column in weatherData but seasonOrdered is a variable in the Environment.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "07: Faceting"
    ]
  },
  {
    "objectID": "lessons/07-Faceting.html#faceting",
    "href": "lessons/07-Faceting.html#faceting",
    "title": "07: Faceting",
    "section": "3 Faceting",
    "text": "3 Faceting\nInstead of using a mapping to add more variables to a plot, we can use a facet.  A facet uses a variable to break up the plot area by rows or columns (or both).  Let’s use a facet to add season to the temperature histogram.\n  #### Part 2: Faceting the histogram ####\n  plot2 = ggplot( data=weatherData ) +\n    geom_histogram( mapping=aes(x=avgTemp),\n                    color=\"black\") +  \n    theme_bw() +\n    «facet_grid( rows = vars(season))» +  # vars() needs to use the column\n    labs(title = \"Temperature (\\u00B0F)\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Temperature (\\u00B0F)\");     \n  plot(plot2);\nEach season now has its own row with its own temperature histogram\n\n\n\n\n\n\nFigure 2: Using facets to break out the seasons\n\n\n\n\n3.1 Facets are like mappings \nTo “map” a column using facet_grid, you need to put the column name as an argument in vars().  This code “maps” the season column to rows in the plotting area:\n    facet_grid( rows = vars(season) )\nfacet_grid is buggy and will not reliably use Environment variables like seasonOrdered.  The only way around all the bugs is to save Environment variables to the data frame.  We need to first save seasonOrdered as a column in weatherData before using it is a facet.\n  weatherData$seasonOrdered = seasonOrdered;\nNote: weatherData has added the column seasonOrdered to the end of the data frame.\n \nAnd then use the column seasonOrdered from the data frame.\n  #### Part 3: Reordering the seasons ####\n  plot3 = ggplot( data=weatherData ) +\n    geom_histogram( mapping=aes(x=avgTemp),\n                    color=\"black\") +  \n    theme_bw() +\n    facet_grid( rows = vars(«seasonOrdered») ) +  # column in weatherData\n    labs(title = \"Temperature (\\u00B0F)\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Temperature (\\u00B0F)\");     \n  plot(plot3);\n\n\n\n\n\n\nFigure 3: Reordering the facets using the variable seasonOrdered\n\n\n\n\n\n3.2 Reversing the facet\nfacet_grid has two “mapping” subcomponents: rows and cols.  In this above case (Figure 3), seasonOrdered was mapped to row.\nWe can facet by column by mapping seasonOrdered to cols instead.\n  #### Part 4: Reversing the facet equation ####\n  plot4 = plot3 +                             # take all components from plot3\n    facet_grid( «cols» = vars(seasonOrdered) ); # and rewrite the facet component\n  plot(plot4);\nThis version is not spaced as well as the previous version.  You can change the bin sizes using the bin or binwidth components in geom_histogram.You will be using bin and binwidth in the lesson application.\n\n\n\n\n\n\nFigure 4: Switching the season facet to the x-axis\n\n\n\n\n\n3.3 faceting continuous values\nfacet_grid creates a row or column for each unique value in the column you supply in vars().  If you are not careful and use a continuous column like precip2, which has 59 unique numeric values, facet_grid will attempt to make 59 columns or rows.  This will likely not work and R will either crash or time-out. \n\n\n3.4 Modifying the histogram\nLet’s make two changes to the plot:\n\nadd color by mapping the season to fill (fill is the background color)\nchange to a density plot\n\n  #### Part 5: Adding color and switching to a density plot ####\n  plot5 = ggplot( data=weatherData ) +\n    «geom_density»( mapping=aes(x=avgTemp, «fill=season»),\n                  color=\"black\") +  \n    theme_bw() +\n    facet_grid( cols=vars(seasonOrdered)) +  # season has to be in the data frame\n    labs(title = \"Temperature (\\u00B0F)\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Temperature (\\u00B0F)\");     \n  plot(plot5);\n\n\n\n\n\n\nFigure 5: A density plot with each facet colored using the fill mapping",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "07: Faceting"
    ]
  },
  {
    "objectID": "lessons/07-Faceting.html#facet-in-other-plots",
    "href": "lessons/07-Faceting.html#facet-in-other-plots",
    "title": "07: Faceting",
    "section": "4 Facet in other plots",
    "text": "4 Facet in other plots\nWe can also use facets in a scatterplot of humidity vs. temperature faceted by season:\n  #### Part 6: Faceting a scatterplot ####  \n  plot6 = ggplot( data=weatherData ) +\n    «geom_point»( mapping=aes(x=avgTemp, y=relHum)) +  \n    theme_bw() +\n    «facet_grid( rows = vars(seasonOrdered) )» +  \n    labs(title = \"Temperature (\\u00B0F)\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Temperature (\\u00B0F)\");     \n  plot(plot6);\n\n\n\n\n\n\nFigure 6: Faceting a scatterplot by season\n\n\n\n \nOr, use facets in a bar plot or temperature faceted by season:\n  #### Part 6b: Faceting a barplot ####  \n  plot6b = ggplot( data=weatherData ) +\n    «geom_bar»( mapping=aes(x=avgTemp),\n              color=\"black\") +  \n    theme_bw() +\n    «facet_grid( rows = vars(seasonOrdered) )» +  \n    labs(title = \"Temperature (\\u00B0F)\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Temperature (\\u00B0F)\");     \n  plot(plot6b);\n\n\n\n\n\n\nFigure 7: Faceting a temperature barplot by season\n\n\n\n\n4.1 Different scales for the facets\nBy default, facet_grid will use the same scales for each facet.  In the case of Figure 7, this means that the y-axis range for all four facets is the same.\n \nWe can make facet_grid use a different scale for each facet by adding the subcomponent scales:\n  plot6c = ggplot( data=weatherData ) +\n    geom_bar( mapping=aes(x=avgTemp)) +  \n    theme_bw() +\n    facet_grid( cols = vars(seasonOrdered), \n                «scales=\"free\"») +  \n    labs(title = \"Temperature (\\u00B0F)\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Temperature (\\u00B0F)\");     \n  plot(plot6c);\nAnd now each facet uses a different y-axis scale to maximize space:\n\n\n\n\n\n\nFigure 8: Each facet row now has an independent y-axis range",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "07: Faceting"
    ]
  },
  {
    "objectID": "lessons/07-Faceting.html#faceting-by-rows-and-columns",
    "href": "lessons/07-Faceting.html#faceting-by-rows-and-columns",
    "title": "07: Faceting",
    "section": "5 Faceting by rows and columns ",
    "text": "5 Faceting by rows and columns \nYou can do two-dimensional facet – or, facets that have a variable for  both row and column.  We will return to our scatterplot of humidity vs. temperature and facet by season and wind speed level (i.e., low, medium, or high).\nThe “mappings” for this plot are:\n\nx-axis: avgTemp\ny-axis: relHum\nrows: seasonOrdered\ncols: windSpeedLevel\n\n  #### Part 7: Two-dimensional facets ####\n  plot7 = ggplot( data=weatherData ) +\n    geom_point( mapping=aes(x=avgTemp, y=relHum)) +  \n    theme_bw() +\n    facet_grid( rows = vars(seasonOrdered),\n                cols = vars(windSpeedLevel)) +\n    labs(title = \"Temperature (\\u00B0F)\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Temperature (\\u00B0F)\");     \n  plot(plot7);\nAgain, while facets are not defined as mappings, facets also map data to an aspect of the plot.\n\n\n\n\n\n\nFigure 9: Facet by both rows and columns (two-dimensional facet)\n\n\n\n\n5.1 Modifying the strips\nThe containers that have the labels for the facet rows and columns are called strips.  Like everything else in the canvas area outside of the plots, the strips can be modified using theme.  If you look at the description for theme, under Usage you will see that there are 14 different aspects of strip that can be modified (i.e., 14 subcomponents of theme that start with strip).\n \nUsing theme, we will change the background and text colors of the strips.  And, using the subcomponent switch inside facet_grid, we can change the position of the strips to the opposite side:\n  plot8 = ggplot( data=weatherData ) +\n    geom_point( mapping=aes(x=avgTemp, y=relHum)) +  \n    theme_bw() +\n    theme(«strip.text» = element_text(color=\"purple\",\n                                    size=15),\n          «strip.background.x» = element_rect(color=\"red\",\n                                            fill=\"yellow\"),\n          «strip.background.y» = element_rect(color=\"blue\",\n                                            fill=\"lightgreen\")) +\n    facet_grid( rows = vars(seasonOrdered),\n                cols = vars(windSpeedLevel),\n                «switch = \"both\"») +  # could use \"x\" or \"y\" to switch only 1 axis\n    labs(title = \"Temperature (\\u00B0F)\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Temperature (\\u00B0F)\");     \n  plot(plot8);\nstrip.text and strip.background will modify both axis.  Individual axis can be modified by attaching .x or .y to the names. So, strip.text modifies both axis text whereas strip.background.x modifies only the x-axis.\n\n\n\n\n\n\nFigure 10: Modifying the strips in the canvas\n\n\n\n\n\n5.2 Themes and element objects\nLike most theme components, you cannot directly set the properties of an object, instead you set the object to an element_* that has the properties you want so:\nstrip.background.y = element_rect(color=\"blue\",\n                                  fill=\"lightgreen\"))\n… means set the strips on the y-axis to a rectangular element that is colored blue and filled lightgreen.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "07: Faceting"
    ]
  },
  {
    "objectID": "lessons/07-Faceting.html#facet_wrap",
    "href": "lessons/07-Faceting.html#facet_wrap",
    "title": "07: Faceting",
    "section": "6 Facet_wrap",
    "text": "6 Facet_wrap\nSo far the positioning of the facets is determined by how many categories (or factors), the variable has.\n \nseason has 4 factors (categories) and using season as a facet will give 4 columns.  Another option is to use facet_wrap, which will allow you facet by one or more variable and define the number of rows and columns.\n\n6.1 One variable facet_wrap\nWe will use windSusDir to facet the humidity vs temperature scatterplot.\n \nwindSusDir gives wind by 10 degrees, so the values are 10, 20, 30, …, 360.  This means that are 36 values for windSusDir.  A regular facet would be either 36 rows or columns.\n \nWith facet_wrap, we can split the facets into rows and columns by setting either nrow or ncol:\n  plot9 = ggplot( data=weatherData ) +\n    geom_point( mapping=aes(x=avgTemp, y=relHum)) +  \n    theme_bw() +\n    «facet_wrap( facets = vars(windSusDir),»\n                «nrow = 4)» +\n    labs(title = \"Temperature (\\u00B0F)\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Temperature (\\u00B0F)\");     \n  plot(plot9);\nWe only set nrow (4)– and GGPlot calculates ncol (9).  You could declare both nrow and ncol but that is not necessary and you are risking an error if you calculate it wrong.\n\n\n\n\n\n\nFigure 11: A facet_wrap using one variable\n\n\n\n\n\n6.2 Multi-variable facet_wrap\nYou can facet with multiple variables and GGPlot will produce one facet cell for every possible combination of the variables.  In this example, we facet by seasonOrdered and windSpeedLevel.  seasonOrdered has 4 possible values and windSpeedLevel has 3.  So, the combination will produce 12 facet cells:\n  plot10 = ggplot( data=weatherData ) +\n    geom_point( mapping=aes(x=avgTemp, y=relHum)) +  \n    theme_bw() +\n    facet_wrap( «facets = vars(seasonOrdered, windSpeedLevel»),\n                ncol = 4,\n                dir = \"v\") +   # order facets vertically\n    labs(title = \"Temperature (\\u00B0F)\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Temperature (\\u00B0F)\");     \n  plot(plot10);\nGGPlot creates 12 facets, one for each combination of seasonOrdered and winSpeedLevel.  ncol=4 says to create 4 columns – and 3 rows.  dir=“v” says arrange the facets vertically.  The default is “h”, or horizontally.\n\n\n\n\n\n\nFigure 12: Facet_wrap using 2 variables",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "07: Faceting"
    ]
  },
  {
    "objectID": "lessons/07-Faceting.html#application",
    "href": "lessons/07-Faceting.html#application",
    "title": "07: Faceting",
    "section": "7 Application",
    "text": "7 Application\nUse data from Lansing2016NOAA.csv.\n \n1) Make a scatterplot of temperature vs. humidity and\n\nfacet by wind speed level in the x direction\nfacet by wind direction in the y direction\nhave wind speed go in descending order (high -&gt; medium -&gt; low)\nhave wind direction go north -&gt; south -&gt; east -&gt; west\n\n \n2) Using the plot from Figure 3\n\nThe 2 tasks below both use a strip.* subcomponent in the theme component\n\nChange the background color and outline color of the facet labels\nChange the text size, color, and font type inside the facet\n\nDouble the size of the bins using either bin or binwidth (they are both subcomponents of geom_histogram)\nAdd fill mapping to season\nSet the season fill colors to spring: green, summer: red, fall: orange, winter: purple\nChange breaks on x-axis to 25, 35, …, 85\nChange limits on x-axis to see all the breaks\n\n \n3) Create a scatterplot of temperature vs. humidity and facet by months (in order)\n\nFor help, look at Extension: dates redux\nModify the axes’ ranges to only include values within the facet (i.e., scales subcomponent)\n\n \n4) Create a scatterplot of temperature vs. humidity and facet_wrap using any 3 variables \n\nSet the number of columns so that it is between 1.5x and 2x the number of rows.\nNote 1: you might need to click the Zoom button in the RStudio Plot tab to properly see the results\nNote 2: you want to use variables with a small number of factors!\n\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n7.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?\n\n\n\n7.2 Turn in on GitHub\nSave the script as app07.r in your scripts folder, Push the changes to your GitHub repository, create an Issue in GitHub that says you have finished the application and assign the issue to belinskyc.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "07: Faceting"
    ]
  },
  {
    "objectID": "lessons/07-Faceting.html#extension-dates-redux",
    "href": "lessons/07-Faceting.html#extension-dates-redux",
    "title": "07: Faceting",
    "section": "8 Extension: dates redux",
    "text": "8 Extension: dates redux\nWe are going to facet the temperature humidity scatterplot by month – so, there will be 12 facets but only one faceting variable.\n\n8.1 Create a date facet\nDates are not the easiest thing to deal with in R, so it is worth a revisit.  Our goal is to facet by month using the dateYr column and it would really help if R could recognize the values as dates.  Unfortunately, R does not see dateYr as Date values:\n&gt; typeof(weatherData$dateYr)\n[1] \"character\"\nSo, we need to convert dateYr into a Date format that R recognizes – we will save that to dateYr2:\n  dateYr2 = as.Date(weatherData$dateYr, format=\"%Y-%m-%d\");\nAnd the Environment says dateYr2 is a Date vector:\ndateYr2:   Date[1:366], format:...\nBut typeof() will classify dateYr2 as numeric (double) – this is because, deep down, Dates are stored as a number that counts from January 1, 1970 (backwards and forewords).\n&gt; typeof(dateYr2)\n[1] \"double\"\nNow we can extract the month from dateYr2, note: “%b” is the conversion specification for month\n  months = format(dateYr2, format=\"%b\");\nWe need to add months in the data frame before we use it as a facet:\n  weatherData$monthsCol = months;\n\n\n8.2 Putting the months in order\nGGPlot will order the months alphabetically because GGPlot sees the values as characters – not dates.  To get GGPlot to facet the months in order, you will need to factor months using factor(). (Factoring data).",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "07: Faceting"
    ]
  },
  {
    "objectID": "lessons/09-ReshapingAndForLoops1.html",
    "href": "lessons/09-ReshapingAndForLoops1.html",
    "title": "09: Reshaping and For Loops 1",
    "section": "",
    "text": "include an explanation for why ggplot with for loops are easier to debug than ggplots with melted dataframes",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "09: Reshaping and For Loops 1"
    ]
  },
  {
    "objectID": "lessons/09-ReshapingAndForLoops1.html#purpose",
    "href": "lessons/09-ReshapingAndForLoops1.html#purpose",
    "title": "09: Reshaping and For Loops 1",
    "section": "1 Purpose",
    "text": "1 Purpose\nPlot multiple columns in a data frame using:\n\nreshaped data frames\nfor loops\nforcing local evaluation\n\n\n1.1 Code for the lesson\nThe script for the lesson is here\n\nSave the R file, called lesson09-ReshapingAndForLoops1.R to the scripts folder inside your RStudio Project\n\n \nThe data for this lesson (January Lansing temperatures from 2016-2022) is here\n\nSave the CSV file, called Jan_TAVG.csv to the data folder inside your RStudio Project.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "09: Reshaping and For Loops 1"
    ]
  },
  {
    "objectID": "lessons/09-ReshapingAndForLoops1.html#a-temperature-matrix",
    "href": "lessons/09-ReshapingAndForLoops1.html#a-temperature-matrix",
    "title": "09: Reshaping and For Loops 1",
    "section": "2 A temperature matrix",
    "text": "2 A temperature matrix\nTo start this lesson, we are going to use a new dataset inside the data folder named Jan_TAVG.csv.\n  Jan_Avg = read.csv(file = \"data/Jan_TAVG.csv\");\nJan_TAVG.csv has the average temperature for all 31 days in January in the seven years from 2016 to 2022 (31 rows by 7 columns).  The data comes from NOAA/NCDC.\n\n2.1 Importing the data\nJan_TAVG.csv has the years in a header row as numbers in strings (e.g., “2016”, “2017”).\n\n\n\n\n\n\nFigure 1: The CSV file, Jan_TAVG.csv with years in the header row\n\n\n\n \nWhen you read data in using read.csv, the data is put into a data frame.  An “X” is added to the years in the column names  (i.e., the header row) because column names are technically variable names and variable names cannot start with a number, so R add an “X” to make the variable name valid.  Note: R allows invalid variable names as column names for data frame, but you should avoid this.\n \n\n\n\n\n\n\nFigure 2: The Jan_Avg data frame – with an “X” added to the years in the header row",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "09: Reshaping and For Loops 1"
    ]
  },
  {
    "objectID": "lessons/09-ReshapingAndForLoops1.html#plotting-multiple-columns-as-one",
    "href": "lessons/09-ReshapingAndForLoops1.html#plotting-multiple-columns-as-one",
    "title": "09: Reshaping and For Loops 1",
    "section": "3 Plotting multiple columns as one",
    "text": "3 Plotting multiple columns as one\nOur goal is to create a line plot for each column in the Jan_Avg data frame in Figure 2, which will look like this:\n\n\n\n\n\n\nFigure 3: 7 lines plot, 1 for each column in Jan_Avg\n\n\n\nWe could plot the seven columns individually, but we want a solution that can be extended to any situation (i.e., any number of columns to plot).\n \nWe are going to look at two distinct ways to handle this situation.\n\nManipulating the data frame to put all the data points (e.g., temperature values) into one column. This is called reshaping the data frame.\nUsing for loops to cycle through all of the columns.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "09: Reshaping and For Loops 1"
    ]
  },
  {
    "objectID": "lessons/09-ReshapingAndForLoops1.html#reshaping-the-data-frame",
    "href": "lessons/09-ReshapingAndForLoops1.html#reshaping-the-data-frame",
    "title": "09: Reshaping and For Loops 1",
    "section": "4 Reshaping the data frame",
    "text": "4 Reshaping the data frame\nThe generally accepted ggplot solution for plotting multiple columns in a data frame is to reshape the data frame.  I do not like this solution because it involves manipulating the data frame in an unintuitive manor, but it is a widely-used technique you should be familiar with.\n \nThe basic steps are (Figure 4):\n\nMove the data from all the columns you want to plot into one column (in red). In this example, all temperature values from the seven columns go into one column.\nExpand the column names to a new column (in blue). In this example, the columns names are the years.\nExpand the row names to a new column (in green). In this example, the rows names are the date.\n\n\n\n\n\n\n\nFigure 4: The original data frame (31 rows, 7 columns) and the reshaped (melted) data frame (217 rows, 3 columns)\n\n\n\n\n4.1 Comparing original and reshaped data frame\nThe original data frame has 7 columns, representing the seven years of temperature data, each column has 31 rows – so, 217 temperature values in all.\n \nIn the reshaped data frame, we put all 217 temperature values from the seven columns in one column (in red in Figure 4). This is called melting a data frame.  So, the reshaped data frame will have 217 rows.\n \nThe rows and column names of the original data frame (Figure 2) have information about the date (1-31) and year (2016-2022).  We need to maintain the year and date information across every row in the reshaped data frame meaning we need to create a column for the date and the year.\n \nThe reshaped data frame will have 217 rows (31*7) and three columns: temperature, year, and date ( Figure 4 )\n\n\n4.2 Creating the reshaped data frame\nWe can use the reshape() function to create the new data frame.\n \nIn this new data frame we need to \n\ncombine the seven temperature columns into one column\nmaintain the year (original column names) and date (original row names) information in new columns\n\n  Jan_Avg_Melt = reshape(data=Jan_Avg,        # data frame to manipulate\n                    direction=\"long\",         # how to manipulate (long form) \n                    varying=c(1:7),           # columns to combine (melt)\n                    v.name=\"temperatures\",    # name of combined column\n                    times=colnames(Jan_Avg),  # old column names (years)\n                    timevar = \"year\",         # name for new column of years\n                    ids = as.numeric(rownames(Jan_Avg)),  # old row names (dates)\n                    idvar = \"dayNum\",         # name for new column of dates\n                    new.row.names = 1:217);   # renaming rows\nThere are nine arguments used in reshape(), let’s take these arguments two at a time…\n \nWe are reshaping the data frame Jan_Avg in the long direction (called melting):\ndata = Jan_Avg\ndirection=\"long\"\nnote: the other direction is “wide” (often called casting)\n \nWe are combining the temperature values in columns 1 through 7: c(1:7) and the name of the new combined column is temperatures:\nvarying = c(1:7)      # which data columns to combine\nv.name=\"temperatures\" # name of combined column\nWe are creating a new column from the seven column names in the old data frame (X2016, X2017…). The new column assigns a year to each temperature value (i.e., each row) and the new column is named years:\ntimes=colnames(Jan_Avg)   # column names (year) associated with each temp\ntimevar=\"years\"           # combined column name\nWe are also creating a new column from the 31 row names (1 through 31).  The new column assigns a date to each temperature value (i.e., each row) and the new column is named dayNum:\nids = as.numeric(rownames(Jan_Avg))   # row name (day) associated with each temp\nidvar = \"dayNum\"\nI add this argument to change the row names back to row numbers.  The line functionally does nothing but it makes the data frame easier to read in the RStudio viewer tab:\nnew.row.names = 1:217\n\n\n4.3 The reshaped data frame\nIf you open Jan_Avg_Melt (Figure 5) you will see there are 217 rows, representing the 217 daily temperatures.  On the same row as the temperature, there are columns that give the associated day and year.\n \n\nThe year changes every 31 rows so rows 1-31 are X2106, 32-62 are X21017, 63-93 are 2018, etc..\nThe dayNum cycles every 31 rows so the dayNum goes up by 1 each row and resets to 1 on rows 32, 63, 94, 125, 156, and 187.\n\n\n\n\n\n\n\nFigure 5: The reshaped data frame with the year and dayNum in their own column\n\n\n\n\n\n4.4 Plotting the reshaped data frame\nWe can use one geom_line component to plot all seven years in the reshaped data frame.\n \nThe geom_line component maps:\n\nx to the temperature column\ny to the dayNum column \ncolor to the year column\n\nThe color mapping is how we create seven separate line plots – each year is placed in the legend and mapped to a different color.\n  # Plot temperature (y) ~ dayNum (x) and subset by year (color)\n  plot1 = ggplot(data = Jan_Avg_Melt) +\n    geom_line(mapping=aes(x=dayNum, y=temperatures, color=year));\n  plot(plot1);\n\n\n\n\n\n\nFigure 6: The line plots from the reshaped data frame",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "09: Reshaping and For Loops 1"
    ]
  },
  {
    "objectID": "lessons/09-ReshapingAndForLoops1.html#create-plots-using-for-loops",
    "href": "lessons/09-ReshapingAndForLoops1.html#create-plots-using-for-loops",
    "title": "09: Reshaping and For Loops 1",
    "section": "5 Create plots using for loops",
    "text": "5 Create plots using for loops\nThe main reason I do not like the reshaping method is that it creates a new data frame that is less intuitive than the original.  I believe that the script should be manipulated to meet the needs of the data – not the other way around.  And we have a perfectly good programming technique to cycle through, and plot, columns in a data frame: for loops.\n \nWe can code one for loop with one geom_line that cycled through the seven columns of the original data frame to create the seven plots.\n\n5.1 Manually plotting multiple geom_lines\nWe will start by plotting three of the seven columns in Jan_Avg.  The code is similar to what we have done in previous lessons except the data frame, Jan_Avg, is not set when we initiate the canvas (i.e., not added as data in ggplot()).  Instead, we use the data frame in the mapping of the geoms.  Note: In GGPlot it is easier to use data frames in mapping when using for loops for reasons that would take us down a rabbit hole.\n  plot2 = ggplot() +                «# the data frame is not declared here»\n    geom_line(mapping=aes(x=1:31, \n                          y=«Jan_Avg»$X2016,  # the data frame is used here instead\n                          color=\"2016\")) +\n    geom_line(mapping=aes(x=1:31,  \n                          y=«Jan_Avg»$X2017,\n                          color=\"2017\")) +\n    geom_line(mapping=aes(x=1:31,\n                          y=«Jan_Avg»$X2018,\n                          color=\"2018\")) +\n    theme_bw() + \n    labs(x = \"Date\",\n         y = \"Temp (Celsius)\",\n         color = \"Year\");\n  plot(plot2);\nThere are three mapping for each geom_line:\n\nThe x mapping for each plot is 1 through 31 since we are looking at the dates from January 1st to January 31st\nThe y mapping is to the specific column of temperatures we are plotting, X2016, X2017, X2018 …\nThe color mapping is the year, which is hard coded in this example (a value instead of a variable). \n\nNote: quotes are necessary for year because year needs to be a discrete value (character), not a continuous value (numeric) – there is an application question regarding this\n\n\n\n\n\n\n\n\nFigure 7: Plotting 3 columns one at a time\n\n\n\n\n\n5.2 Generalizing the mappings: use index numbers instead of column names\nOur goal is to create code for one geom_line that can be used in a for loop to create all 7 line plots.  To do this, we need to generalize the code.\n \nIn a for loop, it is easier to index the columns by number instead of name (next lesson we will use names). \n \nInstead of using Jan_Avg$X2016, Jan_Avg$X2017, and Jan_Avg$X2018 as the y mappings, we will use the [x,y] subset notation to subset by column number instead of column name.\n \nWe provide no x value in the [x,y] subset, which means we are taking the values from every row in the column\n  plot3 = ggplot() +\n    geom_line(mapping=aes(x=1:31, \n                          y=«Jan_Avg[,1]»,    # column 1, same as Jan_Avg$X2016\n                          color=\"2016\")) +\n    geom_line(mapping=aes(x=1:31,  \n                          y=«Jan_Avg[,2]»,    # column 2, same as Jan_Avg$X2017\n                          color=\"2017\")) +\n    geom_line(mapping=aes(x=1:31,\n                          y=«Jan_Avg[,3]»,    # column 3, same as Jan_Avg$X2018\n                          color=\"2018\")) +\n    theme_bw() + \n    labs(x = \"Date\",\n         y = \"Temp (Celsius)\",\n         color = \"Year\");\n  plot(plot3);\n\n\n\n\n\n\nFigure 8: plot3 looks exactly like plot2\n\n\n\nYou can put Jan_Avg[,2] in the Console to convince yourself that this is all values in column 2:\n&gt; Jan_Avg[,2]\n [1]  -0.4   0.4   2.5  -4.1 -10.1 -12.8 -12.8 -11.6  -6.8   0.1   2.1   0.7  -5.8\n[14]  -5.1  -4.6  -2.8   1.6   2.7   1.8   1.6   6.8   6.6   4.2   3.1   3.1   2.1  \n[27]  -0.7  -2.2  -3.0  -6.8  -3.3\n\n\n5.3 Generalize the color mappings\nThe color mapping is currently hard coded (e.g., “2016”, “2017”, etc..) – meaning color is set to a value (in quotes) instead of a variable.  We are going to change this so that the year comes from the column name.  This makes it easier to code the plot in a for loop because we can cycle through the column names using their index values:\n  plot4 = ggplot() +\n    geom_line(mapping=aes(x=1:31, \n                          y=Jan_Avg[,1],  \n                          color=«colnames(Jan_Avg)[1]»)) +\n    geom_line(mapping=aes(x=1:31,  \n                          y=Jan_Avg[,2],  \n                          color=«colnames(Jan_Avg)[2]»)) +\n    geom_line(mapping=aes(x=1:31,\n                          y=Jan_Avg[,3],  \n                          color=«colnames(Jan_Avg)[3]»)) +\n    theme_bw() + \n    labs(x = \"Date\",\n         y = \"Temp (Celsius)\",\n         color = \"Year\");\n  plot(plot4);\nYou can put colnames(Jan_Avg) in the Console to convince yourself that is a vector with 7 value representing the seven column names:\n&gt; colnames(Jan_Avg)\n[1] \"X2016\" \"X2017\" \"X2018\" \"X2019\" \"X2020\" \"X2021\" \"X2022\"\nplot4 will look almost exactly like plot2 (Figure 7) – except the years in the legend are preceded with an X, something we will fix later in the lesson:\n\n\n\n\n\n\nFigure 9: The line plot after generalizing the y and color mappings",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "09: Reshaping and For Loops 1"
    ]
  },
  {
    "objectID": "lessons/09-ReshapingAndForLoops1.html#using-for-loops-and-lazy-evaluations",
    "href": "lessons/09-ReshapingAndForLoops1.html#using-for-loops-and-lazy-evaluations",
    "title": "09: Reshaping and For Loops 1",
    "section": "6 Using for loops and Lazy Evaluations",
    "text": "6 Using for loops and Lazy Evaluations\nWe have now generalized the script for the geom_line so that it is easier to put in a for loop.  We will now recreate the seven line plots using a for loop.\n \nWe will do this in three steps:\n\nEstablish the ggplot canvas\nAdd plots using a for loop to cycle through the columns\nAdjust the plots with theme and labs (labels)\n\n \nNote: Our first effort to use for loops will fail – in a very instructive way that introduces Lazy Evaluations, a topic that creeps up from time to time\n\n6.1 Establish the ggplot canvas\nggplot() is the function that establishes a ggplot canvas.  Effectively, what ggplot() is doing is creating a List object that holds all the plot data, information, and styling.\n \nWe start with creating a List object with nothing in it (i.e., an empty ggplot() canvas):\nplot6 = ggplot();\nA List object named plot6 has been put into the Environment and now we are going to fill it with plot data.\n\n\n6.2 Adding geoms (line plots) to the canvas\nWe want to create a line plot for all seven column in Jan_Avg.  This means we want to cycle through the seven columns using a for loop:\nfor(i in 1:7)   # cycle through columns 1-7\nAnd each time the for loop cycles we want to append one line plot to the canvas, plot6. \nIn other words, we are adding a year’s line plot to plot6 and saving the results back to plot6:\nplot6 = plot6 +\nWe need to replace the column numbers in the code from the last plot (Figure 14) with the indexing value in the for loop, i, which goes from 1 to 7:\ngeom_line(mapping=aes(x=as.numeric(rownames(Jan_Avg)), \n                      y=Jan_Avg[,«i»],                  # columns 1-7\n                      color=colnames(Jan_Avg)[«i»]));   # names from columns 1-7\nPutting all of this together we get:\n  plot6 = ggplot(); \n  \n  ### Cycle through the seven columns and make a line plot for each \n  for(i in 1:7)   # cycle through columns 1-7\n  {\n    plot6 = plot6 + \n        geom_line(mapping=aes(x=as.numeric(rownames(Jan_Avg)), \n                              y=Jan_Avg[,i], \n                              color=colnames(Jan_Avg)[i])); \n  }\n  plot(plot6);\nAnd the result is something unexpected – we only see a line plot of the last column (2022):\n\n\n\n\n\n\nFigure 10: Only the last column was plotted – this is a case of Lazy Evaluation\n\n\n\n\n\n6.3 Lazy Evaluation \nIt looks as though only the last of the seven columns was plotted once ( Figure 10) but, actually, the last column was plotted seven times.\n \nThis happened because of the way R/GGPlot handles indexes when compiling for loops.  The compilers sees the for loop will executes seven times and stacks up the code from the seven loops like this:\n    plot6 = plot6 + \n        geom_line(mapping=aes(x=as.numeric(rownames(Jan_Avg)), \n                              y=Jan_Avg[,i], \n                              color=colnames(Jan_Avg)[i])); \n    plot6 = plot6 + \n        geom_line(mapping=aes(x=as.numeric(rownames(Jan_Avg)), \n                              y=Jan_Avg[,i], \n                              color=colnames(Jan_Avg)[i])); \n    plot6 = plot6 + \n        geom_line(mapping=aes(x=as.numeric(rownames(Jan_Avg)), \n                              y=Jan_Avg[,i], \n                              color=colnames(Jan_Avg)[i])); \n   ... (4 more) ...\nThen the compiler executed the stacked lines.  The problem is that R evaluated i after the code from the for loops was stacked.\n \nBut, after the for loop,  i is equal to 7.  So, R replace i with 7 in all seven plots in the stack.  This is called Lazy Evaluation.\nLazy Evaluation is one of the more unintuitive problems that happens a lot in programming.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "09: Reshaping and For Loops 1"
    ]
  },
  {
    "objectID": "lessons/09-ReshapingAndForLoops1.html#local-variables-the-lazy-evaluation-fix",
    "href": "lessons/09-ReshapingAndForLoops1.html#local-variables-the-lazy-evaluation-fix",
    "title": "09: Reshaping and For Loops 1",
    "section": "7 Local variables: The Lazy Evaluation fix",
    "text": "7 Local variables: The Lazy Evaluation fix\nOne solution to Lazy Evaluation is to force evaluation of i while cycling through the for loop.  This is done using !!().\n  #### Part 7: Stopping the Lazy Evaluation by forcing local variables\n  plot7 = ggplot(); \n  \n  for(i in 1:ncol(Jan_Avg))   # same as 1:7\n  { \n    # force local evaluation of i by replacing i with !!(i)\n    plot7 = plot7 +\n        geom_line(mapping=aes(x=1:31, \n                              y=Jan_Avg[,!!(i)],  \n                              color=colnames(Jan_Avg)[!!(i)]));   \n  }\n  plot(plot7);\nThis forces R to evaluate i each time through the for loop and we see the seven plots:\n\n\n\n\n\n\nFigure 11: Plot of all seven column after we forced local evaluation",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "09: Reshaping and For Loops 1"
    ]
  },
  {
    "objectID": "lessons/09-ReshapingAndForLoops1.html#appending-theme-and-labels",
    "href": "lessons/09-ReshapingAndForLoops1.html#appending-theme-and-labels",
    "title": "09: Reshaping and For Loops 1",
    "section": "8 Appending theme and labels",
    "text": "8 Appending theme and labels\nOur ggplot canvas, plot7, now has 7 line plots.  Let’s add the theme and labs components but, instead of appending to plot7, we will create a copy of plot7 named plot8 and append the theme and labs components to plot8:\n  plot8 = plot7 +\n    theme_bw() + \n    labs(x = \"Date\",\n         y = \"Temp (Celsius)\",\n         color = \"Year\");\n  plot(plot8);\n\n\n\n\n\n\nFigure 12: The line plots with appended theme and labs",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "09: Reshaping and For Loops 1"
    ]
  },
  {
    "objectID": "lessons/09-ReshapingAndForLoops1.html#aesthetic-changes",
    "href": "lessons/09-ReshapingAndForLoops1.html#aesthetic-changes",
    "title": "09: Reshaping and For Loops 1",
    "section": "9 Aesthetic changes ",
    "text": "9 Aesthetic changes \nWe are going to make the final plot of this lesson (Figure 12) look a little nicer with the following changes:\n\nremove the X from the year in the legend\nincrease the size of the line\nUse a better color system for the lines\n\n \nThe X can be removed from the column names and the legend using substring with the argument first=2. \n  yearNum = substring(colnames(Jan_Avg), first=2);\nfirst=2 starts with the second character colnames (i.e., removes the first character):\n&gt; yearNum\n[1] \"2016\" \"2017\" \"2018\" \"2019\" \"2020\" \"2021\" \"2022\"\nThe size of the lines can be changed by adding the linewidth subcomponent to geom_line:\n      geom_line(mapping=aes_(x=as.numeric(rownames(Jan_Avg)),  # 1:31\n                             y=Jan_Avg[,i], # plot temperature column i\n                             color=yearNum[i]), \n                linewidth= 1.5); \nAnd we will use the viridis package to give us a better colors.  viridis has many predefined color schemes designed to increase contrast for both discrete and continuous plots.  The schemes can be access using the scale_color_viridis component:\n    scale_color_viridis(discrete = TRUE, # values are discrete (FALSE: continuous)\n                        option = \"H\",    # options are A-H, default is D\n                        direction = 1) + # -1 reverses colors\nPutting it all together:\n yearNum = substring(colnames(Jan_Avg), first=2);  \n  \n  plot9 = ggplot();   # create a new canvas\n  \n  for(i in 1:ncol(Jan_Avg))\n  {\n    plot9 = plot9 +    # append to plot9 the geom_line\n        geom_line(mapping=aes(x=1:31,  \n                              y=Jan_Avg[,!!(i)],\n                              color=yearNum[!!(i)]),  # change to substring\n                  linewidth = 1.5);    # change the size of the line\n  } \n  \n  plot9 = plot9 +    # append these components\n    theme_bw() + \n    scale_color_viridis(discrete = TRUE, # values are discrete (FALSE: continuous)\n                        option = \"H\",    # options are A-H, default is D\n                        direction = 1) + # -1 reverses colors\n    labs(x = \"Date\",\n         y = \"Temp (\\U00B0 C)\",          # use unicode for the degree symbol\n         color = \"Year\");\n  plot(plot9);\nAnd our new plot:\n\n\n\n\n\n\nFigure 13: An improved version of the plot",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "09: Reshaping and For Loops 1"
    ]
  },
  {
    "objectID": "lessons/09-ReshapingAndForLoops1.html#application",
    "href": "lessons/09-ReshapingAndForLoops1.html#application",
    "title": "09: Reshaping and For Loops 1",
    "section": "10 Application",
    "text": "10 Application\nUse data from Jan_TAVG.csv.\n \n1) In comments at the top of your script answer the following:\n\nWhat happens if you take the year out of quotes in the color mapping in plot2 Figure 7)?  Why?\nWhy does the x mapping (temperature) need to be numeric and the color mapping (year) need to be a string in plot5 (Figure 14)?  How does GGPlot plot these types of values?\n\n \n2) Create a line plot for the first 20 values from years 2017 to 2020 in Jan_TAVG.csv–(4 line plots in all)\n\nDo this once using the reshaping method\n\nYou can subset the data frame in reshape() using the argument drop\n\nAnd a second time using the for loops method\nAdd, and center, a title and subtitle \nChange the background color of the plot and the color of the axis lines to varying shades of gray using grayscale (grey0 to grey100)\n\n \n3) Create a matrix from the data in Jan_TAVG.csv and create a scatterplot of each rows using for loops\n\nuse as.matrix() to convert the data frame into a matrix\nUse a for loops to cycle through, and plot, all the rows (instead of columns)\n\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n10.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?\n\n\n\n10.2 Turn in on GitHub\nSave the script as app09.r in your scripts folder, Push the changes to your GitHub repository, create an Issue in GitHub that says you have finished the application and assign the issue to belinskyc.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "09: Reshaping and For Loops 1"
    ]
  },
  {
    "objectID": "lessons/09-ReshapingAndForLoops1.html#extension-generalize-the-x-mapping",
    "href": "lessons/09-ReshapingAndForLoops1.html#extension-generalize-the-x-mapping",
    "title": "09: Reshaping and For Loops 1",
    "section": "11 Extension: Generalize the x mapping",
    "text": "11 Extension: Generalize the x mapping\nGeneralizing the x mapping not necessary, but it is good programming practice to generalize your code because it makes your code more flexible and easier to debug.\n \nx maps to the day numbers 1-31, this is the same as the row numbers.  In GGPlot if the rows are not given names then the row numbers are the row names.\n \nWe can see that the row names are the same as the row numbers in the Console:\n&gt; rownames(Jan_Avg)  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\" \"13\" \"14\" \"15\" \"16\" [17] \"17\" \"18\" \"19\" \"20\" \"21\" \"22\" \"23\" \"24\" \"25\" \"26\" \"27\" \"28\" \"29\" \"30\" \"31\"\nThe row names are put in quotes, which means they are characters – not numeric.  We want the x mapping to be continuous so we need numeric values:\n&gt; rownames(Jan_Avg)  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\" \"13\" \"14\" \"15\" \"16\" [17] \"17\" \"18\" \"19\" \"20\" \"21\" \"22\" \"23\" \"24\" \"25\" \"26\" \"27\" \"28\" \"29\" \"30\" \"31\"\nWe will map x to the numeric row names:\n plot5 = ggplot() +     geom_line(mapping=aes(x=«as.numeric(rownames(Jan_Avg))»,  # 1:31                           y=Jan_Avg[,1],    # column 1, also Jan_Avg$X2016                           color=colnames(Jan_Avg)[1])) +     geom_line(mapping=aes(x=«as.numeric(rownames(Jan_Avg))»,  # 1:31                           y=Jan_Avg[,2],    # column 2, also Jan_Avg$X2017                           color=colnames(Jan_Avg)[2])) +     geom_line(mapping=aes(x=«as.numeric(rownames(Jan_Avg))»,  # 1:31                           y=Jan_Avg[,3],    # column 3, also Jan_Avg$X2018                           color=colnames(Jan_Avg)[3])) +     theme_bw() +      labs(x = \"Date\",          y = \"Temp (Celsius)\",          color = \"Year\");   plot(plot5);\n\n\n\n\n\n\nFigure 14: After generalizing the x mapping, we still have the same plot as before",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "09: Reshaping and For Loops 1"
    ]
  },
  {
    "objectID": "lessons/11-Annotations.html",
    "href": "lessons/11-Annotations.html",
    "title": "11: Annotations",
    "section": "",
    "text": "Manually add text, points, and lines to a canvas \nList objects \n\n\n\nThe script for the lesson is here\n\nSave the R file, called lesson11-Annotations.R to the scripts folder inside your RStudio Project\n\n \nThe data for this lesson (Lansing weather in 2016) is here (same as last lesson)\n\nSave the CSV file, called Lansing2016Data.csv to the data folder inside your RStudio Project.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "11: Annotations"
    ]
  },
  {
    "objectID": "lessons/11-Annotations.html#purpose",
    "href": "lessons/11-Annotations.html#purpose",
    "title": "11: Annotations",
    "section": "",
    "text": "Manually add text, points, and lines to a canvas \nList objects \n\n\n\nThe script for the lesson is here\n\nSave the R file, called lesson11-Annotations.R to the scripts folder inside your RStudio Project\n\n \nThe data for this lesson (Lansing weather in 2016) is here (same as last lesson)\n\nSave the CSV file, called Lansing2016Data.csv to the data folder inside your RStudio Project.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "11: Annotations"
    ]
  },
  {
    "objectID": "lessons/11-Annotations.html#styling-elements-of-a-plot",
    "href": "lessons/11-Annotations.html#styling-elements-of-a-plot",
    "title": "11: Annotations",
    "section": "2 Styling elements of a plot",
    "text": "2 Styling elements of a plot\nLet’s start with the temperature boxes separated by wind direction from the boxplots lesson: \n  ### Part 1: Boxplots ####\n  ### Re-order the directions on the x-axis using factor(s)\n  windDirOrdered = factor(weatherData$windDir,\n                          levels=c(\"North\", \"East\", \"South\", \"West\"));\n  \n  #### A Boxplot ####\n  plot1 = ggplot(data=weatherData) +\n    geom_boxplot(mapping=aes(x=windDirOrdered, y=changeMaxTemp),\n                 na.rm = TRUE) +\n    theme_bw() +\n    labs(title = \"Change in Temperature vs. Wind Direction\",\n         subtitle = \"Lansing, Michigan: 2016\",\n         x = \"Wind Direction\",\n         y = \"Change in Temperature (\\u00B0F)\");\n  plot(plot1);\n\n\n\n\n\n\nFigure 1: A boxplot of temperature by wind direction\n\n\n\n\n2.1 ggpot_build and rendered data\nWe might want to provide more information about the outliers on the plot.  The first thing we need to do is get the outliers from the data.  The way to get the outliers in GGPlot is to use ggplot_build().  ggplot_build() creates a List that contains all the calculated data for the plot.  This is what GGPlot uses in the background to render to the plot.\n  renderedData = ggplot_build(plot1);\nIn the Environment tab you can see that renderedData is Lists within Lists.  The structure is kind of crazy but we do see the outliers for the four temperature boxes:\n\n\n\n\n\n\nFigure 2: The outliers, three Lists deep, inside the ggplot_build data\n\n\n\n\n\n2.2 Navigating Lists in RStudio\nRStudio can help you create the code that extract the outliers List by: \n\nDouble-click on renderedData in the Environment\nIn the Viewer tab, click on renderedData -&gt; data -&gt; [[1]]\nClick on the icon that appears on the right when you hover over outliers\n\n\n\n\n\n\n\nFigure 3: Using RStudio to navigate a List \n\n\n\n \nRStudio puts this code into the Console:\n&gt; renderedData[[\"data\"]][[1]][[\"outliers\"]]\nYou can set that code equal to a variable named outliers and outliers \noutliers = renderedData[[\"data\"]][[1]][[\"outliers\"]]\nOr, equivalently you can use $ in place of [[  ]] for named variables:\noutliers = renderedData$data[[1]]$outliers;\nNote: [[1]] means the first variable in data – this variable is unnamed so it has to be in [[ ]].\n\n\n2.3 Outliers in Environment\noutliers is now a List variable in the Environment tab.\n \nThere are four boxes in our boxplot (Figure 1).  The List outliers has four numeric vectors – each vector represents the boxes in order.  The number of values in each vector in the number of outliers in each box along with the value of the outlier.  So, the first box had no outliers, the fourth had 12.\n\n\n\n▼ outliers:    List of 4\n   $ : num(0)\n   $ : num -28\n   $ : num [1:3] -14 18 17\n   $ : num [1:12] -22 -26 18 -24 20 ...\n\n\nFigure 4: outliers for the four boxes in the Environment",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "11: Annotations"
    ]
  },
  {
    "objectID": "lessons/11-Annotations.html#annotating-text",
    "href": "lessons/11-Annotations.html#annotating-text",
    "title": "11: Annotations",
    "section": "3 Annotating text",
    "text": "3 Annotating text\nWe are going to the information from renderedData to manually label the one outlier in the second box (East).  That outlier is at -28 (meaning there was a day in which the easterly winds were associated with a 28 degree drop in temperature).\n \nTo add text to a plot we use the annotate component. The annotate component can be used with the geom subcomponent to manually add text, lines, and other shapes to a plot. \nplot3 = plot1 + \n  annotate(geom=\"text\",   # type of annotation\n           x=1.9,         # x coordinate of annotation\n           y=-28,         # y coordinate of annotation\n           label=\"-28\",   # the annotation\n           color=\"blue\"); # can add style subcomponents\nplot(plot3);\n\n\n\n\n\n\nFigure 5: Adding a text annotation to a plot\n\n\n\n\n3.1 The coordinates in annotate\nWhen you have an axis with categorical values like the wind direction axis, then each objects gets numbered.\n \nSo, the North box is at positionis 1, East is at 2, South is at 3, and West is at 4.  But, you can also put objects in-between the plot. So, y=3.5 would be half-way between South and West.\n \nI did not want to put the label right on top of the point, so I move it over slightly to the left by using x=1.9 (just left of the East box)instead of x=2. \n\n\n3.2 Place multiple values at once\nThe third box, South, has three outliers (-14, 18, 17), and we can add all the outlier values in one annotate by using vectors instead of single values for the subcomponents:\n  #### Part 4: Add multiple text values to the plot ####\n  plot4 = plot1 + \n    annotate(geom=\"text\",  \n             x=c(2.9, 3.1, 2.9),        \n             y=c(-14,18,17),        \n             label=c(-14,18,17),   # could use outliers[[3]] here\n             color=c(\"blue\", \"red\", \"red\"));\n  plot(plot4);\n\n\n\n\n\n\nFigure 6: Adding multiple text objects in one annotate component\n\n\n\n\n\n3.3 Adding outliers from the List \nWe could have directly used the values from the List.  To extract the 3 outliers from the unnamed 3rd vector (representing the third box):\n  thirdBoxOutliers = outliers[[3]];\nThen we can use thirdBoxOutliers instead of manually adding the three values:\n  plot5 = plot1 + \n    annotate(geom=\"text\",  \n             x=c(2.9, 3.1, 2.9),        \n             y=«thirdBoxOutliers»,        \n             label=«thirdBoxOutliers»,   \n             color=c(\"blue\", \"red\", \"red\"));\n  plot(plot5);\nThis code produces a plot that is exactly the same as Figure 6.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "11: Annotations"
    ]
  },
  {
    "objectID": "lessons/11-Annotations.html#adding-lines-segments-to-a-plot",
    "href": "lessons/11-Annotations.html#adding-lines-segments-to-a-plot",
    "title": "11: Annotations",
    "section": "4 Adding lines (segments) to a plot",
    "text": "4 Adding lines (segments) to a plot\nWe are going to add the date for the highest outlier on the fourth box (West winds), which is January 28.  There is no easy way to extract the date from the outlier value – I show one way to get the most extreme outlier in Extension: extracting the date of the outliers using code.  We can also just look in the Environment and see that a -26 degree change occurred on Feb 19, which represents the highest outlier in the West box.\n \nWe also use annotate to add a line to a plot.  The geom is “segment” and you need to supply four values, the x and y starting and ending points (x, xend, y, yend).  The segment connect the text to the outlier point:\n  plot7 = plot1 + \n    annotate(geom=\"text\",  \n             x=3,        \n             y=26,  \n             label=\"2-19\",     \n             color=\"red\") +\n    annotate(geom=\"segment\", # create a line\n             x=3.2,          # starts just after the third box\n             xend=3.95,      # ends just before the fourth box\n             y=26,           # starts at 26 (y-direction)\n             yend=26);       # ends at 26 (y-direction)\n  plot(plot7);\nNote: in GGPlot, lines go across the whole plot and are horizontal or vertical, segments are lines that goes between any two points.\n\n\n\nAdding a line to a plot\n\n\n\n4.1 Styling the line and adding an arrow\nYou can style the line with linewidth, linetype, and color just like in geom_line.  You can also add an arrow to the line using the function arrow(). Note: arrow() comes from the package grid, which is already included with the package ggplot2.\n  #### Part 8 Style the line and add an arrow ####\n  plot8 = plot1 + \n    annotate(geom=\"text\",  \n             x=3,        \n             y=26,    \n             label=\"2-19\",   \n             color=\"red\") +\n    annotate(geom=\"segment\",\n             x=3.2, \n             xend=3.95,\n             y=26, \n             yend=26,\n             color = \"red\",\n             linetype=2,\n             linewidth = 0.5,\n             arrow = arrow());\n  plot(plot8);\n\n\n\n\n\n\nFigure 7: Styling the line and adding an arrow",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "11: Annotations"
    ]
  },
  {
    "objectID": "lessons/11-Annotations.html#adding-a-rectangle-to-the-plot",
    "href": "lessons/11-Annotations.html#adding-a-rectangle-to-the-plot",
    "title": "11: Annotations",
    "section": "5 Adding a rectangle to the plot",
    "text": "5 Adding a rectangle to the plot\nAdding a rectangle to the plot is very similar to adding a segment except the subcomponents name change slightly.  Instead of x, xend, y, yend, you use xmin, xmax, ymin, ymax:\n  #### Part 9 Adding a box to the plot ####\n  plot9 = plot8 + \n    annotate(geom=\"rect\",   # rectangle\n             xmin = 2.8,    # starting x\n             xmax = 3.2,    # ending x point\n             ymin = 23.5,   # starting y point\n             ymax = 28.5,   # ending y point\n             alpha = 0.2,\n             linetype=2,\n             color = \"red\",\n             fill = \"grey80\");\n  plot(plot9);\n\n\n\n\n\n\nFigure 8: Adding a box to the plot\n\n\n\n\n5.1 Layering objects in GGPlot\nIn GGPlot, the layers are determined by the order.  This means the box in Figure 1 appears in front of the text because the box was laid out after the text, which is part of  plot8.  This is not much of a problem here because the box has an alpha of 0.2, but if you increase alpha you will see the box cover up the text.  The only way to fix this is to redo the plot so that the text component is laid out after the box component.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "11: Annotations"
    ]
  },
  {
    "objectID": "lessons/11-Annotations.html#adding-points",
    "href": "lessons/11-Annotations.html#adding-points",
    "title": "11: Annotations",
    "section": "6 Adding points",
    "text": "6 Adding points\nWe can add points to the plot using annotate – it is very similar to adding text:\n  #### Part 10: Adding a point to a plot ####\n  plot10 =  plot1 +\n    annotate(geom=\"point\",\n             x = 2,\n             y = 25,\n             size = 3,\n             color =rgb(red=0, green=.3, blue=.7),\n             fill = rgb(red=1, green=1, blue=0),\n             shape = 24);\n  plot(plot10);\n\n\n\n\n\n\nFigure 9: Adding a point to the plot\n\n\n\n\n6.1 Adding multiple points\nAnd like text, we can add multiple points using vectors.  We are going to manually add 5 points to the plot using one annotate component:\n \nFirst we define the position, size, and color of the 5 points – and save them to vectors:\n  #### Part 11: Adding multiple points to a plot ####\n  ### data for 5 points\n  xVector = c(1, 1.3, 1.6, 1.9, 2.2);\n  yVector = c(15, 17, 19, 21, 23);\n  pointSize = c(5,4,3,2,1);\n  pointFill = c(\"yellow\", \"orange\", \"red\", \"green\", \"pink\");\nThen use the vectors above to populate the subcomponents of annotate:\n  plot11 =  plot1 +\n    annotate(geom=\"point\",\n             x = xVector,\n             y = yVector,\n             size = pointSize,\n             color =rgb(red=0, green=.3, blue=.7),  # same for all points\n             fill = pointFill,\n             shape = 24);                           # same for all points\n  plot(plot11);\n\n\n\n\n\n\nFigure 10: Adding multiple points to a plot\n\n\n\n\n\n6.2 Creating a scatterplot\nYou could even recreate a complete scatterplot using annotate and geom=“point”.\n  plot12 = ggplot() + # creating a canvas without a data frame\n    theme_bw() +\n    annotate(geom=\"point\",\n             x = weatherData$avgTemp,  # adding every point in avgTemp\n             y = weatherData$relHum,   # ... and relHum\n             size = 3,\n             color = \"blue\",\n             fill = \"red\",\n             shape = 21) + \n    labs(title=\"Scatterplot using annotate\",\n         x = \"Average Temperature\",\n         y = \"Relative Humidity\");\n  plot(plot12);\n\n\n\n\n\n\nFigure 11: A scatterplot using annotate to add all the points",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "11: Annotations"
    ]
  },
  {
    "objectID": "lessons/11-Annotations.html#polygons",
    "href": "lessons/11-Annotations.html#polygons",
    "title": "11: Annotations",
    "section": "7 Polygons",
    "text": "7 Polygons\nYou can also use points to create a polygon using geom=“polygon”.  The number of sides for the polygon is the number of points given in x and y plus 1. \n  #### Part 13: Polygons ####\n  plot13 = plot12 +\n      annotate(geom=\"polygon\",  # connects all the points\n           «x = c(60,55,30,35),  # 4 points -- 5 sided polygon»\n           «y = c(60,50,40,80),»\n           color = \"blue\",\n           fill = \"green\",\n           linetype = 4,\n           alpha = 0.4);\n  plot(plot13);\nA polygon will connect all the x,y values and create a final connection back to the original x,y values – in this case, 60,60. \n\n\n\n\n\n\nFigure 12: Adding a polygon to the plot",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "11: Annotations"
    ]
  },
  {
    "objectID": "lessons/11-Annotations.html#add-horizontal-and-vertical-lines",
    "href": "lessons/11-Annotations.html#add-horizontal-and-vertical-lines",
    "title": "11: Annotations",
    "section": "8 Add horizontal and vertical lines",
    "text": "8 Add horizontal and vertical lines\nWe can use annotate with geom=“segment” to add any line to a plot.  But, there is an easier way if you just want to add a vertical or horizontal line that goes all the way across the plot.  For that, we use the geom_vline and geom_hline components.\n \nFirst, let’s get the mean average temperature and mean relative humidity:\n  meanTemp = mean(weatherData$avgTemp);\n  meanHum = mean(weatherData$relHum);\nThe values are:\nmeanTemp: 50.6584...\nmeanHum: 68.7704...\nNow, let’s create a horizontal line that represents the mean temperature and a vertical line that represents the mean humidity.\n \nIn this case the mappings are xintercept (for the vertical line) and yintercept (for the horizontal line)\n  plot14 = plot12 +\n    geom_vline(mapping=aes(xintercept = meanTemp),\n               color = \"orange\",\n               linewidth = 2) +\n    geom_hline(mapping=aes(yintercept = meanHum),\n               color=\"purple\",\n               linewidth=2);\n  plot(plot14);\n\n\n\n\n\n\nFigure 13: Adding a horizontal and vertical line to the plot\n\n\n\n \nYou can also add horizontal and vertical lines using annotate in Extension: Add horizontal and vertical lines using annotate – but it is a bit buggy.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "11: Annotations"
    ]
  },
  {
    "objectID": "lessons/11-Annotations.html#adding-circles-and-ellipses",
    "href": "lessons/11-Annotations.html#adding-circles-and-ellipses",
    "title": "11: Annotations",
    "section": "9 Adding circles and ellipses",
    "text": "9 Adding circles and ellipses\nNeither annotate nor GGPlot provides a convenient way to add circles and ellipses to a plot – we will use the ggforce package to do this.  ggforce adds two new plot components geom_circleand geom_ellipse.  Both components use subcomponents that are similar to the subcomponents used in other ggplot plotting components.\n  #### Part 15: Add a simple circle ####\n  ## The circle is skewed because the plot axes are not the same scale\n  plot14 = plot12 +\n     # coord_fixed() +  # sets axes to same scale so circle is visually a circle\n       geom_circle(mapping=aes(x0 = 50, y0 = 50, r = 10),\n                 alpha=0.2,   \n                 color = \"blue\",\n                 fill = \"green\",\n                 linewidth=3,\n                 linetype=3);\n  plot(plot15);\nThe main difference in setup between geom_circle and other plotting components is that you need to map three value: x0, y0, and r.  x0 and y0 represent the circle’s center and r represents the radius.\n \nAxes often have different scales that will skew the circle.  If you want to visually maintain the circle then you need to rescale the axes – this is done using coord_fixed(), which is commented out in my code.\n\n\n\n\n\n\nFigure 14: Adding a circle to the plot\n\n\n\n\n9.1 Ellipse\ngeom_ellipse is similar to geom_circle except that you need more values to define an ellipse.  The mapped values are:\n\nx0, y0: center point of the ellipse\na, b: the two radii of the ellipse\nangle: spins the ellipse \n\n  plot16 = plot12 + \n    geom_ellipse(mapping=aes(x0 = 50, y0 = 50, a = 20, b=10, angle=-90),\n                 alpha=0.2,   \n                 color = \"blue\",\n                 fill = \"green\",\n                 linewidth=3,\n                 linetype=3);\n  plot(plot16);\n\n\n\n\n\n\nFigure 15: Adding an ellipse to a plot",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "11: Annotations"
    ]
  },
  {
    "objectID": "lessons/11-Annotations.html#application",
    "href": "lessons/11-Annotations.html#application",
    "title": "11: Annotations",
    "section": "10 Application",
    "text": "10 Application\nUse data from Lansing2016NOAA.csv\n \n1) Using the plot from Figure 1:\n\nUsing annotate, add three outlier points to the East box (two above and one below).\nChange the color, shape, and size of the points\nLabels the points with their value\nPut black boxes behind the labels\n\n \n2) Using annotate create a scatterplot of just the first 100 values of relative humidity vs. average temperature:\n\nCreate a 5-point polygon that covers all temperature points less than or equal to 20 degrees (shown circled in red in image below)\n\nthe image is just showing you which points to cover – you are not trying to replicate the shape in the image!\n\nAdd a horizontal and vertical lines that represent the median temperature and median humidity for the 100 values\nCreate an ellipse that covers the 9 points circled in grey below\n\n\n\n\n\n\n\nFigure 16: Polygon and ellipse for question 2 in the application\n\n\n\n \n3) Using annotate, create a plot of \\(y=\\sqrt{x}\\)\n\nUse geom = “line”\ncreate 1000 points on the x-axis (i.e, a sequence from 1 to 1000) )\ncreate 1000 points on the y-axis (i.e, a sequence from sqrt(1 to 1000) )\nadd an arrow to the end of the curve\n\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n10.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?\n\n\n\n10.2 Turn in on GitHub\nSave the script as app11.r in your scripts folder, Push the changes to your GitHub repository, create an Issue in GitHub that says you have finished the application and assign the issue to belinskyc.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "11: Annotations"
    ]
  },
  {
    "objectID": "lessons/11-Annotations.html#extension-extracting-the-date-of-the-outliers-using-code",
    "href": "lessons/11-Annotations.html#extension-extracting-the-date-of-the-outliers-using-code",
    "title": "11: Annotations",
    "section": "11 Extension: extracting the date of the outliers using code",
    "text": "11 Extension: extracting the date of the outliers using code\nThe code is beyond the scope of this class and finding other outlier values gets even trickier… \n  # Get the index of all days with west winds\n  «westWindDays» = which(weatherData$windDir == \"West\"); \n  \n  # find the maximum change in temperature on days with west winds\n  «maxTempChange» = max(weatherData$changeMaxTemp[«westWindDays»],\n                      na.rm = TRUE);  # need to remove NA values\n  \n  # find the index of the the day that had the max value (28)\n  «dayMaxChange» = which.max(weatherData$changeMaxTemp[«westWindDays»]);\n  \n  # Get the date from the index (2-19)\n  date = weatherData$date[westWindDays[dayMaxChange]];",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "11: Annotations"
    ]
  },
  {
    "objectID": "lessons/11-Annotations.html#extension-add-horizontal-and-vertical-lines-using-annotate",
    "href": "lessons/11-Annotations.html#extension-add-horizontal-and-vertical-lines-using-annotate",
    "title": "11: Annotations",
    "section": "12 Extension: Add horizontal and vertical lines using annotate",
    "text": "12 Extension: Add horizontal and vertical lines using annotate\nWhen we used geom_hline and geom_vline to create line, we put the information needed for the line (xintercept and yintercept) inside the mapping.  This is inconsistent with what mapping is intended for because we are hardcoding, not mapping, the value from the data.  There is a more conceptually consistent way to plot horizontal and vertical lines using annotate but there is a bug:\n  ##### Part 14b: Using annotate for vertical and horizontal lines (buggy) ####\n  plot14b = plot12 +\n    annotate(geom=\"vline\",\n             xintercept = meanTemp,\n             x = meanTemp, # x must be included but is ignored (this is a bug)\n             color = \"orange\",\n             linewidth= 2) +\n    annotate(geom=\"hline\",\n             yintercept = meanHum,\n             y = meanHum,  # y must be included but is ignored (this is a bug)\n             color = \"purple\",\n             linewidth= 2);\n  plot(plot14b);\nThe above code produces the same plot as Figure 13 but uses annotate, which is designed for hardcoded (i.e., non-mapped) values.  The problem is that you need to include the intercept values twice: once for the axis (x, y) and once for the intercept (xintercept, yintercept) – and you will get a warning regarding x and y.  Otherwise, the code works fine.",
    "crumbs": [
      "<b>Graphing With GGPlot class</b>",
      "11: Annotations"
    ]
  }
]